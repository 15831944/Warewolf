// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.Tools.Specs.Toolbox.Data.BaseConversion
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("BaseConversion")]
    [NUnit.Framework.CategoryAttribute("Data")]
    public partial class BaseConversionFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BaseConversion.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BaseConversion", "\tIn order to convert base encoding types\r\n\tAs a Warewolf user\r\n\tI want a tool tha" +
                    "t converts data from one base econding to another", ProgrammingLanguage.CSharp, new string[] {
                        "Data"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert from text to text")]
        public virtual void ConvertFromTextToText()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert from text to text", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"AA\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("I convert a variable \"[[var]]\" from type \"Text\" to type \"Text\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then("the result is \"AA\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 12
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1163 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1163.AddRow(new string[] {
                        "1",
                        "[[var]] = AA",
                        "Text",
                        "Text"});
#line 13
 testRunner.And("the debug inputs as", ((string)(null)), table1163, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1164 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1164.AddRow(new string[] {
                        "1",
                        "[[var]] = AA"});
#line 16
 testRunner.And("the debug output as", ((string)(null)), table1164, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert from text to binary")]
        public virtual void ConvertFromTextToBinary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert from text to binary", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"AA\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
 testRunner.And("I convert a variable \"[[var]]\" from type \"Text\" to type \"Binary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
 testRunner.Then("the result is \"0100000101000001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 25
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1165 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1165.AddRow(new string[] {
                        "1",
                        "[[var]] = AA",
                        "Text",
                        "Binary"});
#line 26
 testRunner.And("the debug inputs as", ((string)(null)), table1165, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1166 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1166.AddRow(new string[] {
                        "1",
                        "[[var]] = 0100000101000001"});
#line 29
 testRunner.And("the debug output as", ((string)(null)), table1166, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert from text to hexadecimal")]
        public virtual void ConvertFromTextToHexadecimal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert from text to hexadecimal", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line 34
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"AA\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 35
 testRunner.And("I convert a variable \"[[var]]\" from type \"Text\" to type \"Hex\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.Then("the result is \"0x4141\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 38
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1167 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1167.AddRow(new string[] {
                        "1",
                        "[[var]] = AA",
                        "Text",
                        "Hex"});
#line 39
 testRunner.And("the debug inputs as", ((string)(null)), table1167, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1168 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1168.AddRow(new string[] {
                        "1",
                        "[[var]] = 0x4141"});
#line 42
 testRunner.And("the debug output as", ((string)(null)), table1168, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert from text to base64")]
        public virtual void ConvertFromTextToBase64()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert from text to base64", ((string[])(null)));
#line 46
this.ScenarioSetup(scenarioInfo);
#line 47
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"AA\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 48
 testRunner.And("I convert a variable \"[[var]]\" from type \"Text\" to type \"Base 64\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
 testRunner.Then("the result is \"QUE=\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 51
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1169 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1169.AddRow(new string[] {
                        "1",
                        "[[var]] = AA",
                        "Text",
                        "Base 64"});
#line 52
 testRunner.And("the debug inputs as", ((string)(null)), table1169, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1170 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1170.AddRow(new string[] {
                        "1",
                        "[[var]] = QUE="});
#line 55
 testRunner.And("the debug output as", ((string)(null)), table1170, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert from binary to binary")]
        public virtual void ConvertFromBinaryToBinary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert from binary to binary", ((string[])(null)));
#line 59
this.ScenarioSetup(scenarioInfo);
#line 60
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"0100000101000001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 61
 testRunner.And("I convert a variable \"[[var]]\" from type \"Binary\" to type \"Binary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 63
 testRunner.Then("the result is \"0100000101000001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 64
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1171 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1171.AddRow(new string[] {
                        "1",
                        "[[var]] = 0100000101000001",
                        "Binary",
                        "Binary"});
#line 65
 testRunner.And("the debug inputs as", ((string)(null)), table1171, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1172 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1172.AddRow(new string[] {
                        "1",
                        "[[var]] = 0100000101000001"});
#line 68
 testRunner.And("the debug output as", ((string)(null)), table1172, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert from binary to text")]
        public virtual void ConvertFromBinaryToText()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert from binary to text", ((string[])(null)));
#line 72
this.ScenarioSetup(scenarioInfo);
#line 73
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"0100000101000001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 74
 testRunner.And("I convert a variable \"[[var]]\" from type \"Binary\" to type \"Text\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 76
 testRunner.Then("the result is \"AA\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 77
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1173 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1173.AddRow(new string[] {
                        "1",
                        "[[var]] = 0100000101000001",
                        "Binary",
                        "Text"});
#line 78
 testRunner.And("the debug inputs as", ((string)(null)), table1173, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1174 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1174.AddRow(new string[] {
                        "1",
                        "[[var]] = AA"});
#line 81
 testRunner.And("the debug output as", ((string)(null)), table1174, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert from binary to hexadecimal")]
        public virtual void ConvertFromBinaryToHexadecimal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert from binary to hexadecimal", ((string[])(null)));
#line 85
this.ScenarioSetup(scenarioInfo);
#line 86
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"0100000101000001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 87
 testRunner.And("I convert a variable \"[[var]]\" from type \"Binary\" to type \"Hex\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 89
 testRunner.Then("the result is \"0x4141\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 90
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1175 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1175.AddRow(new string[] {
                        "1",
                        "[[var]] = 0100000101000001",
                        "Binary",
                        "Hex"});
#line 91
 testRunner.And("the debug inputs as", ((string)(null)), table1175, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1176 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1176.AddRow(new string[] {
                        "1",
                        "[[var]] = 0x4141"});
#line 94
 testRunner.And("the debug output as", ((string)(null)), table1176, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert from binary to base64")]
        public virtual void ConvertFromBinaryToBase64()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert from binary to base64", ((string[])(null)));
#line 98
this.ScenarioSetup(scenarioInfo);
#line 99
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"0100000101000001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 100
 testRunner.And("I convert a variable \"[[var]]\" from type \"Binary\" to type \"Base 64\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 102
 testRunner.Then("the result is \"QUE=\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 103
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1177 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1177.AddRow(new string[] {
                        "1",
                        "[[var]] = 0100000101000001",
                        "Binary",
                        "Base 64"});
#line 104
 testRunner.And("the debug inputs as", ((string)(null)), table1177, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1178 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1178.AddRow(new string[] {
                        "1",
                        "[[var]] = QUE="});
#line 107
 testRunner.And("the debug output as", ((string)(null)), table1178, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert from hexadecimal to hexadecimal")]
        public virtual void ConvertFromHexadecimalToHexadecimal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert from hexadecimal to hexadecimal", ((string[])(null)));
#line 111
this.ScenarioSetup(scenarioInfo);
#line 112
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"0x4141\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 113
 testRunner.And("I convert a variable \"[[var]]\" from type \"Hex\" to type \"Hex\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 114
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 115
 testRunner.Then("the result is \"0x4141\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 116
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1179 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1179.AddRow(new string[] {
                        "1",
                        "[[var]] = 0x4141",
                        "Hex",
                        "Hex"});
#line 117
 testRunner.And("the debug inputs as", ((string)(null)), table1179, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1180 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1180.AddRow(new string[] {
                        "1",
                        "[[var]] = 0x4141"});
#line 120
 testRunner.And("the debug output as", ((string)(null)), table1180, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert from hexadecimal to text")]
        public virtual void ConvertFromHexadecimalToText()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert from hexadecimal to text", ((string[])(null)));
#line 124
this.ScenarioSetup(scenarioInfo);
#line 125
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"0x4141\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 126
 testRunner.And("I convert a variable \"[[var]]\" from type \"Hex\" to type \"Text\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 127
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 128
 testRunner.Then("the result is \"AA\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 129
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1181 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1181.AddRow(new string[] {
                        "1",
                        "[[var]] = 0x4141",
                        "Hex",
                        "Text"});
#line 130
 testRunner.And("the debug inputs as", ((string)(null)), table1181, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1182 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1182.AddRow(new string[] {
                        "1",
                        "[[var]] = AA"});
#line 133
 testRunner.And("the debug output as", ((string)(null)), table1182, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert from hexadecimal to binary")]
        public virtual void ConvertFromHexadecimalToBinary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert from hexadecimal to binary", ((string[])(null)));
#line 137
this.ScenarioSetup(scenarioInfo);
#line 138
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"0x4141\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 139
 testRunner.And("I convert a variable \"[[var]]\" from type \"Hex\" to type \"Binary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 140
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 141
 testRunner.Then("the result is \"0100000101000001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 142
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1183 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1183.AddRow(new string[] {
                        "1",
                        "[[var]] = 0x4141",
                        "Hex",
                        "Binary"});
#line 143
 testRunner.And("the debug inputs as", ((string)(null)), table1183, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1184 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1184.AddRow(new string[] {
                        "1",
                        "[[var]] = 0100000101000001"});
#line 146
 testRunner.And("the debug output as", ((string)(null)), table1184, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert from hexadecimal to base64")]
        public virtual void ConvertFromHexadecimalToBase64()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert from hexadecimal to base64", ((string[])(null)));
#line 150
this.ScenarioSetup(scenarioInfo);
#line 151
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"0x4141\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 152
 testRunner.And("I convert a variable \"[[var]]\" from type \"Hex\" to type \"Base 64\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 153
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 154
 testRunner.Then("the result is \"QUE=\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 155
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1185 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1185.AddRow(new string[] {
                        "1",
                        "[[var]] = 0x4141",
                        "Hex",
                        "Base 64"});
#line 156
 testRunner.And("the debug inputs as", ((string)(null)), table1185, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1186 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1186.AddRow(new string[] {
                        "1",
                        "[[var]] = QUE="});
#line 159
 testRunner.And("the debug output as", ((string)(null)), table1186, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert from base64 to hexadecimal")]
        public virtual void ConvertFromBase64ToHexadecimal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert from base64 to hexadecimal", ((string[])(null)));
#line 163
this.ScenarioSetup(scenarioInfo);
#line 164
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"QUE=\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 165
 testRunner.And("I convert a variable \"[[var]]\" from type \"Base 64\" to type \"Hex\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 166
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 167
 testRunner.Then("the result is \"0x4141\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 168
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1187 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1187.AddRow(new string[] {
                        "1",
                        "[[var]] = QUE=",
                        "Base 64",
                        "Hex"});
#line 169
 testRunner.And("the debug inputs as", ((string)(null)), table1187, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1188 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1188.AddRow(new string[] {
                        "1",
                        "[[var]] = 0x4141"});
#line 172
 testRunner.And("the debug output as", ((string)(null)), table1188, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert from base64 to text")]
        public virtual void ConvertFromBase64ToText()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert from base64 to text", ((string[])(null)));
#line 176
this.ScenarioSetup(scenarioInfo);
#line 177
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"QUE=\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 178
 testRunner.And("I convert a variable \"[[var]]\" from type \"Base 64\" to type \"Text\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 179
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 180
 testRunner.Then("the result is \"AA\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 181
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1189 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1189.AddRow(new string[] {
                        "1",
                        "[[var]] = QUE=",
                        "Base 64",
                        "Text"});
#line 182
 testRunner.And("the debug inputs as", ((string)(null)), table1189, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1190 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1190.AddRow(new string[] {
                        "1",
                        "[[var]] = AA"});
#line 185
 testRunner.And("the debug output as", ((string)(null)), table1190, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert from base64 to binary")]
        public virtual void ConvertFromBase64ToBinary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert from base64 to binary", ((string[])(null)));
#line 189
this.ScenarioSetup(scenarioInfo);
#line 190
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"QUE=\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 191
 testRunner.And("I convert a variable \"[[var]]\" from type \"Base 64\" to type \"Binary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 192
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 193
 testRunner.Then("the result is \"0100000101000001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 194
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1191 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1191.AddRow(new string[] {
                        "1",
                        "[[var]] = QUE=",
                        "Base 64",
                        "Binary"});
#line 195
 testRunner.And("the debug inputs as", ((string)(null)), table1191, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1192 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1192.AddRow(new string[] {
                        "1",
                        "[[var]] = 0100000101000001"});
#line 198
 testRunner.And("the debug output as", ((string)(null)), table1192, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert from base64 to base64")]
        public virtual void ConvertFromBase64ToBase64()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert from base64 to base64", ((string[])(null)));
#line 202
this.ScenarioSetup(scenarioInfo);
#line 203
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"QUE=\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 204
 testRunner.And("I convert a variable \"[[var]]\" from type \"Base 64\" to type \"Base 64\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 205
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 206
 testRunner.Then("the result is \"QUE=\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 207
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1193 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1193.AddRow(new string[] {
                        "1",
                        "[[var]] = QUE=",
                        "Base 64",
                        "Base 64"});
#line 208
 testRunner.And("the debug inputs as", ((string)(null)), table1193, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1194 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1194.AddRow(new string[] {
                        "1",
                        "[[var]] = QUE="});
#line 211
 testRunner.And("the debug output as", ((string)(null)), table1194, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert blank from text to binary")]
        public virtual void ConvertBlankFromTextToBinary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert blank from text to binary", ((string[])(null)));
#line 215
this.ScenarioSetup(scenarioInfo);
#line 216
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"blank\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 217
 testRunner.And("I convert a variable \"[[var]]\" from type \"Text\" to type \"Binary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 218
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 219
 testRunner.Then("the result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 220
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1195 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1195.AddRow(new string[] {
                        "1",
                        "[[var]] =",
                        "Text",
                        "Binary"});
#line 221
 testRunner.And("the debug inputs as", ((string)(null)), table1195, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1196 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1196.AddRow(new string[] {
                        "1",
                        "[[var]] ="});
#line 224
 testRunner.And("the debug output as", ((string)(null)), table1196, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert blank from text to hexadecimal")]
        public virtual void ConvertBlankFromTextToHexadecimal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert blank from text to hexadecimal", ((string[])(null)));
#line 228
this.ScenarioSetup(scenarioInfo);
#line 229
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"blank\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 230
 testRunner.And("I convert a variable \"[[var]]\" from type \"Text\" to type \"Hex\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 231
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 232
 testRunner.Then("the result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 233
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1197 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1197.AddRow(new string[] {
                        "1",
                        "[[var]] =",
                        "Text",
                        "Hex"});
#line 234
 testRunner.And("the debug inputs as", ((string)(null)), table1197, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1198 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1198.AddRow(new string[] {
                        "1",
                        "[[var]] ="});
#line 237
 testRunner.And("the debug output as", ((string)(null)), table1198, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert blank from text to base64")]
        public virtual void ConvertBlankFromTextToBase64()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert blank from text to base64", ((string[])(null)));
#line 241
this.ScenarioSetup(scenarioInfo);
#line 242
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"blank\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 243
 testRunner.And("I convert a variable \"[[var]]\" from type \"Text\" to type \"Base 64\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 244
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 245
 testRunner.Then("the result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 246
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1199 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1199.AddRow(new string[] {
                        "1",
                        "[[var]] =",
                        "Text",
                        "Base 64"});
#line 247
 testRunner.And("the debug inputs as", ((string)(null)), table1199, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1200 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1200.AddRow(new string[] {
                        "1",
                        "[[var]] ="});
#line 250
 testRunner.And("the debug output as", ((string)(null)), table1200, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert blank from binary to text")]
        public virtual void ConvertBlankFromBinaryToText()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert blank from binary to text", ((string[])(null)));
#line 254
this.ScenarioSetup(scenarioInfo);
#line 255
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"blank\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 256
 testRunner.And("I convert a variable \"[[var]]\" from type \"Binary\" to type \"Text\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 257
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 258
 testRunner.Then("the result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 259
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1201 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1201.AddRow(new string[] {
                        "1",
                        "[[var]] =",
                        "Binary",
                        "Text"});
#line 260
 testRunner.And("the debug inputs as", ((string)(null)), table1201, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1202 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1202.AddRow(new string[] {
                        "1",
                        "[[var]] ="});
#line 263
 testRunner.And("the debug output as", ((string)(null)), table1202, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert blank from binary to hexadecimal")]
        public virtual void ConvertBlankFromBinaryToHexadecimal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert blank from binary to hexadecimal", ((string[])(null)));
#line 267
this.ScenarioSetup(scenarioInfo);
#line 268
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"blank\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 269
 testRunner.And("I convert a variable \"[[var]]\" from type \"Binary\" to type \"Hex\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 270
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 271
 testRunner.Then("the result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 272
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1203 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1203.AddRow(new string[] {
                        "1",
                        "[[var]] =",
                        "Binary",
                        "Hex"});
#line 273
 testRunner.And("the debug inputs as", ((string)(null)), table1203, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1204 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1204.AddRow(new string[] {
                        "1",
                        "[[var]] ="});
#line 276
 testRunner.And("the debug output as", ((string)(null)), table1204, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert blank from binary to base64")]
        public virtual void ConvertBlankFromBinaryToBase64()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert blank from binary to base64", ((string[])(null)));
#line 280
this.ScenarioSetup(scenarioInfo);
#line 281
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"blank\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 282
 testRunner.And("I convert a variable \"[[var]]\" from type \"Binary\" to type \"Base 64\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 283
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 284
 testRunner.Then("the result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 285
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1205 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1205.AddRow(new string[] {
                        "1",
                        "[[var]] =",
                        "Binary",
                        "Base 64"});
#line 286
 testRunner.And("the debug inputs as", ((string)(null)), table1205, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1206 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1206.AddRow(new string[] {
                        "1",
                        "[[var]] ="});
#line 289
 testRunner.And("the debug output as", ((string)(null)), table1206, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert blank from hexadecimal to text")]
        public virtual void ConvertBlankFromHexadecimalToText()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert blank from hexadecimal to text", ((string[])(null)));
#line 293
this.ScenarioSetup(scenarioInfo);
#line 294
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"blank\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 295
 testRunner.And("I convert a variable \"[[var]]\" from type \"Hex\" to type \"Text\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 296
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 297
 testRunner.Then("the result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 298
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1207 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1207.AddRow(new string[] {
                        "1",
                        "[[var]] =",
                        "Hex",
                        "Text"});
#line 299
 testRunner.And("the debug inputs as", ((string)(null)), table1207, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1208 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1208.AddRow(new string[] {
                        "1",
                        "[[var]] ="});
#line 302
 testRunner.And("the debug output as", ((string)(null)), table1208, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert blank from hexadecimal to binary")]
        public virtual void ConvertBlankFromHexadecimalToBinary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert blank from hexadecimal to binary", ((string[])(null)));
#line 306
this.ScenarioSetup(scenarioInfo);
#line 307
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"blank\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 308
 testRunner.And("I convert a variable \"[[var]]\" from type \"Hex\" to type \"Binary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 309
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 310
 testRunner.Then("the result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 311
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1209 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1209.AddRow(new string[] {
                        "1",
                        "[[var]] =",
                        "Hex",
                        "Binary"});
#line 312
 testRunner.And("the debug inputs as", ((string)(null)), table1209, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1210 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1210.AddRow(new string[] {
                        "1",
                        "[[var]] ="});
#line 315
 testRunner.And("the debug output as", ((string)(null)), table1210, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert blank from hexadecimal to base64")]
        public virtual void ConvertBlankFromHexadecimalToBase64()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert blank from hexadecimal to base64", ((string[])(null)));
#line 319
this.ScenarioSetup(scenarioInfo);
#line 320
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"blank\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 321
 testRunner.And("I convert a variable \"[[var]]\" from type \"Hex\" to type \"Base 64\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 322
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 323
 testRunner.Then("the result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 324
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1211 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1211.AddRow(new string[] {
                        "1",
                        "[[var]] =",
                        "Hex",
                        "Base 64"});
#line 325
 testRunner.And("the debug inputs as", ((string)(null)), table1211, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1212 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1212.AddRow(new string[] {
                        "1",
                        "[[var]] ="});
#line 328
 testRunner.And("the debug output as", ((string)(null)), table1212, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert blank from base64 to hexadecimal")]
        public virtual void ConvertBlankFromBase64ToHexadecimal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert blank from base64 to hexadecimal", ((string[])(null)));
#line 332
this.ScenarioSetup(scenarioInfo);
#line 333
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"blank\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 334
 testRunner.And("I convert a variable \"[[var]]\" from type \"Base 64\" to type \"Hex\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 335
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 336
 testRunner.Then("the result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 337
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1213 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1213.AddRow(new string[] {
                        "1",
                        "[[var]] =",
                        "Base 64",
                        "Hex"});
#line 338
 testRunner.And("the debug inputs as", ((string)(null)), table1213, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1214 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1214.AddRow(new string[] {
                        "1",
                        "[[var]] ="});
#line 341
 testRunner.And("the debug output as", ((string)(null)), table1214, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert blank from base64 to text")]
        public virtual void ConvertBlankFromBase64ToText()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert blank from base64 to text", ((string[])(null)));
#line 345
this.ScenarioSetup(scenarioInfo);
#line 346
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"blank\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 347
 testRunner.And("I convert a variable \"[[var]]\" from type \"Base 64\" to type \"Text\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 348
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 349
 testRunner.Then("the result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 350
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1215 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1215.AddRow(new string[] {
                        "1",
                        "[[var]] =",
                        "Base 64",
                        "Text"});
#line 351
 testRunner.And("the debug inputs as", ((string)(null)), table1215, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1216 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1216.AddRow(new string[] {
                        "1",
                        "[[var]] ="});
#line 354
 testRunner.And("the debug output as", ((string)(null)), table1216, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert blank from base64 to binary")]
        public virtual void ConvertBlankFromBase64ToBinary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert blank from base64 to binary", ((string[])(null)));
#line 358
this.ScenarioSetup(scenarioInfo);
#line 359
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"blank\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 360
 testRunner.And("I convert a variable \"[[var]]\" from type \"Base 64\" to type \"Binary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 361
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 362
 testRunner.Then("the result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 363
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1217 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1217.AddRow(new string[] {
                        "1",
                        "[[var]] =",
                        "Base 64",
                        "Binary"});
#line 364
 testRunner.And("the debug inputs as", ((string)(null)), table1217, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1218 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1218.AddRow(new string[] {
                        "1",
                        "[[var]] ="});
#line 367
  testRunner.And("the debug output as", ((string)(null)), table1218, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert negative recordset index from text to binary")]
        public virtual void ConvertNegativeRecordsetIndexFromTextToBinary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert negative recordset index from text to binary", ((string[])(null)));
#line 371
this.ScenarioSetup(scenarioInfo);
#line 372
 testRunner.Given("I have a convert variable \"[[my(-1).var]]\" with a value of \"AA\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 373
 testRunner.And("I convert a variable \"[[my(-1).var]]\" from type \"Text\" to type \"Binary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 374
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 375
 testRunner.Then("the result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 376
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1219 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1219.AddRow(new string[] {
                        "1",
                        "[[my(-1).var]] =",
                        "Text",
                        "Binary"});
#line 377
 testRunner.And("the debug inputs as", ((string)(null)), table1219, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1220 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 380
 testRunner.And("the debug output as", ((string)(null)), table1220, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert negative recordset index from text to hexadecimal")]
        public virtual void ConvertNegativeRecordsetIndexFromTextToHexadecimal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert negative recordset index from text to hexadecimal", ((string[])(null)));
#line 383
this.ScenarioSetup(scenarioInfo);
#line 384
 testRunner.Given("I have a convert variable \"[[my(-1).var]]\" with a value of \"AA\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 385
 testRunner.And("I convert a variable \"[[my(-1).var]]\" from type \"Text\" to type \"Hex\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 386
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 387
 testRunner.Then("the result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 388
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1221 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1221.AddRow(new string[] {
                        "1",
                        "[[my(-1).var]] =",
                        "Text",
                        "Hex"});
#line 389
 testRunner.And("the debug inputs as", ((string)(null)), table1221, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1222 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 392
 testRunner.And("the debug output as", ((string)(null)), table1222, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert negative recordset index from text to base64")]
        public virtual void ConvertNegativeRecordsetIndexFromTextToBase64()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert negative recordset index from text to base64", ((string[])(null)));
#line 395
this.ScenarioSetup(scenarioInfo);
#line 396
 testRunner.Given("I have a convert variable \"[[my(-1).var]]\" with a value of \"AA\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 397
 testRunner.And("I convert a variable \"[[my(-1).var]]\" from type \"Text\" to type \"Base 64\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 398
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 399
 testRunner.Then("the result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 400
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1223 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1223.AddRow(new string[] {
                        "1",
                        "[[my(-1).var]] =",
                        "Text",
                        "Base 64"});
#line 401
 testRunner.And("the debug inputs as", ((string)(null)), table1223, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1224 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 404
 testRunner.And("the debug output as", ((string)(null)), table1224, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert negative recordset index from binary to text")]
        public virtual void ConvertNegativeRecordsetIndexFromBinaryToText()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert negative recordset index from binary to text", ((string[])(null)));
#line 407
this.ScenarioSetup(scenarioInfo);
#line 408
 testRunner.Given("I have a convert variable \"[[my(-1).var]]\" with a value of \"0100000101000001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 409
 testRunner.And("I convert a variable \"[[my(-1).var]]\" from type \"Binary\" to type \"Text\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 410
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 411
 testRunner.Then("the result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 412
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1225 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1225.AddRow(new string[] {
                        "1",
                        "[[my(-1).var]] =",
                        "Binary",
                        "Text"});
#line 413
 testRunner.And("the debug inputs as", ((string)(null)), table1225, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1226 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 416
 testRunner.And("the debug output as", ((string)(null)), table1226, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert negative recordset index from binary to hexadecimal")]
        public virtual void ConvertNegativeRecordsetIndexFromBinaryToHexadecimal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert negative recordset index from binary to hexadecimal", ((string[])(null)));
#line 419
this.ScenarioSetup(scenarioInfo);
#line 420
 testRunner.Given("I have a convert variable \"[[my(-1).var]]\" with a value of \"0100000101000001\"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 421
 testRunner.And("I convert a variable \"[[my(-1).var]]\" from type \"Binary\" to type \"Hex\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 422
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 423
 testRunner.Then("the result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 424
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1227 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1227.AddRow(new string[] {
                        "1",
                        "[[my(-1).var]] =",
                        "Binary",
                        "Hex"});
#line 425
 testRunner.And("the debug inputs as", ((string)(null)), table1227, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1228 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 428
 testRunner.And("the debug output as", ((string)(null)), table1228, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert negative recordset index from binary to base64")]
        public virtual void ConvertNegativeRecordsetIndexFromBinaryToBase64()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert negative recordset index from binary to base64", ((string[])(null)));
#line 431
this.ScenarioSetup(scenarioInfo);
#line 432
 testRunner.Given("I have a convert variable \"[[my(-1).var]]\" with a value of \"0100000101000001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 433
 testRunner.And("I convert a variable \"[[my(-1).var]]\" from type \"Binary\" to type \"Base 64\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 434
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 435
 testRunner.Then("the result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 436
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1229 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1229.AddRow(new string[] {
                        "1",
                        "[[my(-1).var]] =",
                        "Binary",
                        "Base 64"});
#line 437
 testRunner.And("the debug inputs as", ((string)(null)), table1229, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1230 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 440
 testRunner.And("the debug output as", ((string)(null)), table1230, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert negative recordset index from hexadecimal to text")]
        public virtual void ConvertNegativeRecordsetIndexFromHexadecimalToText()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert negative recordset index from hexadecimal to text", ((string[])(null)));
#line 443
this.ScenarioSetup(scenarioInfo);
#line 444
 testRunner.Given("I have a convert variable \"[[my(-1).var]]\" with a value of \"0x4141\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 445
 testRunner.And("I convert a variable \"[[my(-1).var]]\" from type \"Hex\" to type \"Text\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 446
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 447
 testRunner.Then("the result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 448
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1231 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1231.AddRow(new string[] {
                        "1",
                        "[[my(-1).var]] =",
                        "Hex",
                        "Text"});
#line 449
 testRunner.And("the debug inputs as", ((string)(null)), table1231, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1232 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 452
 testRunner.And("the debug output as", ((string)(null)), table1232, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert negative recordset index from hexadecimal to binary")]
        public virtual void ConvertNegativeRecordsetIndexFromHexadecimalToBinary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert negative recordset index from hexadecimal to binary", ((string[])(null)));
#line 455
this.ScenarioSetup(scenarioInfo);
#line 456
 testRunner.Given("I have a convert variable \"[[my(-1).var]]\" with a value of \"0x4141\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 457
 testRunner.And("I convert a variable \"[[my(-1).var]]\" from type \"Hex\" to type \"Binary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 458
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 459
 testRunner.Then("the result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 460
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1233 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1233.AddRow(new string[] {
                        "1",
                        "[[my(-1).var]] =",
                        "Hex",
                        "Binary"});
#line 461
 testRunner.And("the debug inputs as", ((string)(null)), table1233, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1234 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 464
 testRunner.And("the debug output as", ((string)(null)), table1234, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert negative recordset index from hexadecimal to base64")]
        public virtual void ConvertNegativeRecordsetIndexFromHexadecimalToBase64()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert negative recordset index from hexadecimal to base64", ((string[])(null)));
#line 467
this.ScenarioSetup(scenarioInfo);
#line 468
 testRunner.Given("I have a convert variable \"[[my(-1).var]]\" with a value of \"0x4141\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 469
 testRunner.And("I convert a variable \"[[my(-1).var]]\" from type \"Hex\" to type \"Base 64\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 470
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 471
 testRunner.Then("the result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 472
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1235 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1235.AddRow(new string[] {
                        "1",
                        "[[my(-1).var]] =",
                        "Hex",
                        "Base 64"});
#line 473
 testRunner.And("the debug inputs as", ((string)(null)), table1235, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1236 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 476
 testRunner.And("the debug output as", ((string)(null)), table1236, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert negative recordset index from base64 to hexadecimal")]
        public virtual void ConvertNegativeRecordsetIndexFromBase64ToHexadecimal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert negative recordset index from base64 to hexadecimal", ((string[])(null)));
#line 479
this.ScenarioSetup(scenarioInfo);
#line 480
 testRunner.Given("I have a convert variable \"[[my(-1).var]]\" with a value of \"QUE=\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 481
 testRunner.And("I convert a variable \"[[my(-1).var]]\" from type \"Base 64\" to type \"Hex\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 482
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 483
 testRunner.Then("the result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 484
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1237 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1237.AddRow(new string[] {
                        "1",
                        "[[my(-1).var]] =",
                        "Base 64",
                        "Hex"});
#line 485
 testRunner.And("the debug inputs as", ((string)(null)), table1237, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1238 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 488
 testRunner.And("the debug output as", ((string)(null)), table1238, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert negative recordset index from base64 to text")]
        public virtual void ConvertNegativeRecordsetIndexFromBase64ToText()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert negative recordset index from base64 to text", ((string[])(null)));
#line 491
this.ScenarioSetup(scenarioInfo);
#line 492
 testRunner.Given("I have a convert variable \"[[my(-1).var]]\" with a value of \"QUE=\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 493
 testRunner.And("I convert a variable \"[[my(-1).var]]\" from type \"Base 64\" to type \"Text\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 494
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 495
 testRunner.Then("the result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 496
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1239 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1239.AddRow(new string[] {
                        "1",
                        "[[my(-1).var]] =",
                        "Base 64",
                        "Text"});
#line 497
 testRunner.And("the debug inputs as", ((string)(null)), table1239, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1240 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        ""});
#line 500
 testRunner.And("the debug output as", ((string)(null)), table1240, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert negative recordset index from base64 to binary")]
        public virtual void ConvertNegativeRecordsetIndexFromBase64ToBinary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert negative recordset index from base64 to binary", ((string[])(null)));
#line 503
this.ScenarioSetup(scenarioInfo);
#line 504
 testRunner.Given("I have a convert variable \"[[my(-1).var]]\" with a value of \"QUE=\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 505
 testRunner.And("I convert a variable \"[[my(-1).var]]\" from type \"Base 64\" to type \"Binary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 506
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 507
 testRunner.Then("the result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 508
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1241 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1241.AddRow(new string[] {
                        "1",
                        "[[my(-1).var]] =",
                        "Base 64",
                        "Binary"});
#line 509
 testRunner.And("the debug inputs as", ((string)(null)), table1241, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1242 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        ""});
#line 512
 testRunner.And("the debug output as", ((string)(null)), table1242, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Converting two varibles on one row")]
        [NUnit.Framework.TestCaseAttribute("1", "Base 64", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("2", "Base 64", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("3", "Base 64", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("4", "Binary", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("5", "Binary", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("6", "Binary", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("7", "Text", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("8", "Text", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("9", "Text", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("10", "Hex", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("11", "Hex", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("12", "Hex", "Base 64", null)]
        public virtual void ConvertingTwoVariblesOnOneRow(string no, string from, string to, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Converting two varibles on one row", exampleTags);
#line 516
this.ScenarioSetup(scenarioInfo);
#line 517
 testRunner.Given("I have a convert variable \"[[a]]\" with a value of \"QUE=\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 518
 testRunner.And("I have a convert variable \"[[b]]\" with a value of \"QUE=\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 519
 testRunner.And(string.Format("I convert a variable \"[[a]][[b]]\" from type \"{0}\" to type \"{1}\"", from, to), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 520
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 521
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1243 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1243.AddRow(new string[] {
                        "1",
                        "[[a]][[b]] = QUE=QUE=",
                        string.Format("{0}", from),
                        string.Format("{0}", to)});
#line 522
 testRunner.And("the debug inputs as", ((string)(null)), table1243, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Converting varibles with data")]
        [NUnit.Framework.TestCaseAttribute("1", "Base 64", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("2", "Base 64", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("3", "Base 64", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("4", "Base 64", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("5", "Binary", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("6", "Binary", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("7", "Binary", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("8", "Binary", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("9", "Text", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("10", "Text", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("11", "Text", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("12", "Text", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("13", "Hex", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("14", "Hex", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("15", "Hex", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("16", "Hex", "Base 64", null)]
        public virtual void ConvertingVariblesWithData(string no, string from, string to, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Converting varibles with data", exampleTags);
#line 541
this.ScenarioSetup(scenarioInfo);
#line 542
 testRunner.Given("I have a convert variable \"[[a]]\" with a value of \"QUE=\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 543
 testRunner.And(string.Format("I convert a variable \"[[a]]test\" from type \"{0}\" to type \"{1}\"", from, to), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 544
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 545
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validation messages when Convert Invalid Variables")]
        [NUnit.Framework.TestCaseAttribute("1", "[[my(-1).var]]", "QUE=", "Base 64", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("2", "[[my(-1).var]]", "QUE=", "Base 64", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("3", "[[my([-1]).var]]", "QUE=", "Base 64", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("4", "[rec().a]]=]]", "QUE=", "Base 64", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("5", "[[rec\"()\".a]]", "QUE=", "Base 64", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("6", "[[rec\"()\".a]]", "QUE=", "Base 64", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("7", "[[rec\".a]]", "QUE=", "Base 64", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("8", "[[rec.a]]", "QUE=", "Base 64", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("9", "[[rec()*.a]]", "QUE=", "Base 64", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("10", "[[rec().a]]*", "QUE=", "Base 64", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("11", "[[1]]", "QUE=", "Base 64", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("12", "[[@]]", "QUE=", "Base 64", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("13", "[[var#]]", "QUE=", "Base 64", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("14", "[[var]]00]]", "QUE=", "Base 64", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("15", "[[var]]@]]", "QUE=", "Base 64", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("16", "[[var.()]]", "QUE=", "Base 64", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("17", "[[]]", "QUE=", "Base 64", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("18", "[[()]]", "QUE=", "Base 64", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("19", "[[var[[a]*]]]", "QUE=", "Base 64", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("20", "[[var[[]]", "QUE=", "Base 64", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("21", "[[var1.a]]", "QUE=", "Base 64", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("22", "[[rec()!a]]", "QUE=", "Base 64", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("23", "[[rec()         a]]", "QUE=", "Base 64", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("24", "[[{{rec(_).a}}]]]", "QUE=", "Base 64", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("25", "[[rec(23).[[var*]]]]", "QUE=", "Base 64", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("26", "[[r(q).a]][[r()..]][[r\"]][[r()]][[]][[1]]", "QUE=", "Base 64", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("27", "[[rec().a]]&[[a]]", "QUE=", "Base 64", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("28", "a[[rec([[[[b]]]]).a]]@", "QUE=", "Base 64", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("29", "[[var  ]]", "QUE=", "Base 64", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("30", "[[my(-1).var]]", "AA", "Text", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("31", "[[my(-1).var]]", "AA", "Text", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("32", "[[my(-1).var]]", "AA", "Text", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("33", "[[rec\"()\".a]]", "AA", "Text", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("34", "[[rec\"()\".a]]", "AA", "Text", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("35", "[[rec\".a]]", "AA", "Text", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("36", "[[rec.a]]", "AA", "Text", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("37", "[[rec()*.a]]", "AA", "Text", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("38", "[[rec().a]]*", "AA", "Text", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("39", "[[1]]", "AA", "Text", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("40", "[[@]]", "AA", "Text", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("41", "[[var#]]", "AA", "Text", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("42", "[[var]]00]]", "AA", "Text", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("43", "[[var]]@]]", "AA", "Text", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("44", "[[var.()]]", "AA", "Text", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("45", "[[]]", "AA", "Text", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("46", "[[()]]", "AA", "Text", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("47", "19", "AA", "Text", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("48", "[[var[[]]", "AA", "Text", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("49", "[[var1.a]]", "AA", "Text", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("50", "[[rec()!a]]", "AA", "Text", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("51", "[[rec()         a]]", "AA", "Text", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("52", "[[{{rec(_).a}}]]]", "AA", "Text", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("53", "[[rec(23).[[var*]]]]", "AA", "Text", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("54", "[[r(q).a]][[r()..]][[r\"]][[r()]][[]][[1]]", "AA", "Text", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("55", "[[rec().a]]&[[a]]", "AA", "Text", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("56", "a[[rec([[[[b]]]]).a]]@", "AA", "Text", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("57", "[[var  ]]", "AA", "Text", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("58", "[[my(-1).var]]", "0100000101000001", "Binary", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("59", "[[my(-1).var]]", "0100000101000001", "Binary", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("60", "[[my(-1).var]]", "0100000101000001", "Binary", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("61", "[[rec\"()\".a]]", "0100000101000001", "Binary", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("62", "[[rec\"()\".a]]", "0100000101000001", "Binary", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("63", "[[rec\".a]]", "0100000101000001", "Binary", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("64", "[[rec.a]]", "0100000101000001", "Binary", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("65", "[[rec()*.a]]", "0100000101000001", "Binary", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("66", "[[rec().a]]*", "0100000101000001", "Binary", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("67", "[[1]]", "0100000101000001", "Binary", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("68", "[[@]]", "0100000101000001", "Binary", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("69", "[[var#]]", "0100000101000001", "Binary", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("70", "[[var]]00]]", "0100000101000001", "Binary", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("71", "[[var]]@]]", "0100000101000001", "Binary", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("72", "[[var.()]]", "0100000101000001", "Binary", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("73", "[[]]", "0100000101000001", "Binary", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("74", "[[()]]", "0100000101000001", "Binary", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("75", "19", "0100000101000001", "Binary", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("75", "[[var[[]]", "0100000101000001", "Binary", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("77", "[[var1.a]]", "0100000101000001", "Binary", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("78", "[[rec()!a]]", "0100000101000001", "Binary", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("79", "[[rec()         a]]", "0100000101000001", "Binary", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("80", "[[{{rec(_).a}}]]]", "0100000101000001", "Binary", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("81", "[[rec(23).[[var*]]]]", "0100000101000001", "Binary", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("82", "[[r(q).a]][[r()..]][[r\"]][[r()]][[]][[1]]", "0100000101000001", "Binary", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("83", "[[rec().a]]&[[a]]", "0100000101000001", "Binary", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("84", "a[[rec([[[[b]]]]).a]]@", "0100000101000001", "Binary", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("85", "[[var  ]]", "0100000101000001", "Binary", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("86", "[[my(-1).var]]", "0x4141", "Hex", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("87", "[[my(-1).var]]", "0x4141", "Hex", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("88", "[[my(-1).var]]", "0x4141", "Hex", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("89", "[[rec\"()\".a]]", "0x4141", "Hex", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("90", "[[rec\"()\".a]]", "0x4141", "Hex", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("91", "[[rec\".a]]", "0x4141", "Hex", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("92", "[[rec.a]]", "0x4141", "Hex", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("93", "[[rec()*.a]]", "0x4141", "Hex", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("94", "[[rec().a]]*", "0x4141", "Hex", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("95", "[[1]]", "0x4141", "Hex", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("96", "[[@]]", "0x4141", "Hex", "Hex", null)]
        [NUnit.Framework.TestCaseAttribute("97", "[[var#]]", "0x4141", "Hex", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("98", "[[var]]00]]", "0x4141", "Hex", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("99", "[[var]]@]]", "0x4141", "Hex", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("100", "[[var.()]]", "0x4141", "Hex", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("101", "[[]]", "0x4141", "Hex", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("102", "[[()]]", "0x4141", "Hex", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("103", "19", "0x4141", "Hex", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("104", "[[var[[]]", "0x4141", "Hex", "Text", null)]
        [NUnit.Framework.TestCaseAttribute("105", "[[var1.a]]", "0x4141", "Hex", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("106", "[[rec()!a]]", "0x4141", "Hex", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("107", "[[rec()         a]]", "0x4141", "Hex", "Base 64", null)]
        [NUnit.Framework.TestCaseAttribute("108", "[[{{rec(_).a}}]]]", "0x4141", "Hex", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("109", "[[rec(23).[[var*]]]]", "0x4141", "Hex", "Binary", null)]
        [NUnit.Framework.TestCaseAttribute("110", "[[r(q).a]][[r()..]][[r\"]][[r()]][[]][[1", "0x4141", "Hex", "Binary", null)]
        public virtual void ValidationMessagesWhenConvertInvalidVariables(string no, string variable, string value, string from, string to, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validation messages when Convert Invalid Variables", exampleTags);
#line 567
this.ScenarioSetup(scenarioInfo);
#line 568
 testRunner.Given(string.Format("I have a convert variable \"{0}\" with a value of \"{1}\"", variable, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 569
 testRunner.And(string.Format("I convert a variable \"{0}\" from type \"{1}\" to type \"{2}\"", variable, from, to), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 570
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 571
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert a Variable That Does Not Exist")]
        public virtual void ConvertAVariableThatDoesNotExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert a Variable That Does Not Exist", ((string[])(null)));
#line 685
this.ScenarioSetup(scenarioInfo);
#line 686
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"[[a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 687
 testRunner.And("I convert a variable \"[[var]]\" from type \"Text\" to type \"Binary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 688
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 689
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert an empty recordset *")]
        [NUnit.Framework.TestCaseAttribute("1", "[[rs(*).row]]", "", "Binary", "Binary", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("2", "[[rs(*).row]]", "", "Binary", "Text", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("3", "[[rs(*).row]]", "", "Binary", "Hex", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("4", "[[rs(*).row]]", "", "Binary", "Base 64", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("5", "[[rs(*).row]]", "", "Text", "Binary", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("6", "[[rs(*).row]]", "", "Text", "Text", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("7", "[[rs(*).row]]", "", "Text", "Hex", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("8", "[[rs(*).row]]", "", "Text", "Base 64", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("9", "[[rs(*).row]]", "", "Hex", "Binary", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("10", "[[rs(*).row]]", "", "Hex", "Text", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("11", "[[rs(*).row]]", "", "Hex", "Hex", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("12", "[[rs(*).row]]", "", "Hex", "Base 64", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("13", "[[rs(*).row]]", "", "Base 64", "Binary", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("14", "[[rs(*).row]]", "", "Base 64", "Text", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("15", "[[rs(*).row]]", "", "Base 64", "Hex", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("16", "[[rs(*).row]]", "", "Base 64", "Base 64", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("17", "[[rs([[var]]).row]]", "", "Binary", "Binary", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("18", "[[rs([[var]]).row]]", "", "Binary", "Text", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("19", "[[rs([[var]]).row]]", "", "Binary", "Hex", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("20", "[[rs([[var]]).row]]", "", "Binary", "Base 64", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("21", "[[rs([[var]]).row]]", "", "Text", "Binary", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("22", "[[rs([[var]]).row]]", "", "Text", "Text", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("23", "[[rs([[var]]).row]]", "", "Text", "Hex", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("24", "[[rs([[var]]).row]]", "", "Text", "Base 64", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("25", "[[rs([[var]]).row]]", "", "Hex", "Binary", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("26", "[[rs([[var]]).row]]", "", "Hex", "Text", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("27", "[[rs([[var]]).row]]", "", "Hex", "Hex", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("28", "[[rs([[var]]).row]]", "", "Hex", "Base 64", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("29", "[[rs([[var]]).row]]", "", "Base 64", "Binary", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("30", "[[rs([[var]]).row]]", "", "Base 64", "Text", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("31", "[[rs([[var]]).row]]", "", "Base 64", "Hex", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("32", "[[rs([[var]]).row]]", "", "Base 64", "Base 64", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("33", "[[rs().row]]", "", "Binary", "Binary", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("34", "[[rs().row]]", "", "Binary", "Text", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("35", "[[rs().row]]", "", "Binary", "Hex", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("36", "[[rs().row]]", "", "Binary", "Base 64", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("37", "[[rs().row]]", "", "Text", "Binary", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("38", "[[rs().row]]", "", "Text", "Text", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("39", "[[rs().row]]", "", "Text", "Hex", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("40", "[[rs().row]]", "", "Text", "Base 64", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("41", "[[rs().row]]", "", "Hex", "Binary", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("42", "[[rs().row]]", "", "Hex", "Text", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("43", "[[rs().row]]", "", "Hex", "Hex", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("44", "[[rs().row]]", "", "Hex", "Base 64", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("45", "[[rs().row]]", "", "Base 64", "Binary", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("46", "[[rs().row]]", "", "Base 64", "Text", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("47", "[[rs().row]]", "", "Base 64", "Hex", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("48", "[[rs().row]]", "", "Base 64", "Base 64", "Invalid Recordset", null)]
        public virtual void ConvertAnEmptyRecordset(string no, string variable, string value, string from, string to, string error, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert an empty recordset *", exampleTags);
#line 691
this.ScenarioSetup(scenarioInfo);
#line 692
 testRunner.Given(string.Format("I have a convert variable \"{0}\" with a value of \"{1}\"", variable, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 693
 testRunner.And(string.Format("I convert a variable \"{0}\" from type \"{1}\" to type \"{2}\"", variable, from, to), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 694
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 695
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert a Variable that is null")]
        public virtual void ConvertAVariableThatIsNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert a Variable that is null", ((string[])(null)));
#line 748
this.ScenarioSetup(scenarioInfo);
#line 749
 testRunner.Given("I have a convert variable \"[[var]]\" with a value of \"NULL\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 750
 testRunner.And("I convert a variable \"[[var]]\" from type \"Text\" to type \"Binary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 751
 testRunner.When("the base conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 752
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 753
 testRunner.And("the execution has \"Scalar value {[[var]]} is NULL\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
