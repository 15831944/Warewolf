// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.Tools.Specs.Toolbox.Data.CreateJSON
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CreateJSON")]
    [NUnit.Framework.CategoryAttribute("Data")]
    public partial class CreateJSONFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CreateJSON.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CreateJSON", "\tIn order to create a json payload\r\n\tAs a warewolf user\r\n\tI want to be given the " +
                    "JSON representation of my variables", ProgrammingLanguage.CSharp, new string[] {
                        "Data"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Single Scalar Variable")]
        [NUnit.Framework.TestCaseAttribute("Character", "c", "{\"a\":\"c\"}", null)]
        [NUnit.Framework.TestCaseAttribute("Integer", "2", "{\"a\":2}", null)]
        [NUnit.Framework.TestCaseAttribute("Decimal", "5.6", "{\"a\":5.6}", null)]
        [NUnit.Framework.TestCaseAttribute("String", "Hello", "{\"a\":\"Hello\"}", null)]
        [NUnit.Framework.TestCaseAttribute("Boolean_True", "true", "{\"a\":true}", null)]
        [NUnit.Framework.TestCaseAttribute("Boolean_False", "false", "{\"a\":false}", null)]
        [NUnit.Framework.TestCaseAttribute("Null", "", "{\"a\":null}", null)]
        public virtual void SingleScalarVariable(string type, string value, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Single Scalar Variable", exampleTags);
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given(string.Format("I have a variable \"[[a]]\" with value \"{0}\"", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.And("I select variable \"[[a]]\" with name \"a\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And("a result variable \"[[json]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.When("the create json tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
 testRunner.Then(string.Format("the value of \"[[json]]\" should be \"{0}\"", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 14
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1284 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1284.AddRow(new string[] {
                        "1",
                        string.Format("[[a]] = {0}", value)});
#line 15
 testRunner.And("the debug inputs as", ((string)(null)), table1284, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1285 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1285.AddRow(new string[] {
                        string.Format("[[json]] = {0}", result)});
#line 18
 testRunner.And("the debug output as", ((string)(null)), table1285, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Single Scalar VariableMultipleSelections")]
        [NUnit.Framework.TestCaseAttribute("Character", "c", "{\"a\":\"c\",\"c\":\"x\"}", null)]
        [NUnit.Framework.TestCaseAttribute("Integer", "2", "{\"a\":2,\"c\":\"x\"}", null)]
        [NUnit.Framework.TestCaseAttribute("Decimal", "5.6", "{\"a\":5.6,\"c\":\"x\"}", null)]
        [NUnit.Framework.TestCaseAttribute("String", "Hello", "{\"a\":\"Hello\",\"c\":\"x\"}", null)]
        [NUnit.Framework.TestCaseAttribute("Boolean_True", "true", "{\"a\":true,\"c\":\"x\"}", null)]
        [NUnit.Framework.TestCaseAttribute("Boolean_False", "false", "{\"a\":false,\"c\":\"x\"}", null)]
        [NUnit.Framework.TestCaseAttribute("Null", "", "{\"a\":null,\"c\":\"x\"}", null)]
        public virtual void SingleScalarVariableMultipleSelections(string type, string value, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Single Scalar VariableMultipleSelections", exampleTags);
#line 32
this.ScenarioSetup(scenarioInfo);
#line 33
 testRunner.Given(string.Format("I have a variable \"[[a]]\" with value \"{0}\"", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 34
 testRunner.Given("I have a variable \"[[b]]\" with value \"x\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 35
 testRunner.And("I select variable \"[[a]]\" with name \"a\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
 testRunner.And("I select variable \"[[b]]\" with name \"c\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
 testRunner.And("a result variable \"[[json]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.When("the create json tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
 testRunner.Then(string.Format("the value of \"[[json]]\" should be \"{0}\"", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 40
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1286 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1286.AddRow(new string[] {
                        "1",
                        string.Format("[[a]] = {0}", value)});
            table1286.AddRow(new string[] {
                        "2",
                        "[[b]] = x"});
#line 41
 testRunner.And("the debug inputs as", ((string)(null)), table1286, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1287 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1287.AddRow(new string[] {
                        string.Format("[[json]] = {0}", result)});
#line 45
 testRunner.And("the debug output as", ((string)(null)), table1287, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Single Scalar Variable with changed name")]
        [NUnit.Framework.TestCaseAttribute("Character", "c", "{\"myVar\":\"c\"}", null)]
        [NUnit.Framework.TestCaseAttribute("Integer", "2", "{\"myVar\":2}", null)]
        [NUnit.Framework.TestCaseAttribute("Decimal", "5.6", "{\"myVar\":5.6}", null)]
        [NUnit.Framework.TestCaseAttribute("String", "Hello", "{\"myVar\":\"Hello\"}", null)]
        [NUnit.Framework.TestCaseAttribute("Boolean_True", "true", "{\"myVar\":true}", null)]
        [NUnit.Framework.TestCaseAttribute("Boolean_False", "false", "{\"myVar\":false}", null)]
        [NUnit.Framework.TestCaseAttribute("Null", "", "{\"myVar\":null}", null)]
        public virtual void SingleScalarVariableWithChangedName(string type, string value, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Single Scalar Variable with changed name", exampleTags);
#line 58
this.ScenarioSetup(scenarioInfo);
#line 59
 testRunner.Given(string.Format("I have a variable \"[[a]]\" with value \"{0}\"", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 60
 testRunner.And("I select variable \"[[a]]\" with name \"myVar\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
 testRunner.And("a result variable \"[[json]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
 testRunner.When("the create json tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 63
 testRunner.Then(string.Format("the value of \"[[json]]\" should be \"{0}\"", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 64
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1288 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1288.AddRow(new string[] {
                        "1",
                        string.Format("[[a]] = {0}", value)});
#line 65
 testRunner.And("the debug inputs as", ((string)(null)), table1288, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1289 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1289.AddRow(new string[] {
                        string.Format("[[json]] = {0}", result)});
#line 68
 testRunner.And("the debug output as", ((string)(null)), table1289, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Simple Recordset single field")]
        [NUnit.Framework.TestCaseAttribute("Character", "c", "{\"a\":[\"c\"]}", null)]
        [NUnit.Framework.TestCaseAttribute("Integer", "2", "{\"a\":[2]}", null)]
        [NUnit.Framework.TestCaseAttribute("Decimal", "5.6", "{\"a\":[5.6]}", null)]
        [NUnit.Framework.TestCaseAttribute("String", "Hello", "{\"a\":[\"Hello\"]}", null)]
        [NUnit.Framework.TestCaseAttribute("Boolean_True", "true", "{\"a\":[true]}", null)]
        [NUnit.Framework.TestCaseAttribute("Boolean_False", "false", "{\"a\":[false]}", null)]
        public virtual void SimpleRecordsetSingleField(string type, string value, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple Recordset single field", exampleTags);
#line 81
this.ScenarioSetup(scenarioInfo);
#line 82
 testRunner.Given(string.Format("I have a variable \"[[rec().a]]\" with value \"{0}\"", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 83
 testRunner.And("I select variable \"[[rec().a]]\" with name \"a\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
 testRunner.And("a result variable \"[[json]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
 testRunner.When("the create json tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 86
 testRunner.Then(string.Format("the value of \"[[json]]\" should be \"{0}\"", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 87
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1290 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1290.AddRow(new string[] {
                        "1",
                        string.Format("[[rec(1).a]] = {0}", value)});
#line 88
 testRunner.And("the debug inputs as", ((string)(null)), table1290, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1291 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1291.AddRow(new string[] {
                        string.Format("[[json]] = {0}", result)});
#line 91
 testRunner.And("the debug output as", ((string)(null)), table1291, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Simple Recordset single field Null")]
        [NUnit.Framework.TestCaseAttribute("Null", "", "{\"a\":[null]}", null)]
        public virtual void SimpleRecordsetSingleFieldNull(string type, string value, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple Recordset single field Null", exampleTags);
#line 103
this.ScenarioSetup(scenarioInfo);
#line 104
 testRunner.Given(string.Format("I have a variable \"[[rec().a]]\" with value \"{0}\"", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 105
 testRunner.And("I select variable \"[[rec().a]]\" with name \"a\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
 testRunner.And("a result variable \"[[json]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
 testRunner.When("the create json tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 108
 testRunner.Then(string.Format("the value of \"[[json]]\" should be \"{0}\"", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 109
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1292 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1292.AddRow(new string[] {
                        "1",
                        string.Format("[[rec().a]] = {0}", value)});
#line 110
 testRunner.And("the debug inputs as", ((string)(null)), table1292, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1293 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1293.AddRow(new string[] {
                        string.Format("[[json]] = {0}", result)});
#line 113
 testRunner.And("the debug output as", ((string)(null)), table1293, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiple Scalars Variable")]
        [NUnit.Framework.TestCaseAttribute("Character", "c", "3", "{\"a\":\"c\",\"b\":3}", null)]
        [NUnit.Framework.TestCaseAttribute("Integer", "2", "a", "{\"a\":2,\"b\":\"a\"}", null)]
        [NUnit.Framework.TestCaseAttribute("Decimal", "5.6", "World", "{\"a\":5.6,\"b\":\"World\"}", null)]
        [NUnit.Framework.TestCaseAttribute("String", "Hello", "10.1", "{\"a\":\"Hello\",\"b\":10.1}", null)]
        [NUnit.Framework.TestCaseAttribute("Boolean_True", "true", "", "{\"a\":true,\"b\":null}", null)]
        [NUnit.Framework.TestCaseAttribute("Boolean_False", "false", "true", "{\"a\":false,\"b\":true}", null)]
        [NUnit.Framework.TestCaseAttribute("Null", "", "false", "{\"a\":null,\"b\":false}", null)]
        public virtual void MultipleScalarsVariable(string type, string valueA, string valueB, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiple Scalars Variable", exampleTags);
#line 120
this.ScenarioSetup(scenarioInfo);
#line 121
 testRunner.Given(string.Format("I have a variable \"[[a]]\" with value \"{0}\"", valueA), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 122
 testRunner.And(string.Format("I have a variable \"[[b]]\" with value \"{0}\"", valueB), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
 testRunner.And("I select variable \"[[a]]\" with name \"a\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
 testRunner.And("I select variable \"[[b]]\" with name \"b\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 125
 testRunner.And("a result variable \"[[json]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
 testRunner.When("the create json tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 127
 testRunner.Then(string.Format("the value of \"[[json]]\" should be \"{0}\"", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 128
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1294 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1294.AddRow(new string[] {
                        "1",
                        string.Format("[[a]] = {0}", valueA)});
            table1294.AddRow(new string[] {
                        "2",
                        string.Format("[[b]] = {0}", valueB)});
#line 129
 testRunner.And("the debug inputs as", ((string)(null)), table1294, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1295 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1295.AddRow(new string[] {
                        string.Format("[[json]] = {0}", result)});
#line 133
 testRunner.And("the debug output as", ((string)(null)), table1295, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiple Recordset Variable")]
        [NUnit.Framework.TestCaseAttribute("Character", "c", "3", "{\"a\":[\"c\"],\"b\":[3]}", null)]
        [NUnit.Framework.TestCaseAttribute("Integer", "2", "a", "{\"a\":[2],\"b\":[\"a\"]}", null)]
        [NUnit.Framework.TestCaseAttribute("Decimal", "5.6", "World", "{\"a\":[5.6],\"b\":[\"World\"]}", null)]
        [NUnit.Framework.TestCaseAttribute("String", "Hello", "10.1", "{\"a\":[\"Hello\"],\"b\":[10.1]}", null)]
        [NUnit.Framework.TestCaseAttribute("Boolean_True", "true", "", "{\"a\":[true],\"b\":[null]}", null)]
        [NUnit.Framework.TestCaseAttribute("Boolean_False", "false", "true", "{\"a\":[false],\"b\":[true]}", null)]
        [NUnit.Framework.TestCaseAttribute("Null", "", "false", "{\"a\":[null],\"b\":[false]}", null)]
        public virtual void MultipleRecordsetVariable(string type, string valueA, string valueB, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiple Recordset Variable", exampleTags);
#line 146
this.ScenarioSetup(scenarioInfo);
#line 147
 testRunner.Given(string.Format("I have a variable \"[[rec(1).a]]\" with value \"{0}\"", valueA), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 148
 testRunner.And(string.Format("I have a variable \"[[rec(1).b]]\" with value \"{0}\"", valueB), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 149
 testRunner.And("I select variable \"[[rec().a]]\" with name \"a\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
 testRunner.And("I select variable \"[[rec().b]]\" with name \"b\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 151
 testRunner.And("a result variable \"[[json]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 152
 testRunner.When("the create json tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 153
 testRunner.Then(string.Format("the value of \"[[json]]\" should be \"{0}\"", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 154
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1296 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1296.AddRow(new string[] {
                        "1",
                        string.Format("[[rec(1).a]] = {0}", valueA)});
            table1296.AddRow(new string[] {
                        "2",
                        string.Format("[[rec(1).b]] = {0}", valueB)});
#line 155
 testRunner.And("the debug inputs as", ((string)(null)), table1296, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1297 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1297.AddRow(new string[] {
                        string.Format("[[json]] = {0}", result)});
#line 159
 testRunner.And("the debug output as", ((string)(null)), table1297, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiple Scalars Variable comma seperated")]
        [NUnit.Framework.TestCaseAttribute("Character", "c", "3", "{\"rec\":{\"a\":\"c\",\"b\":3}}", null)]
        [NUnit.Framework.TestCaseAttribute("Integer", "2", "a", "{\"rec\":{\"a\":2,\"b\":\"a\"}}", null)]
        [NUnit.Framework.TestCaseAttribute("Decimal", "5.6", "World", "{\"rec\":{\"a\":5.6,\"b\":\"World\"}}", null)]
        [NUnit.Framework.TestCaseAttribute("String", "Hello", "10.1", "{\"rec\":{\"a\":\"Hello\",\"b\":10.1}}", null)]
        [NUnit.Framework.TestCaseAttribute("Boolean_True", "true", "3", "{\"rec\":{\"a\":true,\"b\":3}}", null)]
        [NUnit.Framework.TestCaseAttribute("Boolean_False", "false", "true", "{\"rec\":{\"a\":false,\"b\":true}}", null)]
        public virtual void MultipleScalarsVariableCommaSeperated(string type, string valueA, string valueB, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiple Scalars Variable comma seperated", exampleTags);
#line 172
this.ScenarioSetup(scenarioInfo);
#line 173
 testRunner.Given(string.Format("I have a variable \"[[a]]\" with value \"{0}\"", valueA), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 174
 testRunner.And(string.Format("I have a variable \"[[b]]\" with value \"{0}\"", valueB), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 175
 testRunner.And("I select variable \"[[a]],[[b]]\" with name \"rec\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
 testRunner.And("a result variable \"[[json]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 177
 testRunner.When("the create json tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 178
 testRunner.Then(string.Format("the value of \"[[json]]\" should be \"{0}\"", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 179
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1298 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1298.AddRow(new string[] {
                        "1",
                        string.Format("[[a]],[[b]] = {0},{1}", valueA, valueB)});
#line 180
 testRunner.And("the debug inputs as", ((string)(null)), table1298, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1299 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1299.AddRow(new string[] {
                        string.Format("[[json]] = {0}", result)});
#line 183
 testRunner.And("the debug output as", ((string)(null)), table1299, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiple Scalars Variable comma seperated Null")]
        [NUnit.Framework.TestCaseAttribute("Null", "", "false", "{\"rec\":{\"a\":null,\"b\":false}}", null)]
        public virtual void MultipleScalarsVariableCommaSeperatedNull(string type, string valueA, string valueB, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiple Scalars Variable comma seperated Null", exampleTags);
#line 195
this.ScenarioSetup(scenarioInfo);
#line 196
 testRunner.Given(string.Format("I have a variable \"[[a]]\" with value \"{0}\"", valueA), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 197
 testRunner.And(string.Format("I have a variable \"[[b]]\" with value \"{0}\"", valueB), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 198
 testRunner.And("I select variable \"[[a]],[[b]]\" with name \"rec\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 199
 testRunner.And("a result variable \"[[json]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 200
 testRunner.When("the create json tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 201
 testRunner.Then(string.Format("the value of \"[[json]]\" should be \"{0}\"", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 202
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1300 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1300.AddRow(new string[] {
                        "1",
                        "[[a]],[[b]] ="});
#line 203
 testRunner.And("the debug inputs as", ((string)(null)), table1300, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1301 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1301.AddRow(new string[] {
                        string.Format("[[json]] = {0}", result)});
#line 206
 testRunner.And("the debug output as", ((string)(null)), table1301, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiple Recordset Variable comma seperatedNull")]
        [NUnit.Framework.TestCaseAttribute("Null", "", "false", "{\"rec\":[{\"a\":null,\"b\":false}]}", null)]
        public virtual void MultipleRecordsetVariableCommaSeperatedNull(string type, string valueA, string valueB, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiple Recordset Variable comma seperatedNull", exampleTags);
#line 213
this.ScenarioSetup(scenarioInfo);
#line 214
 testRunner.Given(string.Format("I have a variable \"[[rec(1).a]]\" with value \"{0}\"", valueA), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 215
 testRunner.And(string.Format("I have a variable \"[[rec(1).b]]\" with value \"{0}\"", valueB), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 216
 testRunner.And("I select variable \"[[rec().a]],[[rec().b]]\" with name \"rec\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 217
 testRunner.And("a result variable \"[[json]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 218
 testRunner.When("the create json tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 219
 testRunner.Then(string.Format("the value of \"[[json]]\" should be \"{0}\"", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 220
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1302 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1302.AddRow(new string[] {
                        "1",
                        "[[rec().a]],[[rec().b]] ="});
#line 221
 testRunner.And("the debug inputs as", ((string)(null)), table1302, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1303 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1303.AddRow(new string[] {
                        string.Format("[[json]] = {0}", result)});
#line 224
 testRunner.And("the debug output as", ((string)(null)), table1303, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiple Recordset Variable comma seperated")]
        [NUnit.Framework.TestCaseAttribute("Character", "c", "3", "{\"rec\":[{\"a\":\"c\",\"b\":3}]}", null)]
        [NUnit.Framework.TestCaseAttribute("Integer", "2", "a", "{\"rec\":[{\"a\":2,\"b\":\"a\"}]}", null)]
        [NUnit.Framework.TestCaseAttribute("Decimal", "5.6", "World", "{\"rec\":[{\"a\":5.6,\"b\":\"World\"}]}", null)]
        [NUnit.Framework.TestCaseAttribute("String", "Hello", "10.1", "{\"rec\":[{\"a\":\"Hello\",\"b\":10.1}]}", null)]
        [NUnit.Framework.TestCaseAttribute("Boolean_True", "true", "3", "{\"rec\":[{\"a\":true,\"b\":3}]}", null)]
        [NUnit.Framework.TestCaseAttribute("Boolean_False", "false", "true", "{\"rec\":[{\"a\":false,\"b\":true}]}", null)]
        public virtual void MultipleRecordsetVariableCommaSeperated(string type, string valueA, string valueB, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiple Recordset Variable comma seperated", exampleTags);
#line 231
this.ScenarioSetup(scenarioInfo);
#line 232
 testRunner.Given(string.Format("I have a variable \"[[rec(1).a]]\" with value \"{0}\"", valueA), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 233
 testRunner.And(string.Format("I have a variable \"[[rec(1).b]]\" with value \"{0}\"", valueB), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 234
 testRunner.And("I select variable \"[[rec().a]],[[rec().b]]\" with name \"rec\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 235
 testRunner.And("a result variable \"[[json]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 236
 testRunner.When("the create json tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 237
 testRunner.Then(string.Format("the value of \"[[json]]\" should be \"{0}\"", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 238
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1304 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1304.AddRow(new string[] {
                        "1",
                        string.Format("[[rec().a]],[[rec().b]] = {0},{1}", valueA, valueB)});
#line 239
 testRunner.And("the debug inputs as", ((string)(null)), table1304, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1305 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1305.AddRow(new string[] {
                        string.Format("[[json]] = {0}", result)});
#line 242
 testRunner.And("the debug output as", ((string)(null)), table1305, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Simple Recordset with * single field Null")]
        [NUnit.Framework.TestCaseAttribute("Null", "", "{\"rec\":[null]}", null)]
        public virtual void SimpleRecordsetWithSingleFieldNull(string type, string value, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple Recordset with * single field Null", exampleTags);
#line 254
this.ScenarioSetup(scenarioInfo);
#line 255
 testRunner.Given(string.Format("I have a variable \"[[rec(*).a]]\" with value \"{0}\"", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 256
 testRunner.And("I select variable \"[[rec(*).a]]\" with name \"rec\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 257
 testRunner.And("a result variable \"[[json]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 258
 testRunner.When("the create json tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 259
 testRunner.Then(string.Format("the value of \"[[json]]\" should be \"{0}\"", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 260
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1306 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1306.AddRow(new string[] {
                        "1",
                        "[[rec(*).a]] ="});
#line 261
 testRunner.And("the debug inputs as", ((string)(null)), table1306, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1307 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1307.AddRow(new string[] {
                        string.Format("[[json]] = {0}", result)});
#line 264
 testRunner.And("the debug output as", ((string)(null)), table1307, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Simple Recordset with * single field")]
        [NUnit.Framework.TestCaseAttribute("Character", "c", "{\"rec\":[\"c\"]}", null)]
        [NUnit.Framework.TestCaseAttribute("Integer", "2", "{\"rec\":[2]}", null)]
        [NUnit.Framework.TestCaseAttribute("Decimal", "5.6", "{\"rec\":[5.6]}", null)]
        [NUnit.Framework.TestCaseAttribute("String", "Hello", "{\"rec\":[\"Hello\"]}", null)]
        [NUnit.Framework.TestCaseAttribute("Boolean_True", "true", "{\"rec\":[true]}", null)]
        [NUnit.Framework.TestCaseAttribute("Boolean_False", "false", "{\"rec\":[false]}", null)]
        public virtual void SimpleRecordsetWithSingleField(string type, string value, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple Recordset with * single field", exampleTags);
#line 271
this.ScenarioSetup(scenarioInfo);
#line 272
 testRunner.Given(string.Format("I have a variable \"[[rec(*).a]]\" with value \"{0}\"", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 273
 testRunner.And("I select variable \"[[rec(*).a]]\" with name \"rec\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 274
 testRunner.And("a result variable \"[[json]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 275
 testRunner.When("the create json tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 276
 testRunner.Then(string.Format("the value of \"[[json]]\" should be \"{0}\"", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 277
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1308 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1308.AddRow(new string[] {
                        "1",
                        string.Format("[[rec(1).a]] = {0}", value)});
#line 278
 testRunner.And("the debug inputs as", ((string)(null)), table1308, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1309 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1309.AddRow(new string[] {
                        string.Format("[[json]] = {0}", result)});
#line 281
 testRunner.And("the debug output as", ((string)(null)), table1309, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Recordset with * multiple fields and values Null")]
        [NUnit.Framework.TestCaseAttribute("Null", "a", "", "", "", "false", "true", "{\"rec\":[{\"a\":\"a\",\"b\":null},{\"a\":null,\"b\":false},{\"a\":null,\"b\":true}]}", null)]
        public virtual void RecordsetWithMultipleFieldsAndValuesNull(string type, string valueA1, string valueA2, string valueA3, string valueB1, string valueB2, string valueB3, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Recordset with * multiple fields and values Null", exampleTags);
#line 294
this.ScenarioSetup(scenarioInfo);
#line 295
 testRunner.Given(string.Format("I have a variable \"[[rec(1).a]]\" with value \"{0}\"", valueA1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 296
 testRunner.Given(string.Format("I have a variable \"[[rec(2).a]]\" with value \"{0}\"", valueA2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 297
 testRunner.Given(string.Format("I have a variable \"[[rec(3).a]]\" with value \"{0}\"", valueA3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 298
 testRunner.Given(string.Format("I have a variable \"[[rec(1).b]]\" with value \"{0}\"", valueB1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 299
 testRunner.Given(string.Format("I have a variable \"[[rec(2).b]]\" with value \"{0}\"", valueB2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 300
 testRunner.Given(string.Format("I have a variable \"[[rec(3).b]]\" with value \"{0}\"", valueB3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 301
 testRunner.And("I select variable \"[[rec(*)]]\" with name \"rec\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 302
 testRunner.And("a result variable \"[[json]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 303
 testRunner.When("the create json tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 304
 testRunner.Then(string.Format("the value of \"[[json]]\" should be \"{0}\"", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 305
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1310 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1310.AddRow(new string[] {
                        "1",
                        string.Format("[[rec(1).a]] = {0}", valueA1)});
            table1310.AddRow(new string[] {
                        "",
                        string.Format("[[rec(2).b]] = {0}", valueB2)});
            table1310.AddRow(new string[] {
                        "",
                        string.Format("[[rec(3).b]] = {0}", valueB3)});
#line 306
 testRunner.And("the debug inputs as", ((string)(null)), table1310, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1311 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1311.AddRow(new string[] {
                        string.Format("[[json]] = {0}", result)});
#line 311
 testRunner.And("the debug output as", ((string)(null)), table1311, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Recordset with * multiple fields and values")]
        [NUnit.Framework.TestCaseAttribute("Character", "c", "b", "g", "1", "2", "3", "{\"rec\":[{\"a\":\"c\",\"b\":1},{\"a\":\"b\",\"b\":2},{\"a\":\"g\",\"b\":3}]}", null)]
        [NUnit.Framework.TestCaseAttribute("Integer", "2", "56", "100", "g", "h", "i", "{\"rec\":[{\"a\":2,\"b\":\"g\"},{\"a\":56,\"b\":\"h\"},{\"a\":100,\"b\":\"i\"}]}", null)]
        [NUnit.Framework.TestCaseAttribute("Decimal", "5.6", "7.1", "100.34", "Hello", "World", "bob", "{\"rec\":[{\"a\":5.6,\"b\":\"Hello\"},{\"a\":7.1,\"b\":\"World\"},{\"a\":100.34,\"b\":\"bob\"}]}", null)]
        [NUnit.Framework.TestCaseAttribute("String", "Hello", "name", "dora", "34", "st", "56", "{\"rec\":[{\"a\":\"Hello\",\"b\":34},{\"a\":\"name\",\"b\":\"st\"},{\"a\":\"dora\",\"b\":56}]}", null)]
        [NUnit.Framework.TestCaseAttribute("Boolean_True", "true", "false", "a", "78.1", "145.25", "90.2", "{\"rec\":[{\"a\":true,\"b\":78.1},{\"a\":false,\"b\":145.25},{\"a\":\"a\",\"b\":90.2}]}", null)]
        [NUnit.Framework.TestCaseAttribute("Boolean_False", "false", "bob", "9", "1", "8", "7", "{\"rec\":[{\"a\":false,\"b\":1},{\"a\":\"bob\",\"b\":8},{\"a\":9,\"b\":7}]}", null)]
        public virtual void RecordsetWithMultipleFieldsAndValues(string type, string valueA1, string valueA2, string valueA3, string valueB1, string valueB2, string valueB3, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Recordset with * multiple fields and values", exampleTags);
#line 318
this.ScenarioSetup(scenarioInfo);
#line 319
 testRunner.Given(string.Format("I have a variable \"[[rec(1).a]]\" with value \"{0}\"", valueA1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 320
 testRunner.Given(string.Format("I have a variable \"[[rec(2).a]]\" with value \"{0}\"", valueA2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 321
 testRunner.Given(string.Format("I have a variable \"[[rec(3).a]]\" with value \"{0}\"", valueA3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 322
 testRunner.Given(string.Format("I have a variable \"[[rec(1).b]]\" with value \"{0}\"", valueB1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 323
 testRunner.Given(string.Format("I have a variable \"[[rec(2).b]]\" with value \"{0}\"", valueB2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 324
 testRunner.Given(string.Format("I have a variable \"[[rec(3).b]]\" with value \"{0}\"", valueB3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 325
 testRunner.And("I select variable \"[[rec(*)]]\" with name \"rec\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 326
 testRunner.And("a result variable \"[[json]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 327
 testRunner.When("the create json tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 328
 testRunner.Then(string.Format("the value of \"[[json]]\" should be \"{0}\"", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 329
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1312 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1312.AddRow(new string[] {
                        "1",
                        string.Format("[[rec(1).a]] = {0}", valueA1)});
            table1312.AddRow(new string[] {
                        "",
                        string.Format("[[rec(2).a]] = {0}", valueA2)});
            table1312.AddRow(new string[] {
                        "",
                        string.Format("[[rec(3).a]] = {0}", valueA3)});
            table1312.AddRow(new string[] {
                        "",
                        string.Format("[[rec(1).b]] = {0}", valueB1)});
            table1312.AddRow(new string[] {
                        "",
                        string.Format("[[rec(2).b]] = {0}", valueB2)});
            table1312.AddRow(new string[] {
                        "",
                        string.Format("[[rec(3).b]] = {0}", valueB3)});
#line 330
 testRunner.And("the debug inputs as", ((string)(null)), table1312, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1313 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1313.AddRow(new string[] {
                        string.Format("[[json]] = {0}", result)});
#line 338
 testRunner.And("the debug output as", ((string)(null)), table1313, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Recordset with * multiple fields and values different length for columns")]
        public virtual void RecordsetWithMultipleFieldsAndValuesDifferentLengthForColumns()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Recordset with * multiple fields and values different length for columns", ((string[])(null)));
#line 351
this.ScenarioSetup(scenarioInfo);
#line 352
 testRunner.Given("I have a variable \"[[rec(1).a]]\" with value \"c\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 353
 testRunner.Given("I have a variable \"[[rec(2).a]]\" with value \"b\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 354
 testRunner.Given("I have a variable \"[[rec(3).a]]\" with value \"g\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 355
 testRunner.Given("I have a variable \"[[rec(1).b]]\" with value \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 356
 testRunner.Given("I have a variable \"[[rec(2).b]]\" with value \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 357
 testRunner.And("I select variable \"[[rec(*)]]\" with name \"rec\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 358
 testRunner.And("a result variable \"[[json]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 359
 testRunner.When("the create json tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 360
 testRunner.Then("the value of \"[[json]]\" should be \"{\"rec\":[{\"a\":\"c\",\"b\":1},{\"a\":\"b\",\"b\":2},{\"a\":\"" +
                    "g\",\"b\":null}]}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 361
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1314 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1314.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = c"});
            table1314.AddRow(new string[] {
                        "",
                        "[[rec(2).a]] = b"});
            table1314.AddRow(new string[] {
                        "",
                        "[[rec(3).a]] = g"});
            table1314.AddRow(new string[] {
                        "",
                        "[[rec(1).b]] = 1"});
            table1314.AddRow(new string[] {
                        "",
                        "[[rec(2).b]] = 2"});
#line 362
 testRunner.And("the debug inputs as", ((string)(null)), table1314, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1315 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1315.AddRow(new string[] {
                        "[[json]] = {\"rec\":[{\"a\":\"c\",\"b\":1},{\"a\":\"b\",\"b\":2},{\"a\":\"g\",\"b\":null}]}"});
#line 369
 testRunner.And("the debug output as", ((string)(null)), table1315, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Recordset with * multiple fields and  scalar values different length for columnMu" +
            "ltiple Columns")]
        public virtual void RecordsetWithMultipleFieldsAndScalarValuesDifferentLengthForColumnMultipleColumns()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Recordset with * multiple fields and  scalar values different length for columnMu" +
                    "ltiple Columns", ((string[])(null)));
#line 375
this.ScenarioSetup(scenarioInfo);
#line 376
 testRunner.Given("I have a variable \"[[rec(1).a]]\" with value \"c\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 377
 testRunner.Given("I have a variable \"[[rec(2).a]]\" with value \"b\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 378
 testRunner.Given("I have a variable \"[[rec(3).a]]\" with value \"g\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 379
 testRunner.Given("I have a variable \"[[rec(1).b]]\" with value \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 380
 testRunner.Given("I have a variable \"[[rec(2).b]]\" with value \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 381
 testRunner.Given("I have a variable \"[[a]]\" with value \"the builder\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 382
 testRunner.And("I select variable \"[[rec(*).a]]\" with name \"rec\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 383
 testRunner.And("I select variable \"[[a]]\" with name \"bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 384
 testRunner.And("a result variable \"[[json]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 385
 testRunner.When("the create json tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 386
 testRunner.Then("the value of \"[[json]]\" should be \"{\"rec\":[\"c\",\"b\",\"g\"],\"bob\":\"the builder\"}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 387
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1316 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1316.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = c"});
            table1316.AddRow(new string[] {
                        "",
                        "[[rec(2).a]] = b"});
            table1316.AddRow(new string[] {
                        "",
                        "[[rec(3).a]] = g"});
            table1316.AddRow(new string[] {
                        "2",
                        "[[a]] = the builder"});
#line 388
 testRunner.And("the debug inputs as", ((string)(null)), table1316, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1317 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1317.AddRow(new string[] {
                        "[[json]] = { rec :[ c , b , g ], bob : the builder }"});
#line 394
 testRunner.And("the debug output as", ((string)(null)), table1317, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
