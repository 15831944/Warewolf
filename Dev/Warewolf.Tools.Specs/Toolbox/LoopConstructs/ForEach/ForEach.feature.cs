// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.Tools.Specs.Toolbox.LoopConstructs.ForEach
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ForEach")]
    [NUnit.Framework.CategoryAttribute("LoopConstructs")]
    public partial class ForEachFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ForEach.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ForEach", "\tIn order to loop through constructs\r\n\tAs a Warewolf user\r\n\tI want to a tool that" +
                    " will allow me to execute other tools in an loop", ProgrammingLanguage.CSharp, new string[] {
                        "LoopConstructs"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over a tool using a recordset with 3 rows")]
        public virtual void ExecuteAForeachOverAToolUsingARecordsetWith3Rows()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over a tool using a recordset with 3 rows", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1589 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1589.AddRow(new string[] {
                        "[[rs().field]]",
                        "1"});
            table1589.AddRow(new string[] {
                        "[[rs().field]]",
                        "2"});
            table1589.AddRow(new string[] {
                        "[[rs().field]]",
                        "3"});
#line 8
 testRunner.Given("There is a recordset in the datalist with this shape", ((string)(null)), table1589, "Given ");
#line 13
 testRunner.And("I have selected the foreach type as \"InRecordset\" and used \"[[rs()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("the underlying dropped activity is a(n) \"Tool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("the foreach executes 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 17
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1590 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Recordset"});
            table1590.AddRow(new string[] {
                        "* in Recordset",
                        "[[rs(1)]] ="});
            table1590.AddRow(new string[] {
                        "",
                        "[[rs(2)]] ="});
            table1590.AddRow(new string[] {
                        "",
                        "[[rs(3)]] ="});
#line 18
 testRunner.And("the debug inputs as", ((string)(null)), table1590, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over a tool using a recordset with 4 rows")]
        public virtual void ExecuteAForeachOverAToolUsingARecordsetWith4Rows()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over a tool using a recordset with 4 rows", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1591 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1591.AddRow(new string[] {
                        "[[rs().field]]",
                        "1"});
            table1591.AddRow(new string[] {
                        "[[rs().field]]",
                        "2"});
            table1591.AddRow(new string[] {
                        "[[rs().field]]",
                        "3"});
            table1591.AddRow(new string[] {
                        "[[rs().field]]",
                        "6"});
#line 25
 testRunner.Given("There is a recordset in the datalist with this shape", ((string)(null)), table1591, "Given ");
#line 31
 testRunner.And("I have selected the foreach type as \"InRecordset\" and used \"[[rs()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.And("the underlying dropped activity is a(n) \"Tool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
 testRunner.Then("the foreach executes 4 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 35
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1592 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Recordset"});
            table1592.AddRow(new string[] {
                        "* in Recordset",
                        "[[rs(1)]] ="});
            table1592.AddRow(new string[] {
                        "",
                        "[[rs(2)]] ="});
            table1592.AddRow(new string[] {
                        "",
                        "[[rs(3)]] ="});
            table1592.AddRow(new string[] {
                        "",
                        "[[rs(4)]] ="});
#line 36
 testRunner.And("the debug inputs as", ((string)(null)), table1592, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over a tool using a recordset with invalid")]
        [NUnit.Framework.TestCaseAttribute("InRecordset", "[[rs()]]+1", "Failure", null)]
        [NUnit.Framework.TestCaseAttribute("InRecordset", "[[rs().a]]", "Failure", null)]
        [NUnit.Framework.TestCaseAttribute("InRecordset", "[[rs()]]#$%3", "Failure", null)]
        public virtual void ExecuteAForeachOverAToolUsingARecordsetWithInvalid(string type, string input, string error, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over a tool using a recordset with invalid", exampleTags);
#line 43
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1593 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1593.AddRow(new string[] {
                        "[[rs().field]]",
                        "1"});
            table1593.AddRow(new string[] {
                        "[[rs().field]]",
                        "2"});
            table1593.AddRow(new string[] {
                        "[[rs().field]]",
                        "3"});
            table1593.AddRow(new string[] {
                        "[[rs().field]]",
                        "6"});
#line 44
 testRunner.Given("There is a recordset in the datalist with this shape", ((string)(null)), table1593, "Given ");
#line 50
 testRunner.And(string.Format("I have selected the foreach type as \"{0}\" and used \"{1}\"", type, input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
 testRunner.And("the underlying dropped activity is a(n) \"Tool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
 testRunner.Then("the foreach executes 0 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 54
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over a tool for range 0 to 0")]
        public virtual void ExecuteAForeachOverAToolForRange0To0()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over a tool for range 0 to 0", ((string[])(null)));
#line 62
this.ScenarioSetup(scenarioInfo);
#line 63
 testRunner.And("I have selected the foreach type as \"InRange\" from 0 to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
 testRunner.And("the underlying dropped activity is a(n) \"Tool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
 testRunner.Then("the foreach executes 0 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 67
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over a tool for range 1 to 5")]
        public virtual void ExecuteAForeachOverAToolForRange1To5()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over a tool for range 1 to 5", ((string[])(null)));
#line 69
this.ScenarioSetup(scenarioInfo);
#line 70
 testRunner.And("I have selected the foreach type as \"InRange\" from 1 to 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
 testRunner.And("the underlying dropped activity is a(n) \"Tool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 73
 testRunner.Then("the foreach executes 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 74
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1594 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "From",
                        "To"});
            table1594.AddRow(new string[] {
                        "* in Range",
                        "1",
                        "5"});
#line 75
 testRunner.And("the debug inputs as", ((string)(null)), table1594, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over a tool for range 9 to 10")]
        public virtual void ExecuteAForeachOverAToolForRange9To10()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over a tool for range 9 to 10", ((string[])(null)));
#line 79
this.ScenarioSetup(scenarioInfo);
#line 80
 testRunner.And("I have selected the foreach type as \"InRange\" from 9 to 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
 testRunner.And("the underlying dropped activity is a(n) \"Tool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 83
 testRunner.Then("the foreach executes 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 84
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1595 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "From",
                        "To"});
            table1595.AddRow(new string[] {
                        "* in Range",
                        "9",
                        "10"});
#line 85
 testRunner.And("the debug inputs as", ((string)(null)), table1595, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over a tool with Csv Indexes 1,2,3")]
        public virtual void ExecuteAForeachOverAToolWithCsvIndexes123()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over a tool with Csv Indexes 1,2,3", ((string[])(null)));
#line 89
this.ScenarioSetup(scenarioInfo);
#line 90
 testRunner.And("I have selected the foreach type as \"InCSV\" as \"1,2,3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 91
 testRunner.And("the underlying dropped activity is a(n) \"Tool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 93
 testRunner.Then("the foreach executes 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 94
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1596 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Csv Indexes"});
            table1596.AddRow(new string[] {
                        "* in CSV",
                        "1,2,3"});
#line 95
 testRunner.And("the debug inputs as", ((string)(null)), table1596, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over a tool with Csv Indexes 2,4,6")]
        public virtual void ExecuteAForeachOverAToolWithCsvIndexes246()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over a tool with Csv Indexes 2,4,6", ((string[])(null)));
#line 99
this.ScenarioSetup(scenarioInfo);
#line 100
 testRunner.And("I have selected the foreach type as \"InCSV\" as \"2,4,6\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
 testRunner.And("the underlying dropped activity is a(n) \"Tool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 103
 testRunner.Then("the foreach executes 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 104
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1597 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Csv Indexes"});
            table1597.AddRow(new string[] {
                        "* in CSV",
                        "2,4,6"});
#line 105
 testRunner.And("the debug inputs as", ((string)(null)), table1597, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over a tool with csv index 2")]
        public virtual void ExecuteAForeachOverAToolWithCsvIndex2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over a tool with csv index 2", ((string[])(null)));
#line 109
this.ScenarioSetup(scenarioInfo);
#line 110
 testRunner.And("I have selected the foreach type as \"InCSV\" as \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 111
 testRunner.And("the underlying dropped activity is a(n) \"Tool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 112
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 113
 testRunner.Then("the foreach executes 1 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 114
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1598 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Csv Indexes"});
            table1598.AddRow(new string[] {
                        "* in CSV",
                        "2"});
#line 115
    testRunner.And("the debug inputs as", ((string)(null)), table1598, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over a tool with number of executions equals 0")]
        public virtual void ExecuteAForeachOverAToolWithNumberOfExecutionsEquals0()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over a tool with number of executions equals 0", ((string[])(null)));
#line 119
this.ScenarioSetup(scenarioInfo);
#line 120
 testRunner.And("I have selected the foreach type as \"NumOfExecution\" as \"0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 121
 testRunner.And("the underlying dropped activity is a(n) \"Tool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 123
 testRunner.Then("the foreach executes 0 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 124
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1599 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table1599.AddRow(new string[] {
                        "No. of Executes",
                        "0"});
#line 125
 testRunner.And("the debug inputs as", ((string)(null)), table1599, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over a tool with number of executions equals 1")]
        public virtual void ExecuteAForeachOverAToolWithNumberOfExecutionsEquals1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over a tool with number of executions equals 1", ((string[])(null)));
#line 129
this.ScenarioSetup(scenarioInfo);
#line 130
 testRunner.And("I have selected the foreach type as \"NumOfExecution\" as \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 131
 testRunner.And("the underlying dropped activity is a(n) \"Tool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 132
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 133
 testRunner.Then("the foreach executes 1 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 134
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1600 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table1600.AddRow(new string[] {
                        "No. of Executes",
                        "1"});
#line 135
 testRunner.And("the debug inputs as", ((string)(null)), table1600, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over a tool with number of executions equals 8")]
        public virtual void ExecuteAForeachOverAToolWithNumberOfExecutionsEquals8()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over a tool with number of executions equals 8", ((string[])(null)));
#line 139
this.ScenarioSetup(scenarioInfo);
#line 140
 testRunner.And("I have selected the foreach type as \"NumOfExecution\" as \"8\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 141
 testRunner.And("the underlying dropped activity is a(n) \"Tool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 143
 testRunner.Then("the foreach executes 8 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 144
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1601 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table1601.AddRow(new string[] {
                        "No. of Executes",
                        "8"});
#line 145
 testRunner.And("the debug inputs as", ((string)(null)), table1601, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over an activity using a recordset with 3 rows")]
        public virtual void ExecuteAForeachOverAnActivityUsingARecordsetWith3Rows()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over an activity using a recordset with 3 rows", ((string[])(null)));
#line 149
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1602 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1602.AddRow(new string[] {
                        "[[rs().field]]",
                        "1"});
            table1602.AddRow(new string[] {
                        "[[rs().field]]",
                        "2"});
            table1602.AddRow(new string[] {
                        "[[rs().field]]",
                        "3"});
#line 150
 testRunner.Given("There is a recordset in the datalist with this shape", ((string)(null)), table1602, "Given ");
#line 155
 testRunner.And("I have selected the foreach type as \"InRecordset\" and used \"[[rs()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 156
 testRunner.And("the underlying dropped activity is a(n) \"Activity\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 157
 testRunner.And("I Map the input recordset \"[[rs(*).field]]\" to \"[[test(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 158
 testRunner.And("I Map the output recordset \"[[test(*).data]]\" to \"[[res(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 159
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1603 = new TechTalk.SpecFlow.Table(new string[] {
                        "index"});
            table1603.AddRow(new string[] {
                        "1"});
            table1603.AddRow(new string[] {
                        "2"});
            table1603.AddRow(new string[] {
                        "3"});
#line 160
 testRunner.Then("The mapping uses the following indexes", ((string)(null)), table1603, "Then ");
#line 165
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1604 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Recordset"});
            table1604.AddRow(new string[] {
                        "* in Recordset",
                        "[[rs(1)]] ="});
            table1604.AddRow(new string[] {
                        "",
                        "[[rs(2)]] ="});
            table1604.AddRow(new string[] {
                        "",
                        "[[rs(3)]] ="});
#line 166
 testRunner.And("the debug inputs as", ((string)(null)), table1604, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over an activity using a recordset with 4 rows")]
        public virtual void ExecuteAForeachOverAnActivityUsingARecordsetWith4Rows()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over an activity using a recordset with 4 rows", ((string[])(null)));
#line 172
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1605 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1605.AddRow(new string[] {
                        "[[rs().field]]",
                        "1"});
            table1605.AddRow(new string[] {
                        "[[rs().field]]",
                        "2"});
            table1605.AddRow(new string[] {
                        "[[rs().field]]",
                        "3"});
            table1605.AddRow(new string[] {
                        "[[rs().field]]",
                        "6"});
#line 173
 testRunner.Given("There is a recordset in the datalist with this shape", ((string)(null)), table1605, "Given ");
#line 179
 testRunner.And("I have selected the foreach type as \"InRecordset\" and used \"[[rs()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 180
 testRunner.And("the underlying dropped activity is a(n) \"Activity\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 181
 testRunner.And("I Map the input recordset \"[[rs(*).field]]\" to \"[[test(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 182
 testRunner.And("I Map the output recordset \"[[test(*).data]]\" to \"[[res(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 183
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1606 = new TechTalk.SpecFlow.Table(new string[] {
                        "index"});
            table1606.AddRow(new string[] {
                        "1"});
            table1606.AddRow(new string[] {
                        "2"});
            table1606.AddRow(new string[] {
                        "3"});
            table1606.AddRow(new string[] {
                        "4"});
#line 184
 testRunner.Then("The mapping uses the following indexes", ((string)(null)), table1606, "Then ");
#line 190
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1607 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Recordset"});
            table1607.AddRow(new string[] {
                        "* in Recordset",
                        "[[rs(1)]] ="});
            table1607.AddRow(new string[] {
                        "",
                        "[[rs(2)]] ="});
            table1607.AddRow(new string[] {
                        "",
                        "[[rs(3)]] ="});
            table1607.AddRow(new string[] {
                        "",
                        "[[rs(4)]] ="});
#line 191
 testRunner.And("the debug inputs as", ((string)(null)), table1607, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over an activity for range 0 to 0")]
        public virtual void ExecuteAForeachOverAnActivityForRange0To0()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over an activity for range 0 to 0", ((string[])(null)));
#line 198
this.ScenarioSetup(scenarioInfo);
#line 199
 testRunner.And("I have selected the foreach type as \"InRange\" from 0 to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 200
 testRunner.And("the underlying dropped activity is a(n) \"Activity\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 201
 testRunner.And("I Map the input recordset \"[[rs(*).field]]\" to \"[[test(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 202
 testRunner.And("I Map the output recordset \"[[test(*).data]]\" to \"[[res(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 203
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 204
 testRunner.Then("the foreach executes 0 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 205
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1608 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "From",
                        "To"});
            table1608.AddRow(new string[] {
                        "* in Range",
                        "0",
                        "0"});
#line 206
 testRunner.And("the debug inputs as", ((string)(null)), table1608, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over an activity for range 1 to 5")]
        public virtual void ExecuteAForeachOverAnActivityForRange1To5()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over an activity for range 1 to 5", ((string[])(null)));
#line 210
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1609 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1609.AddRow(new string[] {
                        "[[rs().field]]",
                        "1"});
            table1609.AddRow(new string[] {
                        "[[rs().field]]",
                        "1"});
            table1609.AddRow(new string[] {
                        "[[rs().field]]",
                        "1"});
            table1609.AddRow(new string[] {
                        "[[rs().field]]",
                        "1"});
            table1609.AddRow(new string[] {
                        "[[rs().field]]",
                        "1"});
#line 211
 testRunner.Given("There is a recordset in the datalist with this shape", ((string)(null)), table1609, "Given ");
#line 218
 testRunner.And("I have selected the foreach type as \"InRange\" from 1 to 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 219
 testRunner.And("the underlying dropped activity is a(n) \"Activity\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 220
 testRunner.And("I Map the input recordset \"[[rs(*).field]]\" to \"[[test(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 221
 testRunner.And("I Map the output recordset \"[[test(*).data]]\" to \"[[res(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 222
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1610 = new TechTalk.SpecFlow.Table(new string[] {
                        "index"});
            table1610.AddRow(new string[] {
                        "1"});
            table1610.AddRow(new string[] {
                        "2"});
            table1610.AddRow(new string[] {
                        "3"});
            table1610.AddRow(new string[] {
                        "4"});
            table1610.AddRow(new string[] {
                        "5"});
#line 223
 testRunner.Then("The mapping uses the following indexes", ((string)(null)), table1610, "Then ");
#line 230
 testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1611 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "From",
                        "To"});
            table1611.AddRow(new string[] {
                        "* in Range",
                        "1",
                        "5"});
#line 231
 testRunner.And("the debug inputs as", ((string)(null)), table1611, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over an activity for range 9 to 10")]
        public virtual void ExecuteAForeachOverAnActivityForRange9To10()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over an activity for range 9 to 10", ((string[])(null)));
#line 235
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1612 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1612.AddRow(new string[] {
                        "[[rs(9).field]]",
                        "1"});
            table1612.AddRow(new string[] {
                        "[[rs(10).field]]",
                        "3"});
#line 236
 testRunner.Given("There is a recordset in the datalist with this shape", ((string)(null)), table1612, "Given ");
#line 240
 testRunner.And("I have selected the foreach type as \"InRange\" from 9 to 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 241
 testRunner.And("the underlying dropped activity is a(n) \"Activity\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 242
 testRunner.And("I Map the input recordset \"[[rs(*).field]]\" to \"[[test(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 243
 testRunner.And("I Map the output recordset \"[[test(*).data]]\" to \"[[res(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 244
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1613 = new TechTalk.SpecFlow.Table(new string[] {
                        "index"});
            table1613.AddRow(new string[] {
                        "9"});
            table1613.AddRow(new string[] {
                        "10"});
#line 245
 testRunner.Then("The mapping uses the following indexes", ((string)(null)), table1613, "Then ");
#line 249
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1614 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "From",
                        "To"});
            table1614.AddRow(new string[] {
                        "* in Range",
                        "9",
                        "10"});
#line 250
 testRunner.And("the debug inputs as", ((string)(null)), table1614, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over an activity for range 2 to 0")]
        public virtual void ExecuteAForeachOverAnActivityForRange2To0()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over an activity for range 2 to 0", ((string[])(null)));
#line 254
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1615 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1615.AddRow(new string[] {
                        "[[rs(2).field]]",
                        "1"});
            table1615.AddRow(new string[] {
                        "[[rs(1).field]]",
                        "3"});
#line 255
 testRunner.Given("There is a recordset in the datalist with this shape", ((string)(null)), table1615, "Given ");
#line 259
 testRunner.And("I have selected the foreach type as \"InRange\" from 2 to 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 260
 testRunner.And("the underlying dropped activity is a(n) \"Activity\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 261
 testRunner.And("I Map the input recordset \"[[rs(*).field]]\" to \"[[test(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 262
 testRunner.And("I Map the output recordset \"[[test(*).data]]\" to \"[[res(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 263
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1616 = new TechTalk.SpecFlow.Table(new string[] {
                        "index"});
            table1616.AddRow(new string[] {
                        "2"});
            table1616.AddRow(new string[] {
                        "1"});
#line 264
 testRunner.Then("The mapping uses the following indexes", ((string)(null)), table1616, "Then ");
#line 268
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1617 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "From",
                        "To"});
            table1617.AddRow(new string[] {
                        "* in Range",
                        "2",
                        "1"});
#line 269
 testRunner.And("the debug inputs as", ((string)(null)), table1617, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over an activity for invalid range 0")]
        public virtual void ExecuteAForeachOverAnActivityForInvalidRange0()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over an activity for invalid range 0", ((string[])(null)));
#line 273
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1618 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1618.AddRow(new string[] {
                        "[[rs(9).field]]",
                        "1"});
            table1618.AddRow(new string[] {
                        "[[rs(10).field]]",
                        "3"});
#line 274
 testRunner.Given("There is a recordset in the datalist with this shape", ((string)(null)), table1618, "Given ");
#line 278
 testRunner.And("I have selected the foreach type as \"InRange\" from 1 to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 279
 testRunner.And("the underlying dropped activity is a(n) \"Activity\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 280
 testRunner.And("I Map the input recordset \"[[rs(*).field]]\" to \"[[test(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 281
 testRunner.And("I Map the output recordset \"[[test(*).data]]\" to \"[[res(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 282
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 283
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over an activity for invalid range negative")]
        public virtual void ExecuteAForeachOverAnActivityForInvalidRangeNegative()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over an activity for invalid range negative", ((string[])(null)));
#line 285
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1619 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1619.AddRow(new string[] {
                        "[[rs(9).field]]",
                        "1"});
            table1619.AddRow(new string[] {
                        "[[rs(10).field]]",
                        "3"});
#line 286
 testRunner.Given("There is a recordset in the datalist with this shape", ((string)(null)), table1619, "Given ");
#line 290
 testRunner.And("I have selected the foreach type as \"InRange\" from -1 to -10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 291
 testRunner.And("the underlying dropped activity is a(n) \"Activity\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 292
 testRunner.And("I Map the input recordset \"[[rs(*).field]]\" to \"[[test(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 293
 testRunner.And("I Map the output recordset \"[[test(*).data]]\" to \"[[res(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 294
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 295
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over an activity with Csv Indexes 1,2,3")]
        public virtual void ExecuteAForeachOverAnActivityWithCsvIndexes123()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over an activity with Csv Indexes 1,2,3", ((string[])(null)));
#line 297
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1620 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1620.AddRow(new string[] {
                        "[[rs().field]]",
                        "1"});
            table1620.AddRow(new string[] {
                        "[[rs().field]]",
                        "1"});
            table1620.AddRow(new string[] {
                        "[[rs().field]]",
                        "1"});
#line 298
 testRunner.Given("There is a recordset in the datalist with this shape", ((string)(null)), table1620, "Given ");
#line 303
 testRunner.And("I have selected the foreach type as \"InCSV\" as \"1,2,3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 304
 testRunner.And("the underlying dropped activity is a(n) \"Activity\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 305
 testRunner.And("I Map the input recordset \"[[rs(*).field]]\" to \"[[test(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 306
 testRunner.And("I Map the output recordset \"[[test(*).data]]\" to \"[[res(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 307
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1621 = new TechTalk.SpecFlow.Table(new string[] {
                        "index"});
            table1621.AddRow(new string[] {
                        "1"});
            table1621.AddRow(new string[] {
                        "2"});
            table1621.AddRow(new string[] {
                        "3"});
#line 308
 testRunner.Then("The mapping uses the following indexes", ((string)(null)), table1621, "Then ");
#line 313
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1622 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Csv Indexes"});
            table1622.AddRow(new string[] {
                        "* in CSV",
                        "1,2,3"});
#line 314
 testRunner.And("the debug inputs as", ((string)(null)), table1622, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over an activity with Csv Indexes 2,4,6")]
        public virtual void ExecuteAForeachOverAnActivityWithCsvIndexes246()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over an activity with Csv Indexes 2,4,6", ((string[])(null)));
#line 318
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1623 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1623.AddRow(new string[] {
                        "[[rs().field]]",
                        "1"});
            table1623.AddRow(new string[] {
                        "[[rs().field]]",
                        "1"});
            table1623.AddRow(new string[] {
                        "[[rs().field]]",
                        "1"});
            table1623.AddRow(new string[] {
                        "[[rs().field]]",
                        "1"});
            table1623.AddRow(new string[] {
                        "[[rs().field]]",
                        "1"});
            table1623.AddRow(new string[] {
                        "[[rs().field]]",
                        "1"});
#line 319
 testRunner.Given("There is a recordset in the datalist with this shape", ((string)(null)), table1623, "Given ");
#line 327
 testRunner.And("I have selected the foreach type as \"InCSV\" as \"2,4,6\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 328
 testRunner.And("the underlying dropped activity is a(n) \"Activity\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 329
 testRunner.And("I Map the input recordset \"[[rs(*).field]]\" to \"[[test(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 330
 testRunner.And("I Map the output recordset \"[[test(*).data]]\" to \"[[res(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 331
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1624 = new TechTalk.SpecFlow.Table(new string[] {
                        "index"});
            table1624.AddRow(new string[] {
                        "2"});
            table1624.AddRow(new string[] {
                        "4"});
            table1624.AddRow(new string[] {
                        "6"});
#line 332
 testRunner.Then("The mapping uses the following indexes", ((string)(null)), table1624, "Then ");
#line 337
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1625 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Csv Indexes"});
            table1625.AddRow(new string[] {
                        "* in CSV",
                        "2,4,6"});
#line 338
 testRunner.And("the debug inputs as", ((string)(null)), table1625, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over an activity with csv index 2")]
        public virtual void ExecuteAForeachOverAnActivityWithCsvIndex2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over an activity with csv index 2", ((string[])(null)));
#line 342
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1626 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1626.AddRow(new string[] {
                        "[[rs().field]]",
                        "1"});
            table1626.AddRow(new string[] {
                        "[[rs().field]]",
                        "1"});
#line 343
 testRunner.Given("There is a recordset in the datalist with this shape", ((string)(null)), table1626, "Given ");
#line 347
 testRunner.And("I have selected the foreach type as \"InCSV\" as \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 348
 testRunner.And("the underlying dropped activity is a(n) \"Activity\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 349
 testRunner.And("I Map the input recordset \"[[rs(*).field]]\" to \"[[test(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 350
 testRunner.And("I Map the output recordset \"[[test(*).data]]\" to \"[[res(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 351
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1627 = new TechTalk.SpecFlow.Table(new string[] {
                        "index"});
            table1627.AddRow(new string[] {
                        "2"});
#line 352
 testRunner.Then("The mapping uses the following indexes", ((string)(null)), table1627, "Then ");
#line 355
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1628 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Csv Indexes"});
            table1628.AddRow(new string[] {
                        "* in CSV",
                        "2"});
#line 356
 testRunner.And("the debug inputs as", ((string)(null)), table1628, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over an activity with number of executions equals 0")]
        public virtual void ExecuteAForeachOverAnActivityWithNumberOfExecutionsEquals0()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over an activity with number of executions equals 0", ((string[])(null)));
#line 360
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1629 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1629.AddRow(new string[] {
                        "[[rs().field]]",
                        "1"});
#line 361
 testRunner.Given("There is a recordset in the datalist with this shape", ((string)(null)), table1629, "Given ");
#line 364
 testRunner.And("I have selected the foreach type as \"NumOfExecution\" as \"0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 365
 testRunner.And("the underlying dropped activity is a(n) \"Activity\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 366
 testRunner.And("I Map the input recordset \"[[rs(*).field]]\" to \"[[test(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 367
 testRunner.And("I Map the output recordset \"[[test(*).data]]\" to \"[[res(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 368
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 369
 testRunner.Then("the foreach executes 0 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 370
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1630 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table1630.AddRow(new string[] {
                        "No. of Executes",
                        "0"});
#line 371
 testRunner.And("the debug inputs as", ((string)(null)), table1630, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over an activity with number of executions equals 1")]
        public virtual void ExecuteAForeachOverAnActivityWithNumberOfExecutionsEquals1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over an activity with number of executions equals 1", ((string[])(null)));
#line 375
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1631 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1631.AddRow(new string[] {
                        "[[rs().field]]",
                        "1"});
#line 376
 testRunner.Given("There is a recordset in the datalist with this shape", ((string)(null)), table1631, "Given ");
#line 379
 testRunner.And("I have selected the foreach type as \"NumOfExecution\" as \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 380
 testRunner.And("the underlying dropped activity is a(n) \"Activity\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 381
 testRunner.And("I Map the input recordset \"[[rs(*).field]]\" to \"[[test(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 382
 testRunner.And("I Map the output recordset \"[[test(*).data]]\" to \"[[res(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 383
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1632 = new TechTalk.SpecFlow.Table(new string[] {
                        "index"});
            table1632.AddRow(new string[] {
                        "0"});
#line 384
 testRunner.Then("The mapping uses the following indexes", ((string)(null)), table1632, "Then ");
#line 387
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1633 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table1633.AddRow(new string[] {
                        "No. of Executes",
                        "1"});
#line 388
 testRunner.And("the debug inputs as", ((string)(null)), table1633, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over an activity with number of executions equals 8")]
        public virtual void ExecuteAForeachOverAnActivityWithNumberOfExecutionsEquals8()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over an activity with number of executions equals 8", ((string[])(null)));
#line 392
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1634 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1634.AddRow(new string[] {
                        "[[rs().field]]",
                        "1"});
#line 393
 testRunner.Given("There is a recordset in the datalist with this shape", ((string)(null)), table1634, "Given ");
#line 396
 testRunner.And("I have selected the foreach type as \"NumOfExecution\" as \"8\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 397
 testRunner.And("the underlying dropped activity is a(n) \"Activity\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 398
 testRunner.And("I Map the input recordset \"[[rs(*).field]]\" to \"[[test(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 399
 testRunner.And("I Map the output recordset \"[[test(*).data]]\" to \"[[res(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 400
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 401
 testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1635 = new TechTalk.SpecFlow.Table(new string[] {
                        "index"});
            table1635.AddRow(new string[] {
                        "0"});
            table1635.AddRow(new string[] {
                        "0"});
            table1635.AddRow(new string[] {
                        "0"});
            table1635.AddRow(new string[] {
                        "0"});
            table1635.AddRow(new string[] {
                        "0"});
            table1635.AddRow(new string[] {
                        "0"});
            table1635.AddRow(new string[] {
                        "0"});
            table1635.AddRow(new string[] {
                        "0"});
#line 402
 testRunner.And("The mapping uses the following indexes", ((string)(null)), table1635, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1636 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table1636.AddRow(new string[] {
                        "No. of Executes",
                        "8"});
#line 412
 testRunner.And("the debug inputs as", ((string)(null)), table1636, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over a tool")]
        [NUnit.Framework.TestCaseAttribute("NumOfExecution", "\" \"", "0", "AN", "Number of Executes must be a whole number from 1 onwards", null)]
        [NUnit.Framework.TestCaseAttribute("NumOfExecution", "Test", "0", "AN", "Number of Executes must be a whole number from 1 onwards", null)]
        [NUnit.Framework.TestCaseAttribute("NumOfExecution", "[[var]]", "1", "NO", "", null)]
        [NUnit.Framework.TestCaseAttribute("NumOfExecution", "[[q]]", "0", "AN", "Number of Executes must be a whole number from 1 onwards", null)]
        [NUnit.Framework.TestCaseAttribute("NumOfExecution", "[[rec(1).a]]", "2", "NO", "", null)]
        [NUnit.Framework.TestCaseAttribute("NumOfExecution", "[[rec().a]]", "3", "NO", "", null)]
        [NUnit.Framework.TestCaseAttribute("NumOfExecution", "[[rec(*).a]]", "0", "AN", "The Star notation is not accepted in the Numbers field", null)]
        [NUnit.Framework.TestCaseAttribute("InCSV", "\" \"", "0", "AN", "CSv cannot be null and must be an integer", null)]
        [NUnit.Framework.TestCaseAttribute("InCSV", "Test", "0", "AN", "Invalid characters have been entered in the CSV Numbers", null)]
        [NUnit.Framework.TestCaseAttribute("InCSV", "[[var]]", "1", "NO", "", null)]
        [NUnit.Framework.TestCaseAttribute("InCSV", "[[q]]", "1", "NO", "", null)]
        [NUnit.Framework.TestCaseAttribute("InCSV", "[[rec(1).a]]", "1", "NO", "", null)]
        [NUnit.Framework.TestCaseAttribute("InRecordset", "\" \"", "0", "AN", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("InRecordset", "11", "0", "AN", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("InRecordset", "Test", "0", "AN", "Invalid characters have been entered as Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("InRecordset", "[[var]]", "0", "AN", "Scalar not allowed", null)]
        [NUnit.Framework.TestCaseAttribute("InRecordset", "[[q]]", "0", "AN", "Scalar not allowed", null)]
        [NUnit.Framework.TestCaseAttribute("InRecordset", "[[rec(1).a]]", "0", "AN", "", null)]
        [NUnit.Framework.TestCaseAttribute("InRange", "", "0", "AN", "The from field cannot be left empty", null)]
        [NUnit.Framework.TestCaseAttribute("InRange", "", "0", "AN", "From range must be a whole number from 1 onwards", null)]
        [NUnit.Framework.TestCaseAttribute("InRange", "", "0", "AN", "", null)]
        [NUnit.Framework.TestCaseAttribute("InRange", "", "0", "AN", "From range must be a whole number from 1 onwards", null)]
        [NUnit.Framework.TestCaseAttribute("InRange", "", "0", "AN", "The Star notation is not accepted in the Numbers field", null)]
        [NUnit.Framework.TestCaseAttribute("InRange", "", "0", "AN", "To range must be a whole number from 1 onwards", null)]
        [NUnit.Framework.TestCaseAttribute("InRange", "", "0", "AN", "The Star notation is not accepted in the Numbers field", null)]
        [NUnit.Framework.TestCaseAttribute("InRange", "", "0", "AN", "The To field cannot be left empty", null)]
        public virtual void ExecuteAForeachOverATool(string type, string variable, string value, string error, string message, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over a tool", exampleTags);
#line 416
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1637 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1637.AddRow(new string[] {
                        "[[rs().field]]",
                        "1"});
            table1637.AddRow(new string[] {
                        "[[rs().field]]",
                        "2"});
            table1637.AddRow(new string[] {
                        "[[rs().field]]",
                        "3"});
#line 417
 testRunner.Given("There is a recordset in the datalist with this shape", ((string)(null)), table1637, "Given ");
#line 422
 testRunner.And(string.Format("I have a variable \"{0}\" with the value \"{1}\"", variable, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 423
 testRunner.And(string.Format("I have selected the foreach type as \"{0}\" and used \"{1}\"", type, variable), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 424
 testRunner.And("the underlying dropped activity is a(n) \"Tool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 425
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 426
 testRunner.Then(string.Format("the foreach executes {0} times", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 427
 testRunner.And(string.Format("the execution has \"{0}\" error", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over a tool null in csv")]
        public virtual void ExecuteAForeachOverAToolNullInCsv()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over a tool null in csv", ((string[])(null)));
#line 458
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1638 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1638.AddRow(new string[] {
                        "[[count]]",
                        "NULL"});
#line 459
 testRunner.Given("There is a recordset in the datalist with this shape", ((string)(null)), table1638, "Given ");
#line 462
 testRunner.And("I have selected the foreach type as \"InCSV\" and used \"[[count]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 463
 testRunner.And("the underlying dropped activity is a(n) \"Tool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 464
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 465
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over a tool null in Recordsets")]
        public virtual void ExecuteAForeachOverAToolNullInRecordsets()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over a tool null in Recordsets", ((string[])(null)));
#line 467
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1639 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1639.AddRow(new string[] {
                        "[[count().a]]",
                        "NULL"});
#line 468
 testRunner.Given("There is a recordset in the datalist with this shape", ((string)(null)), table1639, "Given ");
#line 471
 testRunner.And("I have selected the foreach type as \"InRecordset\" and used \"[[count().a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 472
 testRunner.And("the underlying dropped activity is a(n) \"Tool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 473
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 474
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over a tool null in numberofexecutions")]
        public virtual void ExecuteAForeachOverAToolNullInNumberofexecutions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over a tool null in numberofexecutions", ((string[])(null)));
#line 476
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1640 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1640.AddRow(new string[] {
                        "[[count]]",
                        "NULL"});
#line 477
 testRunner.Given("There is a recordset in the datalist with this shape", ((string)(null)), table1640, "Given ");
#line 480
 testRunner.And("I have selected the foreach type as \"NumOfExecution\" and used \"[[count]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 481
 testRunner.And("the underlying dropped activity is a(n) \"Tool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 482
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 483
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over a tool null in Range")]
        public virtual void ExecuteAForeachOverAToolNullInRange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over a tool null in Range", ((string[])(null)));
#line 485
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1641 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1641.AddRow(new string[] {
                        "[[count]]",
                        "NULL"});
#line 486
 testRunner.Given("There is a recordset in the datalist with this shape", ((string)(null)), table1641, "Given ");
#line 489
 testRunner.And("I have selected the foreach type as \"InRange\" from \"[[rs(2).field]]\" to \"[[value]" +
                    "]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 490
 testRunner.And("the underlying dropped activity is a(n) \"Tool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 491
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 492
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach over an activity with number of executions equals +1 invalid")]
        public virtual void ExecuteAForeachOverAnActivityWithNumberOfExecutionsEquals1Invalid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach over an activity with number of executions equals +1 invalid", ((string[])(null)));
#line 494
this.ScenarioSetup(scenarioInfo);
#line 495
 testRunner.And("I have selected the foreach type as \"NumOfExecution\" as \"&(1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 496
 testRunner.And("the underlying dropped activity is a(n) \"Activity\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 497
 testRunner.And("I Map the input recordset \"[[rs(*).field]]\" to \"[[test(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 498
 testRunner.And("I Map the output recordset \"[[test(*).data]]\" to \"[[res(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 499
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 500
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach with number of executions equals @#$1 invalid")]
        public virtual void ExecuteAForeachWithNumberOfExecutionsEquals1Invalid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach with number of executions equals @#$1 invalid", ((string[])(null)));
#line 503
this.ScenarioSetup(scenarioInfo);
#line 504
 testRunner.And("I have selected the foreach type as \"NumOfExecution\" as \"#$1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 505
 testRunner.And("the underlying dropped activity is a(n) \"Activity\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 506
 testRunner.And("I Map the input recordset \"[[rs(*).field]]\" to \"[[test(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 507
 testRunner.And("I Map the output recordset \"[[test(*).data]]\" to \"[[res(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 508
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 509
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach with number of executions as recordset with star")]
        public virtual void ExecuteAForeachWithNumberOfExecutionsAsRecordsetWithStar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach with number of executions as recordset with star", ((string[])(null)));
#line 511
this.ScenarioSetup(scenarioInfo);
#line 512
 testRunner.And("I have selected the foreach type as \"NumOfExecution\" as \"[[rec(*).a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 513
 testRunner.And("the underlying dropped activity is a(n) \"Activity\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 514
 testRunner.And("I Map the input recordset \"[[rs(*).field]]\" to \"[[test(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 515
 testRunner.And("I Map the output recordset \"[[test(*).data]]\" to \"[[res(*).data]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 516
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 517
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1642 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
#line 518
 testRunner.And("the debug inputs as", ((string)(null)), table1642, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute a foreach using In Recordset with incorrect recordset")]
        public virtual void ExecuteAForeachUsingInRecordsetWithIncorrectRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a foreach using In Recordset with incorrect recordset", ((string[])(null)));
#line 521
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1643 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1643.AddRow(new string[] {
                        "[[rs().field]]",
                        "1"});
            table1643.AddRow(new string[] {
                        "[[rs().field]]",
                        "2"});
            table1643.AddRow(new string[] {
                        "[[rs().field]]",
                        "3"});
            table1643.AddRow(new string[] {
                        "[[rs().field]]",
                        "6"});
#line 522
 testRunner.Given("There is a recordset in the datalist with this shape", ((string)(null)), table1643, "Given ");
#line 528
 testRunner.And("I have selected the foreach type as \"InRecordset\" and used \"[[rs()]%^&]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 529
 testRunner.And("the underlying dropped activity is a(n) \"Tool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 530
 testRunner.When("the foreach tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 531
 testRunner.Then("the foreach executes 0 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 532
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1644 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Recordset"});
            table1644.AddRow(new string[] {
                        "* in Recordset",
                        "[[rs(1).field]] = 1"});
            table1644.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 2"});
            table1644.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 3"});
            table1644.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 6"});
#line 533
 testRunner.And("the debug inputs as", ((string)(null)), table1644, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
