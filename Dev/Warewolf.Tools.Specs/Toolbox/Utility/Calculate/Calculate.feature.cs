// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.Tools.Specs.Toolbox.Utility.Calculate
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Calculate")]
    [NUnit.Framework.CategoryAttribute("Utility")]
    public partial class CalculateFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Calculate.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Calculate", "\tIn order to perform basic calculations\r\n\tAs a Warewolf user\r\n\tI want a tool that" +
                    " I can input a formula and will calculate and retun a result", ProgrammingLanguage.CSharp, new string[] {
                        "Utility"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate using a given formula")]
        public virtual void CalculateUsingAGivenFormula()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate using a given formula", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.Given("I have the formula \"mod(sqrt(49), 7)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 25
 testRunner.When("the calculate tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
 testRunner.Then("the calculate result should be \"0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 27
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2552 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table2552.AddRow(new string[] {
                        "mod(sqrt(49), 7)"});
#line 28
 testRunner.And("the debug inputs as", ((string)(null)), table2552, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2553 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2553.AddRow(new string[] {
                        "[[result]] = 0"});
#line 31
 testRunner.And("the debug output as", ((string)(null)), table2553, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate using multiple scalars and recordset inputs")]
        public virtual void CalculateUsingMultipleScalarsAndRecordsetInputs()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate using multiple scalars and recordset inputs", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
 testRunner.Given("I have a calculate variable \"[[var]]\" equal to \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 37
 testRunner.And("I have a calculate variable \"[[var2]]\" equal to \"20\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.And("I have the formula \"((([[var]]+[[var]])/[[var2]])+[[var2]]*[[var]])\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.When("the calculate tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.Then("the calculate result should be \"20.1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2554 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table2554.AddRow(new string[] {
                        "((([[var]]+[[var]])/[[var2]])+[[var2]]*[[var]]) = (((1+1)/20)+20*1)"});
#line 42
 testRunner.And("the debug inputs as", ((string)(null)), table2554, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2555 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2555.AddRow(new string[] {
                        "[[result]] = 20.1"});
#line 45
 testRunner.And("the debug output as", ((string)(null)), table2555, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate with new lines should concatenate values")]
        public virtual void CalculateWithNewLinesShouldConcatenateValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate with new lines should concatenate values", ((string[])(null)));
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
 testRunner.Given("I have a calculate variable \"[[var]]\" equal to \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
 testRunner.And("I have a calculate variable \"[[var2]]\" equal to \"20\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
 testRunner.And("I have the formula \"[[var]]\\r\\n[[var2]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.When("the calculate tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
 testRunner.Then("the calculate result should be \"120\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 55
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2556 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table2556.AddRow(new string[] {
                        "String = String"});
#line 56
 testRunner.And("the debug inputs as", ((string)(null)), table2556, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2557 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2557.AddRow(new string[] {
                        "[[result]] = 120"});
#line 59
 testRunner.And("the debug output as", ((string)(null)), table2557, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate using Recordset (*) input in an agregate function like SUM")]
        public virtual void CalculateUsingRecordsetInputInAnAgregateFunctionLikeSUM()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate using Recordset (*) input in an agregate function like SUM", ((string[])(null)));
#line 63
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2558 = new TechTalk.SpecFlow.Table(new string[] {
                        "var().int"});
            table2558.AddRow(new string[] {
                        "1"});
            table2558.AddRow(new string[] {
                        "2"});
            table2558.AddRow(new string[] {
                        "3"});
#line 64
 testRunner.Given("I have a calculate variable \"[[var().int]]\" equal to", ((string)(null)), table2558, "Given ");
#line 69
 testRunner.And("I have the formula \"SUM([[var(*).int]])\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
 testRunner.When("the calculate tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 71
 testRunner.Then("the calculate result should be \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 72
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2559 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table2559.AddRow(new string[] {
                        "SUM([[var(*).int]]) = SUM(1)"});
            table2559.AddRow(new string[] {
                        "SUM([[var(*).int]]) = SUM(2)"});
            table2559.AddRow(new string[] {
                        "SUM([[var(*).int]]) = SUM(3)"});
#line 73
 testRunner.And("the debug inputs as", ((string)(null)), table2559, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2560 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2560.AddRow(new string[] {
                        "[[result]] = 3"});
#line 78
 testRunner.And("the debug output as", ((string)(null)), table2560, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate using Recordset (*) input in an agregate function like SUM and output r" +
            "ecordset star")]
        public virtual void CalculateUsingRecordsetInputInAnAgregateFunctionLikeSUMAndOutputRecordsetStar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate using Recordset (*) input in an agregate function like SUM and output r" +
                    "ecordset star", ((string[])(null)));
#line 82
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2561 = new TechTalk.SpecFlow.Table(new string[] {
                        "var().int"});
            table2561.AddRow(new string[] {
                        "1"});
            table2561.AddRow(new string[] {
                        "2"});
            table2561.AddRow(new string[] {
                        "3"});
#line 83
 testRunner.Given("I have a calculate variable \"[[var().int]]\" equal to", ((string)(null)), table2561, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2562 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs().val"});
            table2562.AddRow(new string[] {
                        "10"});
            table2562.AddRow(new string[] {
                        "23"});
#line 88
 testRunner.And("I have a calculate variable \"[[rs().val]]\" equal to", ((string)(null)), table2562, "And ");
#line 92
 testRunner.And("I have the formula \"SUM([[var(*).int]])\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
 testRunner.And("calculate result as \"[[rs(*).val]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
 testRunner.When("the calculate tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 95
 testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2563 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table2563.AddRow(new string[] {
                        "SUM([[var(*).int]]) = SUM(1)"});
            table2563.AddRow(new string[] {
                        "SUM([[var(*).int]]) = SUM(2)"});
            table2563.AddRow(new string[] {
                        "SUM([[var(*).int]]) = SUM(3)"});
#line 96
 testRunner.And("the debug inputs as", ((string)(null)), table2563, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2564 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2564.AddRow(new string[] {
                        "[[rs(1).val]] = 1"});
            table2564.AddRow(new string[] {
                        "[[rs(2).val]] = 2"});
            table2564.AddRow(new string[] {
                        "[[rs(3).val]] = 3"});
#line 101
 testRunner.And("the debug output as", ((string)(null)), table2564, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate using Recordset (*) input in an agregate function like SUM and output r" +
            "ecordset star complex")]
        public virtual void CalculateUsingRecordsetInputInAnAgregateFunctionLikeSUMAndOutputRecordsetStarComplex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate using Recordset (*) input in an agregate function like SUM and output r" +
                    "ecordset star complex", ((string[])(null)));
#line 107
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2565 = new TechTalk.SpecFlow.Table(new string[] {
                        "var().int"});
            table2565.AddRow(new string[] {
                        "1"});
            table2565.AddRow(new string[] {
                        "2"});
            table2565.AddRow(new string[] {
                        "3"});
#line 108
 testRunner.Given("I have a calculate variable \"[[var().int]]\" equal to", ((string)(null)), table2565, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2566 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs().val"});
            table2566.AddRow(new string[] {
                        "10"});
            table2566.AddRow(new string[] {
                        "23"});
#line 113
 testRunner.And("I have a calculate variable \"[[rs().val]]\" equal to", ((string)(null)), table2566, "And ");
#line 117
 testRunner.And("I have the formula \"SUM([[var(*).int]]) + 15\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 118
 testRunner.And("calculate result as \"[[rs(*).val]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 119
 testRunner.When("the calculate tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 120
 testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2567 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table2567.AddRow(new string[] {
                        "SUM([[var(*).int]]) + 15 = SUM(1) + 15"});
            table2567.AddRow(new string[] {
                        "SUM([[var(*).int]]) + 15 = SUM(2) + 15"});
            table2567.AddRow(new string[] {
                        "SUM([[var(*).int]]) + 15 = SUM(3) + 15"});
#line 121
 testRunner.And("the debug inputs as", ((string)(null)), table2567, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2568 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2568.AddRow(new string[] {
                        "[[rs(1).val]] = 16"});
            table2568.AddRow(new string[] {
                        "[[rs(2).val]] = 17"});
            table2568.AddRow(new string[] {
                        "[[rs(3).val]] = 18"});
#line 126
 testRunner.And("the debug output as", ((string)(null)), table2568, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate using incorrect formula")]
        public virtual void CalculateUsingIncorrectFormula()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate using incorrect formula", ((string[])(null)));
#line 132
this.ScenarioSetup(scenarioInfo);
#line 133
 testRunner.Given("I have the formula \"asdf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 134
 testRunner.When("the calculate tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 135
 testRunner.Then("the calculate result should be \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 136
 testRunner.And("the execution has \"Formula syntax error. Unable to compile the formula: Unexpecte" +
                    "d end of file, on line: 1 column: 5\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2569 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table2569.AddRow(new string[] {
                        "asdf"});
#line 137
 testRunner.And("the debug inputs as", ((string)(null)), table2569, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2570 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2570.AddRow(new string[] {
                        "[[result]] ="});
#line 140
 testRunner.And("the debug output as", ((string)(null)), table2570, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate using variable as full calculation")]
        public virtual void CalculateUsingVariableAsFullCalculation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate using variable as full calculation", ((string[])(null)));
#line 145
this.ScenarioSetup(scenarioInfo);
#line 146
 testRunner.Given("I have a calculate variable \"[[var]]\" equal to \"SUM(1,2,3)-5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 147
 testRunner.And("I have the formula \"[[var]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
 testRunner.When("the calculate tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 149
 testRunner.Then("the calculate result should be \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 150
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2571 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table2571.AddRow(new string[] {
                        "[[var]] =  SUM(1,2,3)-5"});
#line 151
 testRunner.And("the debug inputs as", ((string)(null)), table2571, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2572 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2572.AddRow(new string[] {
                        "[[result]] = 1"});
#line 154
 testRunner.And("the debug output as", ((string)(null)), table2572, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate using a negative index recordset value")]
        public virtual void CalculateUsingANegativeIndexRecordsetValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate using a negative index recordset value", ((string[])(null)));
#line 158
this.ScenarioSetup(scenarioInfo);
#line 159
 testRunner.Given("I have the formula \"[[my(-1).formula]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 160
 testRunner.When("the calculate tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 161
 testRunner.Then("the execution has \"Recordset index [ -1 ] is not greater than zero\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2573 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table2573.AddRow(new string[] {
                        "[[my(-1).formula]] ="});
#line 162
 testRunner.And("the debug inputs as", ((string)(null)), table2573, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2574 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2574.AddRow(new string[] {
                        "[[result]] ="});
#line 165
 testRunner.And("the debug output as", ((string)(null)), table2574, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate using isnumber and blank")]
        public virtual void CalculateUsingIsnumberAndBlank()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate using isnumber and blank", ((string[])(null)));
#line 169
this.ScenarioSetup(scenarioInfo);
#line 170
    testRunner.Given("I have the formula \"if(isnumber(\"\"),\"Is number\",\"Not number\")\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 171
 testRunner.When("the calculate tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 172
 testRunner.Then("the calculate result should be \"Not number\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2575 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table2575.AddRow(new string[] {
                        "\"if(isnumber(\"\"),\"Is number\",\"Not number\")\""});
#line 173
 testRunner.And("the debug inputs as", ((string)(null)), table2575, "And ");
#line 176
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate Assign by evaluating a variable inside a variable")]
        public virtual void CalculateAssignByEvaluatingAVariableInsideAVariable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate Assign by evaluating a variable inside a variable", ((string[])(null)));
#line 179
this.ScenarioSetup(scenarioInfo);
#line 180
 testRunner.Given("I have a calculate variable \"[[a]]\" equal to \"b\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 181
 testRunner.And("I have a calculate variable \"[[b]]\" equal to \"20\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 182
 testRunner.And("I have the formula \"[[[[a]]]]+1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 183
 testRunner.When("the calculate tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 184
 testRunner.Then("the calculate result should be \"21\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 185
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2576 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table2576.AddRow(new string[] {
                        "[[b]]+1 = 20+1"});
#line 186
 testRunner.And("the debug inputs as", ((string)(null)), table2576, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2577 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2577.AddRow(new string[] {
                        "[[result]] = 21"});
#line 189
 testRunner.And("the debug output as", ((string)(null)), table2577, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate Assign by evaluating a variable inside a variable with function")]
        public virtual void CalculateAssignByEvaluatingAVariableInsideAVariableWithFunction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate Assign by evaluating a variable inside a variable with function", ((string[])(null)));
#line 193
this.ScenarioSetup(scenarioInfo);
#line 194
 testRunner.Given("I have a calculate variable \"[[a]]\" equal to \"b\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 195
 testRunner.And("I have a calculate variable \"[[b]]\" equal to \"20\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 196
 testRunner.And("I have the formula \"SUM([[[[a]]]],[[b]])\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 197
 testRunner.When("the calculate tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 198
 testRunner.Then("the calculate result should be \"40\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 199
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2578 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table2578.AddRow(new string[] {
                        "SUM([[b]],20) = SUM(20,20)"});
#line 200
 testRunner.And("the debug inputs as", ((string)(null)), table2578, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2579 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2579.AddRow(new string[] {
                        "[[result]] = 40"});
#line 203
 testRunner.And("the debug output as", ((string)(null)), table2579, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate Assign by evaluating variables with functions")]
        [NUnit.Framework.TestCaseAttribute("1", "abs([[e]])", "1000", null)]
        [NUnit.Framework.TestCaseAttribute("2", "acos([[x]])", "0", null)]
        [NUnit.Framework.TestCaseAttribute("3", "acosh([[rc(1).set]])", "2.29243166956118", null)]
        [NUnit.Framework.TestCaseAttribute("4", "AND([[s]]<[[z]]<5)", "False", null)]
        [NUnit.Framework.TestCaseAttribute("5", "AND([[y]]<5)", "True", null)]
        [NUnit.Framework.TestCaseAttribute("7", "ASIN([[s]])", "-1.57079632679490", null)]
        [NUnit.Framework.TestCaseAttribute("8", "ASINH([[rc(1).set]])", "2.312438341272750", null)]
        [NUnit.Framework.TestCaseAttribute("9", "ATAN([[s]])", "-0.785398163397448", null)]
        [NUnit.Framework.TestCaseAttribute("10", "ATAN2([[x]],[[s]])", "-0.785398163397448", null)]
        [NUnit.Framework.TestCaseAttribute("11", "ATANH([[t]])", "0", null)]
        [NUnit.Framework.TestCaseAttribute("12", "AVEDEV([[x]],[[z]])", "4.5", null)]
        [NUnit.Framework.TestCaseAttribute("13", "AVERAGE([[x]],[[y]],[[z]],[[rc(1).set]],[[s]],[[t]],[[e]])", "145.285714285714", null)]
        [NUnit.Framework.TestCaseAttribute("14", "BIN2DEC([[z]])", "2", null)]
        [NUnit.Framework.TestCaseAttribute("15", "BIN2HEX([[x]])", "1", null)]
        [NUnit.Framework.TestCaseAttribute("16", "BIN2OCT([[z]])", "2", null)]
        [NUnit.Framework.TestCaseAttribute("17", "CEILING([[z]],[[y]])", "10", null)]
        [NUnit.Framework.TestCaseAttribute("18", "char([[x]][[t]][[x]])", "e", null)]
        [NUnit.Framework.TestCaseAttribute("19", "CHOOSE(4,[[z]],[[t]],[[rc(1).set]],100)", "100", null)]
        [NUnit.Framework.TestCaseAttribute("20", "CODE(111)", "49", null)]
        [NUnit.Framework.TestCaseAttribute("21", "COMBIN([[z]],[[y]])", "45", null)]
        [NUnit.Framework.TestCaseAttribute("22", "COMPLEX([[y]],[[e]])", "2+1000i", null)]
        [NUnit.Framework.TestCaseAttribute("23", "CONCATENATE([[z]],[[x]])", "101", null)]
        [NUnit.Framework.TestCaseAttribute("24", "CONVERT([[z]],\"m\",\"in\")", "393.700787401575", null)]
        [NUnit.Framework.TestCaseAttribute("25", "COS([[[[a]]]])", "-0.989992496600445", null)]
        [NUnit.Framework.TestCaseAttribute("26", "COSH([[z]])", "11013.232920103300", null)]
        [NUnit.Framework.TestCaseAttribute("27", "COUNT([[x]],[[y]],[[[[a]]]])", "3", null)]
        [NUnit.Framework.TestCaseAttribute("29", "DATE(2000,[[y]],12)", "{2/12/2000 12:00:00.000 AM} or {12/02/2000 12:00:00.000 AM}", null)]
        [NUnit.Framework.TestCaseAttribute("30", "DAY([[x]])", "1", null)]
        [NUnit.Framework.TestCaseAttribute("31", "DAYS360([[x]],[[y]])", "1", null)]
        [NUnit.Framework.TestCaseAttribute("32", "DB([[e]],[[z]],12,12,12)", "4.66024676978963", null)]
        [NUnit.Framework.TestCaseAttribute("33", "DBNull()", "", null)]
        [NUnit.Framework.TestCaseAttribute("34", "DDB([[e]],[[z]],12,12,[[x]])", "31.9996025467397", null)]
        [NUnit.Framework.TestCaseAttribute("35", "DEC2BIN([[x]],[[z]])", "0000000001", null)]
        [NUnit.Framework.TestCaseAttribute("36", "DEC2HEX(1,10)", "0000000001", null)]
        [NUnit.Framework.TestCaseAttribute("37", "DEC2OCT([[y]],[[z]])", "0000000002", null)]
        [NUnit.Framework.TestCaseAttribute("38", "DEGREES([[z]])", "572.957795130823", null)]
        [NUnit.Framework.TestCaseAttribute("39", "DELTA([[t]],[[x]])", "0", null)]
        [NUnit.Framework.TestCaseAttribute("40", "DOLLARDE([[z]],[[y]])", "10", null)]
        [NUnit.Framework.TestCaseAttribute("41", "DOLLARFR([[x]],[[z]])", "1", null)]
        [NUnit.Framework.TestCaseAttribute("42", "EDATE([[z]],[[[[a]]]])", "{4/10/1900 12:00:00.000 AM} or {10/04/1900 12:00:00.000 AM}", null)]
        [NUnit.Framework.TestCaseAttribute("43", "EOMONTH([[z]],[[[[a]]]])", "{4/30/1900 12:00:00.000 AM} or {30/04/1900 12:00:00.000 AM}", null)]
        [NUnit.Framework.TestCaseAttribute("45", "EVEN([[y]])", "2", null)]
        [NUnit.Framework.TestCaseAttribute("46", "EXP([[x]])", "2.71828182845905", null)]
        [NUnit.Framework.TestCaseAttribute("47", "FACT([[z]])", "3628800", null)]
        [NUnit.Framework.TestCaseAttribute("48", "FIND([[t]],[[e]])", "2", null)]
        [NUnit.Framework.TestCaseAttribute("49", "FACTDOUBLE([[z]])", "3840", null)]
        [NUnit.Framework.TestCaseAttribute("50", "FLOOR([[z]],[[z]])", "10", null)]
        [NUnit.Framework.TestCaseAttribute("51", "FV(10,12,100,10,1)", "-376611405206410", null)]
        [NUnit.Framework.TestCaseAttribute("52", "GCD([[x]],[[z]])", "1", null)]
        [NUnit.Framework.TestCaseAttribute("53", "GESTEP([[[[a]]]],[[s]])", "1", null)]
        [NUnit.Framework.TestCaseAttribute("54", "HEX2BIN([[y]],[[y]])", "10", null)]
        [NUnit.Framework.TestCaseAttribute("55", "HEX2DEC([[rc(1).set]])", "5", null)]
        [NUnit.Framework.TestCaseAttribute("56", "HEX2OCT([[rc(1).set]])", "5", null)]
        [NUnit.Framework.TestCaseAttribute("57", "IF([[z]],[[rc(1).set]])", "5", null)]
        [NUnit.Framework.TestCaseAttribute("58", "IFERROR([[t]],[[x]])", "0", null)]
        [NUnit.Framework.TestCaseAttribute("59", "IMABS([[x]])", "1", null)]
        [NUnit.Framework.TestCaseAttribute("60", "IMAGINARY([[rc(1).set]])", "0", null)]
        [NUnit.Framework.TestCaseAttribute("61", "IMARGUMENT([[e]])", "0", null)]
        [NUnit.Framework.TestCaseAttribute("62", "IMCONJUGATE([[[[a]]]])", "3", null)]
        [NUnit.Framework.TestCaseAttribute("63", "IMCOS([[y]])", "-0.416146836547142", null)]
        [NUnit.Framework.TestCaseAttribute("64", "IMDIV(1,10)", "0.1", null)]
        [NUnit.Framework.TestCaseAttribute("65", "IMEXP([[rc(1).set]])", "148.413159102577", null)]
        [NUnit.Framework.TestCaseAttribute("66", "IMLN([[[[a]]]])", "1.09861228866811", null)]
        [NUnit.Framework.TestCaseAttribute("67", "IMLOG10([[y]])", "0.301029995663981", null)]
        [NUnit.Framework.TestCaseAttribute("68", "IMLOG2([[y]])", "1", null)]
        [NUnit.Framework.TestCaseAttribute("69", "IMPOWER(2,[[z]])", "1024", null)]
        [NUnit.Framework.TestCaseAttribute("70", "IMPRODUCT([[x]],[[y]])", "2", null)]
        [NUnit.Framework.TestCaseAttribute("71", "IMREAL([[z]])", "10", null)]
        [NUnit.Framework.TestCaseAttribute("72", "IMSIN([[x]])", "0.841470984807897", null)]
        [NUnit.Framework.TestCaseAttribute("73", "IMSQRT([[e]])", "31.6227766016838", null)]
        [NUnit.Framework.TestCaseAttribute("74", "IMSUB([[x]],[[rc(1).set]])", "-4", null)]
        [NUnit.Framework.TestCaseAttribute("75", "IMSUM([[x]],[[rc(1).set]])", "6", null)]
        [NUnit.Framework.TestCaseAttribute("77", "INT([[s]])", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("78", "INTRATE(2015,2030,1000,1,4)", "-23.976", null)]
        [NUnit.Framework.TestCaseAttribute("79", "IPMT(5,12,100,1000,2000,1)", "-833.333358764648", null)]
        [NUnit.Framework.TestCaseAttribute("81", "isdbnull([[x]])", "False", null)]
        [NUnit.Framework.TestCaseAttribute("82", "ISBLANK(1)", "False", null)]
        [NUnit.Framework.TestCaseAttribute("83", "ISERR([[e]])", "False", null)]
        [NUnit.Framework.TestCaseAttribute("84", "ISERROR([[rc(1).set]])", "False", null)]
        [NUnit.Framework.TestCaseAttribute("85", "ISEVEN([[z]])", "True", null)]
        [NUnit.Framework.TestCaseAttribute("86", "ISLOGICAL([[x]])", "False", null)]
        [NUnit.Framework.TestCaseAttribute("87", "ISNA([[t]])", "False", null)]
        [NUnit.Framework.TestCaseAttribute("88", "ISNONTEXT([[[[a]]]])", "True", null)]
        [NUnit.Framework.TestCaseAttribute("89", "ISNUMBER([[x]])", "True", null)]
        [NUnit.Framework.TestCaseAttribute("90", "ISODD([[[[a]]]])", "True", null)]
        [NUnit.Framework.TestCaseAttribute("91", "ISREF([[t]])", "False", null)]
        [NUnit.Framework.TestCaseAttribute("92", "ISTEXT([[rc(1).set]])", "False", null)]
        [NUnit.Framework.TestCaseAttribute("93", "LCM(1,2,10)", "10", null)]
        [NUnit.Framework.TestCaseAttribute("94", "LEFT([[x]],[[e]])", "1", null)]
        [NUnit.Framework.TestCaseAttribute("95", "LEN([[z]])", "2", null)]
        [NUnit.Framework.TestCaseAttribute("96", "LN([[rc(1).set]])", "1.6094379124341", null)]
        [NUnit.Framework.TestCaseAttribute("97", "LOG([[z]],[[y]])", "3.32192809488736", null)]
        [NUnit.Framework.TestCaseAttribute("98", "LOG10([[z]])", "1", null)]
        [NUnit.Framework.TestCaseAttribute("99", "LOWER([[rc(1).set]])", "5", null)]
        [NUnit.Framework.TestCaseAttribute("100", "MAX(10,1,1000)", "1000", null)]
        [NUnit.Framework.TestCaseAttribute("101", "MEDIAN(10,1,1000)", "10", null)]
        [NUnit.Framework.TestCaseAttribute("102", "MID(10,1,1000)", "10", null)]
        [NUnit.Framework.TestCaseAttribute("103", "MIN(10,1,1000)", "1", null)]
        [NUnit.Framework.TestCaseAttribute("104", "MINUTE([[[[a]]]])", "0", null)]
        [NUnit.Framework.TestCaseAttribute("105", "MOD([[b]],[[rc(1).set]])", "3", null)]
        [NUnit.Framework.TestCaseAttribute("106", "MONTH([[z]])", "1", null)]
        [NUnit.Framework.TestCaseAttribute("107", "MROUND([[x]],[[y]])", "2", null)]
        [NUnit.Framework.TestCaseAttribute("108", "MULTINOMIAL(10,[[x]],2)", "858", null)]
        [NUnit.Framework.TestCaseAttribute("109", "N([[s]])", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("111", "NETWORKDAYS(2014,2015)", "2", null)]
        [NUnit.Framework.TestCaseAttribute("112", "NOT([[[[a]]]])", "False", null)]
        [NUnit.Framework.TestCaseAttribute("113", "NOW()", "[Now]", null)]
        [NUnit.Framework.TestCaseAttribute("114", "NPER(0.1, 100, 1000, 999,0)", "-79.74911468163210", null)]
        [NUnit.Framework.TestCaseAttribute("115", "NPV([[z]],[[z]],[[rc(1).set]],[[y]])", "0.951915852742299", null)]
        [NUnit.Framework.TestCaseAttribute("117", "OCT2BIN([[z]],[[z]])", "0000001000", null)]
        [NUnit.Framework.TestCaseAttribute("118", "OCT2DEC([[z]])", "8", null)]
        [NUnit.Framework.TestCaseAttribute("119", "OCT2HEX(10,2)", "08", null)]
        [NUnit.Framework.TestCaseAttribute("120", "ODD([[z]])", "11", null)]
        [NUnit.Framework.TestCaseAttribute("121", "OR(1,2)", "True", null)]
        [NUnit.Framework.TestCaseAttribute("122", "PI()", "3.14159265358979", null)]
        [NUnit.Framework.TestCaseAttribute("123", "PMT([[z]],[[x]],100,200,[[t]])", "-1300", null)]
        [NUnit.Framework.TestCaseAttribute("124", "POWER([[z]],[[y]])", "100", null)]
        [NUnit.Framework.TestCaseAttribute("125", "PPMT(10,1,1,1000,500,0)", "-1500", null)]
        [NUnit.Framework.TestCaseAttribute("126", "PRODUCT([[x]],[[y]],[[z]])", "20", null)]
        [NUnit.Framework.TestCaseAttribute("127", "PV(5,1,10,100,0)", "-18.3333333333333", null)]
        [NUnit.Framework.TestCaseAttribute("128", "QUOTIENT([[z]],[[rc(1).set]])", "2", null)]
        [NUnit.Framework.TestCaseAttribute("129", "RADIANS([[z]])", "0.174532925199433", null)]
        [NUnit.Framework.TestCaseAttribute("130", "RANDBETWEEN([[x]],10)", "[Int]", null)]
        [NUnit.Framework.TestCaseAttribute("131", "RATE(360,-600,100000,0,1)", "0.00504500404584643", null)]
        [NUnit.Framework.TestCaseAttribute("132", "REPT([[y]],[[y]])", "22", null)]
        [NUnit.Framework.TestCaseAttribute("133", "RIGHT([[x]],[[x]])", "1", null)]
        [NUnit.Framework.TestCaseAttribute("134", "ROMAN(10,0)", "X", null)]
        [NUnit.Framework.TestCaseAttribute("135", "ROUND([[rc(1).set]],3)", "5", null)]
        [NUnit.Framework.TestCaseAttribute("136", "ROUNDDOWN([[rc(1).set]],3)", "5", null)]
        [NUnit.Framework.TestCaseAttribute("137", "ROUNDUP(5,2)", "5", null)]
        [NUnit.Framework.TestCaseAttribute("138", "SEARCH(1,[[x]],1)", "1", null)]
        [NUnit.Framework.TestCaseAttribute("139", "SEARCHB(1,1,1)", "1", null)]
        [NUnit.Framework.TestCaseAttribute("140", "SECOND([[e]])", "0", null)]
        [NUnit.Framework.TestCaseAttribute("141", "SERIESSUM(1000,10,10,10)", "1E+31", null)]
        [NUnit.Framework.TestCaseAttribute("142", "SIGN(50)", "1", null)]
        [NUnit.Framework.TestCaseAttribute("143", "SIN([[z]])", "-0.54402111088937", null)]
        [NUnit.Framework.TestCaseAttribute("144", "SINH([[z]])", "11013.2328747034", null)]
        [NUnit.Framework.TestCaseAttribute("145", "SLN(100,10,[[x]])", "90", null)]
        [NUnit.Framework.TestCaseAttribute("146", "SQRT(16)", "4", null)]
        [NUnit.Framework.TestCaseAttribute("147", "SQRTPI(16)", "7.08981540362206", null)]
        [NUnit.Framework.TestCaseAttribute("148", "STDEV(1,10,5)", "4.50924975282289", null)]
        [NUnit.Framework.TestCaseAttribute("149", "SUBTOTAL(2,[[x]],[[z]],0)", "3", null)]
        [NUnit.Framework.TestCaseAttribute("150", "SUM([[rc(1).set]],[[z]],[[s]])", "14", null)]
        [NUnit.Framework.TestCaseAttribute("151", "SYD(1000,[[z]],[[rc(1).set]],[[x]])", "330", null)]
        [NUnit.Framework.TestCaseAttribute("152", "TAN([[z]])", "0.648360827459087", null)]
        [NUnit.Framework.TestCaseAttribute("153", "TANH([[z]])", "0.999999995877693", null)]
        [NUnit.Framework.TestCaseAttribute("154", "TEXT([[y]],[[rc(1).set]])", "5", null)]
        [NUnit.Framework.TestCaseAttribute("155", "TIME(24,[[x]],[[x]])", "0.000706018518518518", null)]
        [NUnit.Framework.TestCaseAttribute("156", "TIMEVALUE(\"2:24 AM\")", "0.1", null)]
        [NUnit.Framework.TestCaseAttribute("157", "TODAY()", "[Today]", null)]
        [NUnit.Framework.TestCaseAttribute("158", "TRIM(10)", "10", null)]
        [NUnit.Framework.TestCaseAttribute("159", "TRUNC(1000,[[rc(1).set]])", "1000", null)]
        [NUnit.Framework.TestCaseAttribute("160", "TYPE(-1)", "1", null)]
        [NUnit.Framework.TestCaseAttribute("161", "UPPER(-1)", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("162", "VALUE([[x]])", "1", null)]
        [NUnit.Framework.TestCaseAttribute("163", "VAR([[rc(1).set]],[[z]])", "12.5", null)]
        [NUnit.Framework.TestCaseAttribute("164", "WEEKDAY(11011,[[x]])", "7", null)]
        [NUnit.Framework.TestCaseAttribute("165", "WEEKNUM(11011,[[y]])", "8", null)]
        [NUnit.Framework.TestCaseAttribute("166", "WORKDAY([[rc(1).set]],[[rc(1).set]],[[z]])", "{1/15/1900 12:00:00.000 AM} or {15/01/1900 12:00:00.000 AM}", null)]
        [NUnit.Framework.TestCaseAttribute("167", "YEAR(11011)", "1930", null)]
        public virtual void CalculateAssignByEvaluatingVariablesWithFunctions(string no, string fx, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate Assign by evaluating variables with functions", exampleTags);
#line 207
this.ScenarioSetup(scenarioInfo);
#line 208
 testRunner.Given("I have a calculate variable \"[[x]]\" equal to \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 209
 testRunner.And("I have a calculate variable \"[[y]]\" equal to \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 210
 testRunner.And("I have a calculate variable \"[[z]]\" equal to \"10\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 211
 testRunner.And("I have a calculate variable \"[[rc(1).set]]\" equal to \"5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 212
 testRunner.And("I have a calculate variable \"[[s]]\" equal to \"-1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 213
 testRunner.And("I have a calculate variable \"[[t]]\" equal to \"0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 214
 testRunner.And("I have a calculate variable \"[[a]]\" equal to \"b\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 215
 testRunner.And("I have a calculate variable \"[[b]]\" equal to \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 216
 testRunner.And("I have a calculate variable \"[[e]]\" equal to \"1000\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 217
 testRunner.And(string.Format("I have the Example formula \"{0}\"", fx), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 218
 testRunner.And("The system short date format is \"dd/MM/yyyy\" and the long time format is \"hh:mm:s" +
                    "s tt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 219
 testRunner.When("the calculate tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 220
 testRunner.Then(string.Format("the calculate result should be \"{0}\"", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 221
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate using Recordset input in aggregate functions like SUM")]
        [NUnit.Framework.TestCaseAttribute("1", "SUM([[var([[val]]).int]])", "3", null)]
        [NUnit.Framework.TestCaseAttribute("2", "SUM([[var([[val]]).int]],[[var([[val]]).int]])", "6", null)]
        [NUnit.Framework.TestCaseAttribute("3", "SUM([[var([[val]]).int]],[[var([[val]]).int]])", "6", null)]
        public virtual void CalculateUsingRecordsetInputInAggregateFunctionsLikeSUM(string no, string fx, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate using Recordset input in aggregate functions like SUM", exampleTags);
#line 385
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2580 = new TechTalk.SpecFlow.Table(new string[] {
                        "var().int"});
            table2580.AddRow(new string[] {
                        "1"});
            table2580.AddRow(new string[] {
                        "2"});
            table2580.AddRow(new string[] {
                        "3"});
#line 386
 testRunner.Given("I have a calculate variable \"[[var().int]]\" equal to", ((string)(null)), table2580, "Given ");
#line 391
 testRunner.And("I have a calculate variable \"[[val]]\" equal to \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 392
 testRunner.And(string.Format("I have the formula \"{0}\"", fx), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 393
 testRunner.When("the calculate tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 394
 testRunner.Then(string.Format("the calculate result should be \"{0}\"", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 395
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate using variables with a null value")]
        public virtual void CalculateUsingVariablesWithANullValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate using variables with a null value", ((string[])(null)));
#line 402
this.ScenarioSetup(scenarioInfo);
#line 403
 testRunner.Given("I have a calculate variable \"[[a]]\" equal to \"NULL\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 404
 testRunner.And("I have a calculate variable \"[[b]]\" equal to \"NULL\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 405
 testRunner.And("I have the formula \"SUM([[a]],[[b]])\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 406
 testRunner.When("the calculate tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 407
 testRunner.Then("the execution has \"An\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2581 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table2581.AddRow(new string[] {
                        "SUM([[a]],[[b]]) = SUM(,)"});
#line 408
 testRunner.And("the debug inputs as", ((string)(null)), table2581, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Variable that does not exist")]
        public virtual void VariableThatDoesNotExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Variable that does not exist", ((string[])(null)));
#line 412
this.ScenarioSetup(scenarioInfo);
#line 413
 testRunner.Given("I have a calculate variable \"[[a]]\" equal to \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 414
 testRunner.And("I have a calculate variable \"[[b]]\" equal to \"20\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 415
 testRunner.And("I have the formula \"Sum([[a]],[[b]],[[c]])\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 416
 testRunner.When("the calculate tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 417
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2582 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table2582.AddRow(new string[] {
                        "SUM([[var().int]]) = SUM(3)"});
#line 418
 testRunner.And("the debug inputs as", ((string)(null)), table2582, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2583 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2583.AddRow(new string[] {
                        "[[rs().a]] = 3"});
#line 421
  testRunner.And("the debug output as", ((string)(null)), table2583, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate using variables with a no existent value")]
        public virtual void CalculateUsingVariablesWithANoExistentValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate using variables with a no existent value", ((string[])(null)));
#line 424
this.ScenarioSetup(scenarioInfo);
#line 425
 testRunner.Given("I have the formula \"SUM([[a]],[[b]])\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 426
 testRunner.When("the calculate tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 427
 testRunner.Then("the execution has \"An\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2584 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table2584.AddRow(new string[] {
                        "SUM([[a]],[[b]]) ="});
#line 428
 testRunner.And("the debug inputs as", ((string)(null)), table2584, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
