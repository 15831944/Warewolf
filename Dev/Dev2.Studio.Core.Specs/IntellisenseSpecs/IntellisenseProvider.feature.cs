// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dev2.Studio.Core.Specs.IntellisenseSpecs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DefaultIntellisense")]
    public partial class DefaultIntellisenseFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "IntellisenseProvider.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DefaultIntellisense", "\tIn order to insert variables from my variable list into a textbox\r\n\tAs a Warewol" +
                    "f user\r\n\tI want to be able to select it from the intellisense drop down", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert for All FilterType and DateTime Provider")]
        [NUnit.Framework.TestCaseAttribute("1", "<var/><var2/><rec><var/></rec>", "All", "t", "2", "tt", "tt", "tt", "Default, DateTime", "2", null)]
        [NUnit.Framework.TestCaseAttribute("2", "<ww/><min/><rec><minss/></rec>", "All", "m", "1", "[[rec(*).minss]],[[rec().minss]],[[min]],m,M,MM,MMMM,mm,MM", "MMMM", "MMMM", "Default, DateTime", "4", null)]
        [NUnit.Framework.TestCaseAttribute("3", "<ww/><min/><rec><minss/></rec>", "All", "text[[m]]", "7", "[[rec(*).minss]],[[rec().minss]],[[min]]", "[[rec().minss]]", "text[[rec().minss]]", "Default, DateTime", "19", null)]
        [NUnit.Framework.TestCaseAttribute("5", "<ww/><min/><rec><minss/></rec>", "All", "text mm", "7", "MM,MMMM,mm,MM", "mm", "text mm", "Default, DateTime", "7", null)]
        [NUnit.Framework.TestCaseAttribute("6", "<ww/><min/><rec><minss/></rec>", "All", "text MMMM", "9", "MMMM", "MMMM", "text MMMM", "Default, DateTime", "9", null)]
        [NUnit.Framework.TestCaseAttribute("7", "<ww/><min/><rec><minss/></rec>", "All", "text mute", "6", "[[rec(*).minss]],[[rec().minss]],[[min]],m,M,MM,MMMM,mm,MM", "m", "text m", "Default, DateTime", "6", null)]
        [NUnit.Framework.TestCaseAttribute("8", "<ww/><min/><rec><minss/></rec>", "All", "text mute", "6", "[[rec(*).minss]],[[rec().minss]],[[min]],m,M,MM,MMMM,mm,MM", "[[min]]", "text [[min]]", "Default, DateTime", "12", null)]
        [NUnit.Framework.TestCaseAttribute("9", "<ww/><min/><rec><minss/></rec>", "All", "[[min]]y", "8", "yy,yyyy,y,yyy", "yy", "[[min]]yy", "Default, DateTime", "9", null)]
        [NUnit.Framework.TestCaseAttribute("10", "<var/><var2/><rec><var/></rec>", "All", "K", "1", "K", "K", "K", "Default, DateTime", "1", null)]
        [NUnit.Framework.TestCaseAttribute("11", "<ww/><min/><rec><minss/></rec>", "All", "HH", "1", "HH,H,h,hh", "HH", "HH", "Default, DateTime", "2", null)]
        [NUnit.Framework.TestCaseAttribute("12", "<ww/><min/><rec><minss/></rec>", "All", "dddd", "4", "dddd", "dddd", "dddd", "Default, DateTime", "4", null)]
        [NUnit.Framework.TestCaseAttribute("13", "<ww/><min/><rec><minss/></rec>", "All", "text gg", "6", "gg", "gg", "text gg", "Default, DateTime", "7", null)]
        [NUnit.Framework.TestCaseAttribute("14", "<ww/><min/><rec><minss/></rec>", "All", "text FFFFFF", "9", "FFFFFF,FFFF,FFFFF,FFFFFFF", "FFFFFF", "text FFFFFF", "Default, DateTime", "11", null)]
        public virtual void InsertForAllFilterTypeAndDateTimeProvider(string testName, string varlist, string filterType, string input, string index, string dropDownList, string option, string result, string provider, string caretposition, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert for All FilterType and DateTime Provider", exampleTags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given(string.Format("I have the following variable list \'{0}\'", varlist), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.And(string.Format("the filter type is \'{0}\'", filterType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.And(string.Format("the current text in the textbox is \'{0}\'", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And(string.Format("the cursor is at index \'{0}\'", index), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And(string.Format("the provider used is \'{0}\'", provider), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.And(string.Format("the drop down list as \'{0}\'", dropDownList), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.When(string.Format("I select the following option \'{0}\'", option), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
 testRunner.Then(string.Format("the result text should be \'{0}\'", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 15
 testRunner.And(string.Format("the caret position will be \'{0}\'", caretposition), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert for All FilterType and File Provider")]
        [NUnit.Framework.TestCaseAttribute("1", "", "<myfile/><file><name/></file>", "All", "c:\\[[fil", "8", "[[file(*).name]],[[file(*)]],[[file().name]],[[file()]],[[myfile]]", "[[myfile]]", "c:\\[[myfile]]", "Default, File", "13", null)]
        [NUnit.Framework.TestCaseAttribute("2", "", "<myfile/><file><name/></file>", "All", "c:\\[[fil]]", "8", "[[file(*).name]],[[file(*)]],[[file().name]],[[file()]],[[myfile]]", "[[myfile]]", "c:\\[[myfile]]", "Default, File", "13", null)]
        [NUnit.Framework.TestCaseAttribute("3", "", "<myfile/><file><name/></file>", "All", "c:\\[[fil]]", "8", "[[file(*).name]],[[file(*)]],[[file().name]],[[file()]],[[myfile]]", "[[file().name]]", "c:\\[[file().name]]", "Default, File", "18", null)]
        [NUnit.Framework.TestCaseAttribute("4", "", "<myfile/><file><name/></file>", "All", "c:\\[[myfile]][[", "13", "", "", "c:\\[[myfile]][[", "Default, File", "13", null)]
        [NUnit.Framework.TestCaseAttribute("5", "", "<myfile/><file><name/></file>", "All", "c:\\[[myfile]][[fil", "18", "[[file(*).name]],[[file(*)]],[[file().name]],[[file()]],[[myfile]]", "[[file().name]]", "c:\\[[myfile]][[file().name]]", "Default, File", "28", null)]
        [NUnit.Framework.TestCaseAttribute("6", "", "<myfile/><file><name/></file>", "All", "[[myfile]].", "11", "[[file(*).name]],[[file().name]]", "", "[[myfile]].", "Default, File", "11", null)]
        [NUnit.Framework.TestCaseAttribute("7", "c:\\,c:\\FolderA,c:\\FolderA\\FileA.txt", "", "All", "del c", "5", "c:\\,c:\\FolderA,c:\\FolderA\\FileA.txt", "c:\\FolderA\\FileA.txt", "del c:\\FolderA\\FileA.txt", "Default, File", "24", null)]
        [NUnit.Framework.TestCaseAttribute("9", "c:\\,c:\\FolderA,c:\\FolderA\\FileA.txt", "", "All", "del c:\\FolderA c", "16", "c:\\,c:\\FolderA,c:\\FolderA\\FileA.txt", "c:\\FolderA\\FileA.txt", "del c:\\FolderA c:\\FolderA\\FileA.txt", "Default, File", "35", null)]
        [NUnit.Framework.TestCaseAttribute("10", "c:\\,c:\\FolderA,c:\\FolderA\\FileA.txt", "<c/><cd/>", "All", "del c:\\FolderA c", "16", "[[c]],[[cd]],c:\\,c:\\FolderA,c:\\FolderA\\FileA.txt", "[[cd]]", "del c:\\FolderA [[cd]]", "Default, File", "21", null)]
        [NUnit.Framework.TestCaseAttribute("11", "c:\\,c:\\FolderA,c:\\FolderA\\FileA.txt", "<c/><cd/>", "All", "del c:\\FolderA\\", "15", "c:\\FolderA\\FileA.txt", "c:\\FolderA\\FileA.txt", "del c:\\FolderA\\FileA.txt", "Default, File", "24", null)]
        public virtual void InsertForAllFilterTypeAndFileProvider(string testName, string pathStructure, string varlist, string filterType, string input, string index, string dropDownList, string option, string result, string provider, string caretposition, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert for All FilterType and File Provider", exampleTags);
#line 32
this.ScenarioSetup(scenarioInfo);
#line 33
 testRunner.Given(string.Format("I have the following variable list \'{0}\'", varlist), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 34
 testRunner.And(string.Format("the file path structure is \'{0}\'", pathStructure), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.And(string.Format("the filter type is \'{0}\'", filterType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
 testRunner.And(string.Format("the current text in the textbox is \'{0}\'", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
 testRunner.And(string.Format("the cursor is at index \'{0}\'", index), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.And(string.Format("the provider used is \'{0}\'", provider), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.And(string.Format("the drop down list as \'{0}\'", dropDownList), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.When(string.Format("I select the following option \'{0}\'", option), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 41
 testRunner.Then(string.Format("the result text should be \'{0}\'", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 42
 testRunner.And(string.Format("the caret position will be \'{0}\'", caretposition), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert for All FilterType and Calculate Provider")]
        [NUnit.Framework.TestCaseAttribute("1", "<att/><sum><b/></sum>", "All", "at", "2", "[[att]],atan,atan2,atanh", "atan", "atan", "Default, Calculate", "4", null)]
        [NUnit.Framework.TestCaseAttribute("2", "<att/><sum><b/></sum>", "All", "tan(at", "6", "[[att]],atan,atan2,atanh", "[[att]]", "tan([[att]]", "Default, Calculate", "11", null)]
        [NUnit.Framework.TestCaseAttribute("3", "<att/><sum><b/></sum>", "All", "tan([[at", "8", "[[att]]", "[[att]]", "tan([[att]]", "Default, Calculate", "11", null)]
        [NUnit.Framework.TestCaseAttribute("4", "<att/><sum><b/></sum>", "All", "tan([[at]]", "8", "[[att]]", "[[att]]", "tan([[att]]", "Default, Calculate", "11", null)]
        [NUnit.Framework.TestCaseAttribute("5", "<att/><sum><b/></sum>", "All", "tan([[at]])", "8", "[[att]]", "[[att]]", "tan([[att]])", "Default, Calculate", "11", null)]
        [NUnit.Framework.TestCaseAttribute("6", "<att/><sum><b/></sum>", "All", "tan([[at]])", "11", "", "", "tan([[at]])", "Default, Calculate", "11", null)]
        [NUnit.Framework.TestCaseAttribute("7", "<a/><b/><c/>", "All", "=[[b]]+b", "8", "[[b]],bin2dec,bin2hex,bin2oct", "[[b]]", "=[[b]]+[[b]]", "Default, Calculate", "12", null)]
        [NUnit.Framework.TestCaseAttribute("8", "<a/><att/><sum><b/></sum>", "All", "tan([[at]]) tan([[a]])", "8", "[[att]]", "[[att]]", "tan([[att]]) tan([[a]])", "Default, Calculate", "11", null)]
        public virtual void InsertForAllFilterTypeAndCalculateProvider(string testName, string varlist, string filterType, string input, string index, string dropDownList, string option, string result, string provider, string caretposition, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert for All FilterType and Calculate Provider", exampleTags);
#line 56
this.ScenarioSetup(scenarioInfo);
#line 57
 testRunner.Given(string.Format("I have the following variable list \'{0}\'", varlist), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 58
 testRunner.And(string.Format("the filter type is \'{0}\'", filterType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
 testRunner.And(string.Format("the current text in the textbox is \'{0}\'", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
 testRunner.And(string.Format("the cursor is at index \'{0}\'", index), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
 testRunner.And(string.Format("the provider used is \'{0}\'", provider), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
 testRunner.And(string.Format("the drop down list as \'{0}\'", dropDownList), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
 testRunner.When(string.Format("I select the following option \'{0}\'", option), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 64
 testRunner.Then(string.Format("the result text should be \'{0}\'", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 65
 testRunner.And(string.Format("the caret position will be \'{0}\'", caretposition), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Recset only has no errors for valid variable indexes")]
        [NUnit.Framework.TestCaseAttribute("1", "<x/><sum><b/></sum><mus><b/></mus>", "true", "[[sum([[x]])]]", null)]
        [NUnit.Framework.TestCaseAttribute("1", "<x/><sum><b/></sum><mus><b/></mus>", "true", "[[sum([[assc]])]]", null)]
        public virtual void RecsetOnlyHasNoErrorsForValidVariableIndexes(string testName, string varlist, string expectError, string input, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Recset only has no errors for valid variable indexes", exampleTags);
#line 77
this.ScenarioSetup(scenarioInfo);
#line 78
 testRunner.Given(string.Format("I have the following variable list \'{0}\'", varlist), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 79
 testRunner.And("the filter type is \'RecordsetsOnly\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
 testRunner.And(string.Format("the current text in the textbox is \'{0}\'", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
 testRunner.And("the cursor is at index \'11\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
 testRunner.And("the provider used is \'Default\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
 testRunner.Then(string.Format("the result has \'{0}\' errors", expectError), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert for All FilterType and Default Provider")]
        [NUnit.Framework.TestCaseAttribute("1", "[[var]],[[var2]],[[rec()]],[[rec().var]],[[rec().var2]]", "All", "text var", "8", "[[var]],[[var2]],[[rec().var]],[[rec().var2]]", "[[var]]", "text [[var]]", "Default", "12", null)]
        [NUnit.Framework.TestCaseAttribute("2", "[[var]],[[var2]],[[rec()]],[[rec().var2]],[[rec().var]]", "All", "text[[var", "9", "[[var]],[[var2]],[[rec().var]],[[rec().var2]]", "[[var2]]", "text[[var2]]", "Default", "12", null)]
        [NUnit.Framework.TestCaseAttribute("3", "[[var]],[[var2]],[[rec()]],[[rec().var2]],[[rec().var]]", "All", "text[[rec().var]]", "15", "[[rec().var]],[[rec().var2]]", "[[rec().var2]]", "text[[rec().var2]]", "Default", "18", null)]
        [NUnit.Framework.TestCaseAttribute("4", "[[var]],[[var2]],[[rec()]],[[rec().var2]],[[rec().var]]", "All", "[[", "2", "[[var]],[[var2]],[[rec().var]],[[rec().var2]]", "[[var2]]", "[[var2]]", "Default", "8", null)]
        [NUnit.Framework.TestCaseAttribute("5", "[[var]],[[var2]],[[rec()]],[[rec().var2]],[[rec().var]]", "All", "text[[rec().[[var", "17", "[[var]],[[var2]]", "[[var2]]", "text[[rec().[[var2]]", "Default", "20", null)]
        [NUnit.Framework.TestCaseAttribute("6", "[[var]],[[var2]],[[rec()]],[[rec().var2]],[[rec().var]]", "All", "text[[rec().[[var]]", "17", "[[var]],[[var2]]", "[[var2]]", "text[[rec().[[var2]]", "Default", "20", null)]
        [NUnit.Framework.TestCaseAttribute("7", "[[var]],[[var2]],[[rec()]],[[rec().var2]],[[rec().var]]", "All", "text[[rec().[[var]]]]", "17", "[[var]],[[var2]]", "[[var2]]", "text[[rec().[[var2]]]]", "Default", "20", null)]
        [NUnit.Framework.TestCaseAttribute("8", "[[var]],[[var2]],[[rec()]],[[rec().var2]],[[rec(*).var2]],[[rec().var]],[[rec(*)." +
            "var]]", "All", "[[var]]v", "8", "[[var]],[[var2]],[[rec().var]],[[rec(*).var]],[[rec().var2]],[[rec(*).var2]]", "[[rec(*).var]]", "[[var]][[rec(*).var]]", "Default", "21", null)]
        [NUnit.Framework.TestCaseAttribute("9", "[[var]],[[var2]],[[rec()]],[[rec().var2]],[[rec().var]]", "All", "[[var]][[", "9", "[[var]],[[var2]],[[rec().var]],[[rec().var2]]", "[[rec().var]]", "[[var]][[rec().var]]", "Default", "20", null)]
        [NUnit.Framework.TestCaseAttribute("10", "[[var]],[[var2]],[[rec()]],[[rec().var2]],[[rec(*).var2]],[[rec().var]],[[rec(*)." +
            "var]]", "All", "[[var]][[var", "12", "[[var]],[[var2]],[[rec().var]],[[rec(*).var]],[[rec().var2]],[[rec(*).var2]]", "[[rec(*).var2]]", "[[var]][[rec(*).var2]]", "Default", "22", null)]
        [NUnit.Framework.TestCaseAttribute("11", "[[var]],[[var2]],[[rec()]],[[rec().var2]],[[rec(*).var2]],[[rec().var]],[[rec(*)." +
            "var]]", "All", "[[var]][[var]]", "12", "[[var]],[[var2]],[[rec().var]],[[rec(*).var]],[[rec().var2]],[[rec(*).var2]]", "[[rec(*).var2]]", "[[var]][[rec(*).var2]]", "Default", "22", null)]
        [NUnit.Framework.TestCaseAttribute("12", "[[var]],[[var2]],[[rec()]],[[rec().var2]],[[rec().var]]", "All", "[[var]]", "7", "", "", "[[var]]", "Default", "7", null)]
        [NUnit.Framework.TestCaseAttribute("13", "[[var]],[[var2]],[[rec()]],[[rec().var2]],[[rec().var]]", "All", "[[var]] text", "13", "", "", "[[var]] text", "Default", "13", null)]
        [NUnit.Framework.TestCaseAttribute("14", "[[var]],[[var2]],[[rec()]],[[rec().var2]],[[rec().var]]", "All", "text[[var2]]text", "10", "[[var2]],[[rec().var2]]", "[[rec().var2]]", "text[[rec().var2]]text", "Default", "18", null)]
        [NUnit.Framework.TestCaseAttribute("15", "[[var]],[[var2]],[[rec()]],[[rec().var2]],[[rec().var]]", "All", "r", "1", "[[var]],[[var2]],[[rec().var]],[[rec().var2]]", "[[rec().var2]]", "[[rec().var2]]", "Default", "14", null)]
        [NUnit.Framework.TestCaseAttribute("16", "[[var]],[[var2]],[[rec()]],[[rec().var2]],[[rec().var]]", "All", "[[rec([[va]]).var]]", "10", "[[var]],[[var2]],[[rec().var]],[[rec().var2]]", "[[var]]", "[[rec([[var]]).var]]", "Default", "13", null)]
        [NUnit.Framework.TestCaseAttribute("17", "[[var]],[[var2]],[[rec()]],[[rec().var2]],[[rec().var]]", "All", "[[[[a]]]]", "5", "[[var]],[[var2]],[[rec().var]],[[rec().var2]]", "[[var]]", "[[var]]]]", "Default", "7", null)]
        [NUnit.Framework.TestCaseAttribute("18", "[[var]],[[var2]],[[rec()]],[[rec().var2]],[[rec().var]]", "All", "[[", "2", "[[var]],[[var2]],[[rec().var]],[[rec().var2]]", "[[var]]", "[[var]]", "Default", "7", null)]
        public virtual void InsertForAllFilterTypeAndDefaultProvider(string testName, string varlist, string filterType, string input, string index, string dropDownList, string option, string result, string provider, string caretposition, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert for All FilterType and Default Provider", exampleTags);
#line 89
this.ScenarioSetup(scenarioInfo);
#line 90
 testRunner.Given(string.Format("I have the following intellisense options \'{0}\'", varlist), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 91
 testRunner.And(string.Format("the filter type is \'{0}\'", filterType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
 testRunner.And(string.Format("the current text in the textbox is \'{0}\'", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
 testRunner.And(string.Format("the cursor is at index \'{0}\'", index), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
 testRunner.And(string.Format("the provider used is \'{0}\'", provider), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
 testRunner.And(string.Format("the suggestion list as \'{0}\'", dropDownList), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
 testRunner.When(string.Format("I select the following string option \'{0}\'", option), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 97
 testRunner.Then(string.Format("the result text should be \"{0}\" with caret position will be \'{1}\'", result, caretposition), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert for RecordsetsOnly FilterType and Default Provider")]
        [NUnit.Framework.TestCaseAttribute("1", "[[b]],[[sum().b]],[[mus().b]],[[sum()]],[[mus()]]", "RecordsetsOnly", "u", "1", "[[sum()]],[[mus()]]", "[[sum()]]", "[[sum()]]", "Default", "9", null)]
        [NUnit.Framework.TestCaseAttribute("2", "[[b]],[[sum().b]],[[mus().b]],[[sum()]],[[mus()]]", "RecordsetsOnly", "b", "1", "", "", "b", "Default", "1", null)]
        [NUnit.Framework.TestCaseAttribute("3", "[[b]],[[sum().b]],[[mus().b]],[[sum()]],[[mus()]]", "RecordsetsOnly", "[[()]]", "3", "", "", "[[()]]", "Default", "3", null)]
        [NUnit.Framework.TestCaseAttribute("4", "[[b]],[[sum().b]],[[mus().b]],[[sum()]],[[mus()]]", "RecordsetsOnly", "[[sum()]] s", "11", "[[sum()]],[[mus()]]", "", "[[sum()]] s", "Default", "11", null)]
        [NUnit.Framework.TestCaseAttribute("5", "[[b]],[[sum().b]],[[mus().b]],[[sum()]],[[mus()]]", "RecordsetsOnly", "[[sum()]] [[", "12", "[[sum()]],[[mus()]]", "[[mus()]]", "[[sum()]] [[mus()]]", "Default", "19", null)]
        [NUnit.Framework.TestCaseAttribute("6", "[[b]],[[sum().b]],[[mus().b]],[[sum()]],[[mus()]]", "RecordsetsOnly", "rec s", "5", "[[sum()]],[[mus()]]", "[[mus()]]", "rec [[mus()]]", "Default", "13", null)]
        [NUnit.Framework.TestCaseAttribute("7", "[[b]],[[sum().b]],[[mus().b]],[[sum()]],[[mus()]],[[sum().ba]]", "RecordsetFields", "[[sum().b]]", "9", "[[sum().b]],[[sum().ba]]", "[[sum().ba]]", "[[sum().ba]]", "Default", "12", null)]
        [NUnit.Framework.TestCaseAttribute("8", "[[b]],[[sum().b]],[[mus().b]],[[sum()]],[[mus()]],[[sum().ba]]", "All", "[[sum(b).b]]", "7", "[[b]],[[sum().b]],[[sum().ba]],[[mus().b]]", "[[b]]", "[[sum([[b]]).b]]", "Default", "11", null)]
        [NUnit.Framework.TestCaseAttribute("9", "[[ba]],[[b]],[[sum().b]],[[mus().b]],[[sum()]],[[mus()]],[[sum().ba]]", "All", "[[sum([[b]]).b]]", "14", "[[sum().b]],[[sum().ba]]", "[[sum().ba]]", "[[sum().ba]]", "Default", "12", null)]
        [NUnit.Framework.TestCaseAttribute("10", "[[ba]],[[b]],[[sum().b]],[[mus().b]],[[sum()]],[[mus()]],[[sum().ba]]", "All", "[[sum([[b]]).b]]", "14", "[[sum().b]],[[sum().ba]]", "[[sum().b]]", "[[sum().b]]", "Default", "11", null)]
        [NUnit.Framework.TestCaseAttribute("11", "[[b]],[[sum().b]],[[mus().b]],[[sum()]],[[mus()]]", "RecordsetsOnly", "u u", "3", "[[sum()]],[[mus()]]", "[[sum()]]", "u [[sum()]]", "Default", "11", null)]
        [NUnit.Framework.TestCaseAttribute("12", "[[b]],[[sum().b]],[[mus().b]],[[sum()]],[[mus()]]", "RecordsetsOnly", "[[sum()]] s", "11", "[[sum()]],[[mus()]]", "[[mus()]]", "[[sum()]] [[mus()]]", "Default", "19", null)]
        [NUnit.Framework.TestCaseAttribute("13", "[[b]],[[sum().b]],[[mus().b]],[[sum()]],[[mus()]],[[sum().ba]]", "RecordsetFields", "[[sum().b]][[sum().b]]", "20", "[[sum().b]],[[sum().ba]],[[mus().b]]", "[[sum().ba]]", "[[sum().b]][[sum().ba]]", "Default", "23", null)]
        [NUnit.Framework.TestCaseAttribute("14", "[[ba]],[[b]],[[sum().b]],[[mus().b]],[[sum()]],[[mus()]],[[sum().ba]]", "All", "[[sum().b]]", "9", "[[sum().b]],[[sum().ba]]", "[[sum().ba]]", "[[sum().ba]]", "Default", "12", null)]
        [NUnit.Framework.TestCaseAttribute("15", "[[ba]],[[b]],[[sum().b]],[[mus().b]],[[sum()]],[[mus()]],[[sum().ba]]", "All", "[[sum().b]]b", "12", "[[b]],[[ba]],[[sum().b]],[[sum().ba]],[[mus().b]]", "[[ba]]", "[[sum().b]][[ba]]", "Default", "17", null)]
        [NUnit.Framework.TestCaseAttribute("16", "[[b]],[[sum().b]],[[mus().b]],[[sum()]],[[mus()]]", "RecordsetsOnly", "=u", "2", "[[sum()]],[[mus()]]", "[[sum()]]", "=[[sum()]]", "Default", "10", null)]
        public virtual void InsertForRecordsetsOnlyFilterTypeAndDefaultProvider(string testName, string varlist, string filterType, string input, string index, string dropDownList, string option, string result, string provider, string caretposition, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert for RecordsetsOnly FilterType and Default Provider", exampleTags);
#line 119
this.ScenarioSetup(scenarioInfo);
#line 120
 testRunner.Given(string.Format("I have the following intellisense options \'{0}\'", varlist), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 121
  testRunner.And(string.Format("the filter type is \'{0}\'", filterType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
 testRunner.And(string.Format("the current text in the textbox is \'{0}\'", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
 testRunner.And(string.Format("the cursor is at index \'{0}\'", index), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
 testRunner.And(string.Format("the provider used is \'{0}\'", provider), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 125
 testRunner.And(string.Format("the suggestion list as \'{0}\'", dropDownList), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
 testRunner.When(string.Format("I select the following string option \'{0}\'", option), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 127
 testRunner.Then(string.Format("the result text should be \"{0}\" with caret position will be \'{1}\'", result, caretposition), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert for Json FilterType and Default Provider Case Insensitive")]
        [NUnit.Framework.TestCaseAttribute("1", "[[@Person]],[[@Person.name]]", "JsonObject", "@P", "2", "[[@Person.name]],[[@Person]]", "[[@Person.name]]", "[[@Person.name]]", "Default", "16", null)]
        [NUnit.Framework.TestCaseAttribute("2", "[[@Person]],[[@Person.name]]", "JsonObject", "[[", "3", "[[@Person.name]],[[@Person]]", "[[@Person.name]]", "[[@Person.name]]", "Default", "16", null)]
        [NUnit.Framework.TestCaseAttribute("3", "[[@Person]],[[@Person.name]]", "JsonObject", "@PERSON.", "8", "[[@Person.name]]", "[[@Person.name]]", "[[@Person.name]]", "Default", "16", null)]
        [NUnit.Framework.TestCaseAttribute("4", "[[@Person]],[[@Person.name]]", "JsonObject", "[[@PERSON.", "10", "[[@Person.name]]", "[[@Person.name]]", "[[@Person.name]]", "Default", "16", null)]
        [NUnit.Framework.TestCaseAttribute("5", "[[@Person]],[[@PERSON.name]]", "JsonObject", "[[@person", "9", "[[@PERSON.name]]", "[[@PERSON.name]]", "[[@PERSON.name]]", "Default", "16", null)]
        public virtual void InsertForJsonFilterTypeAndDefaultProviderCaseInsensitive(string testName, string varlist, string filterType, string input, string index, string dropDownList, string option, string result, string provider, string caretposition, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert for Json FilterType and Default Provider Case Insensitive", exampleTags);
#line 147
 this.ScenarioSetup(scenarioInfo);
#line 148
 testRunner.Given(string.Format("I have the following intellisense options \'{0}\'", varlist), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 149
 testRunner.And(string.Format("the filter type is \'{0}\'", filterType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
 testRunner.And(string.Format("the current text in the textbox is \'{0}\'", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 151
 testRunner.And(string.Format("the cursor is at index \'{0}\'", index), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 152
 testRunner.And(string.Format("the provider used is \'{0}\'", provider), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 153
 testRunner.And(string.Format("the suggestion list as \'{0}\'", dropDownList), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 154
 testRunner.When(string.Format("I select the following string option \'{0}\'", option), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 155
 testRunner.Then(string.Format("the result text should be \"{0}\" with caret position will be \'{1}\'", result, caretposition), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert for Json FilterType and Default Provider")]
        [NUnit.Framework.TestCaseAttribute("1", "[[@Person]],[[@Person.name]]", "JsonObject", "@P", "2", "[[@Person.name]],[[@Person]]", "[[@Person.name]]", "[[@Person.name]]", "Default", "16", null)]
        [NUnit.Framework.TestCaseAttribute("2", "[[@Person]],[[@Person.name]]", "JsonObject", "[[", "3", "[[@Person.name]],[[@Person]]", "[[@Person.name]]", "[[@Person.name]]", "Default", "16", null)]
        [NUnit.Framework.TestCaseAttribute("3", "[[@Person]],[[@Person.name]]", "JsonObject", "@Person.", "8", "[[@Person.name]]", "[[@Person.name]]", "[[@Person.name]]", "Default", "16", null)]
        [NUnit.Framework.TestCaseAttribute("4", "[[@Person]],[[@Person.name]]", "JsonObject", "[[@Person.", "10", "[[@Person.name]]", "[[@Person.name]]", "[[@Person.name]]", "Default", "16", null)]
        [NUnit.Framework.TestCaseAttribute("5", "[[@Person]],[[@Person.name]]", "JsonObject", "[[@Person.name", "15", "[[@Person.name]]", "[[@Person.name]]", "[[@Person.name]]", "Default", "16", null)]
        [NUnit.Framework.TestCaseAttribute("6", "[[@Person]],[[@Person.name]]", "JsonObject", "name", "4", "[[@Person.name]]", "[[@Person.name]]", "[[@Person.name]]", "Default", "16", null)]
        [NUnit.Framework.TestCaseAttribute("7", "[[@Person]],[[@Person.name]]", "JsonObject", "[", "1", "[[@Person.name]],[[@Person]]", "[[@Person.name]]", "[[@Person.name]]", "Default", "16", null)]
        [NUnit.Framework.TestCaseAttribute("8", "[[@Person]],[[@Person.name]]", "JsonObject", "rson", "3", "[[@Person.name]],[[@Person]]", "[[@Person.name]]", "[[@Person.name]]", "Default", "16", null)]
        [NUnit.Framework.TestCaseAttribute("9", "[[@Person]],[[@Person.name]],[[@Person.Age]]", "JsonObject", "@P", "2", "[[@Person.Age]],[[@Person.name]],[[@Person]]", "[[@Person.name]]", "[[@Person.name]]", "Default", "16", null)]
        [NUnit.Framework.TestCaseAttribute("10", "[[@Person]],[[@Person.name]],[[@Person.Age]]", "JsonObject", "@P", "2", "[[@Person.Age]],[[@Person.name]],[[@Person]]", "[[@Person.Age]]", "[[@Person.Age]]", "Default", "15", null)]
        [NUnit.Framework.TestCaseAttribute("11", "[[@Person]],[[@Person.name]],[[@Person.Age]]", "JsonObject", "[[", "2", "[[@Person.Age]],[[@Person.name]],[[@Person]]", "[[@Person.Age]]", "[[@Person.Age]]", "Default", "15", null)]
        [NUnit.Framework.TestCaseAttribute("12", "[[@Person]],[[@Person.name]],[[@Person.Age]]", "JsonObject", "[[", "2", "[[@Person.Age]],[[@Person.name]],[[@Person]]", "[[@Person.name]]", "[[@Person.name]]", "Default", "16", null)]
        [NUnit.Framework.TestCaseAttribute("14", "[[@Person]],[[@Person.name]],[[@Person.Age]]", "JsonObject", "@Person.", "8", "[[@Person.Age]],[[@Person.name]]", "[[@Person.name]]", "[[@Person.name]]", "Default", "16", null)]
        [NUnit.Framework.TestCaseAttribute("15", "[[@Person]],[[@Person.name]],[[@Person.Age]]", "JsonObject", "@Person.", "8", "[[@Person.Age]],[[@Person.name]]", "[[@Person.Age]]", "[[@Person.Age]]", "Default", "15", null)]
        [NUnit.Framework.TestCaseAttribute("16", "[[@Person]],[[@Person.name]],[[@Person.Age]]", "JsonObject", "[[@Person.", "10", "[[@Person.Age]],[[@Person.name]]", "[[@Person.name]]", "[[@Person.name]]", "Default", "16", null)]
        [NUnit.Framework.TestCaseAttribute("17", "[[@Person]],[[@Person.name]],[[@Person.Age]]", "JsonObject", "[[@Person.", "10", "[[@Person.name]],[[@Person.Age]]", "[[@Person.Age]]", "[[@Person.Age]]", "Default", "15", null)]
        [NUnit.Framework.TestCaseAttribute("18", "[[@Person]],[[@Person.name]],[[@Person.Age]]", "JsonObject", "[[@Person.name", "15", "[[@Person.name]]", "[[@Person.name]]", "[[@Person.name]]", "Default", "16", null)]
        [NUnit.Framework.TestCaseAttribute("19", "[[@Person]],[[@Person.name]],[[@Person.Age]]", "JsonObject", "[[@Person.Age", "10", "[[@Person.Age]]", "[[@Person.Age]]", "[[@Person.Age]]", "Default", "15", null)]
        [NUnit.Framework.TestCaseAttribute("20", "[[@Person]],[[@Person.name]],[[@Person.Age]]", "JsonObject", "name", "4", "[[@Person.name]]", "[[@Person.name]]", "[[@Person.name]]", "Default", "16", null)]
        [NUnit.Framework.TestCaseAttribute("21", "[[@Person]],[[@Person.name]],[[@Person.Age]]", "JsonObject", "Age", "3", "[[@Person.Age]]", "[[@Person.Age]]", "[[@Person.Age]]", "Default", "15", null)]
        [NUnit.Framework.TestCaseAttribute("22", "[[@Person]],[[@Person.name]],[[@Person.Age]],[[@Person.Child.Name]]", "JsonObject", "Name", "4", "[[@Person.Child.Name]]", "[[@Person.Child.Name]]", "[[@Person.Child.Name]]", "Default", "22", null)]
        [NUnit.Framework.TestCaseAttribute("23", "[[@Person]],[[@Person.name]],[[@Person.Age]],[[@Person.Child.Name]]", "JsonObject", "Name", "1", "[[@Person.Child.Name]]", "[[@Person.Child.Name]]", "[[@Person.Child.Name]]", "Default", "22", null)]
        [NUnit.Framework.TestCaseAttribute("25", "[[@Person]],[[@Person.name]],[[@Person.Age]],[[@Person.Child.Name]]", "JsonObject", "Junk P", "6", "[[@Person.Age]],[[@Person.name]],[[@Person]],[[@Person.Child.Name]]", "[[@Person.Child.Name]]", "Junk [[@Person.Child.Name]]", "Default", "27", null)]
        [NUnit.Framework.TestCaseAttribute("26", "[[@Person]],[[@Person.name]],[[@Person.Age]],[[@Person.Child.Name]]", "JsonObject", "[[Junk]] P", "10", "[[@Person.Age]],[[@Person.name]],[[@Person]],[[@Person.Child.Name]]", "[[@Person.Child.Name]]", "[[Junk]] [[@Person.Child.Name]]", "Default", "31", null)]
        [NUnit.Framework.TestCaseAttribute("28", "[[@Person]],[[@Person.name]],[[@Person.Age]],[[@Person.Child.Name]]", "JsonObject", "]] P", "4", "[[@Person.Age]],[[@Person.name]],[[@Person]],[[@Person.Child.Name]]", "[[@Person.Child.Name]]", "]] [[@Person.Child.Name]]", "Default", "25", null)]
        [NUnit.Framework.TestCaseAttribute("29", "[[@Person]],[[@Person.name]],[[@Person.Age]],[[@Person.Child.Name]]", "JsonObject", "( P", "3", "[[@Person.Age]],[[@Person.name]],[[@Person]],[[@Person.Child.Name]]", "[[@Person.Child.Name]]", "( [[@Person.Child.Name]]", "Default", "24", null)]
        [NUnit.Framework.TestCaseAttribute("30", "[[@Person]],[[@Person.name]],[[@Person.Age]],[[@Person.Child.Name]]", "JsonObject", ") P", "3", "[[@Person.Age]],[[@Person.name]],[[@Person]],[[@Person.Child.Name]]", "[[@Person.Child.Name]]", ") [[@Person.Child.Name]]", "Default", "24", null)]
        [NUnit.Framework.TestCaseAttribute("35", "[[@Person]],[[@Person.name]],[[@Person.Age]],[[@Person.Child.Name]]", "JsonObject", ". P [[", "3", "[[@Person.Age]],[[@Person.name]],[[@Person.Child.Name]]", "[[@Person.Child.Name]]", ". [[@Person.Child.Name]] [[", "Default", "24", null)]
        [NUnit.Framework.TestCaseAttribute("39", "[[@Person]],[[@Person.Childs(*).name]]", "JsonObject", "[[P", "3", "[[@Person]],[[@Person.Childs(*).name]]", "[[@Person.Childs(*).name]]", "[[@Person.Childs(*).name]]", "Default", "26", null)]
        [NUnit.Framework.TestCaseAttribute("41", "[[@Person]],[[@Person.Childs(*).name]],[[@Person.Childs().name]]", "JsonObject", "[[@Person.Childs(*", "19", "[[@Person.Childs(*).name]]", "[[@Person.Childs(*).name]]", "[[@Person.Childs(*).name]]", "Default", "26", null)]
        [NUnit.Framework.TestCaseAttribute("42", "[[@Person]],[[@Person.Childs(*).name]],[[@Person.Childs().name]]", "JsonObject", "[[@Person.Childs([[", "19", "[[@Person.Childs(*).name]],[[@Person.Childs().name]]", "[[@Person]]", "[[@Person.Childs([[@Person]]", "Default", "28", null)]
        [NUnit.Framework.TestCaseAttribute("43", "[[@Person]],[[@Person.Childs(*).name]],[[@Person.Childs().name]]", "JsonObject", "[[@Person.Childs([[", "19", "[[@Person.Childs(*).name]],[[@Person.Childs().name]]", "[[@Person.Childs(*).name]]", "[[@Person.Childs([[@Person.Childs(*).name]]", "Default", "43", null)]
        [NUnit.Framework.TestCaseAttribute("44", "[[@Person]],[[@Person.Childs(*).name]],[[@Person.Childs().name]]", "JsonObject", "@", "1", "[[@Person.Childs(*).name]],[[@Person.Childs().name]]", "[[@Person.Childs(*).name]]", "[[@Person.Childs(*).name]]", "Default", "26", null)]
        [NUnit.Framework.TestCaseAttribute("45", "[[@Person]],[[@Person.Childs(*).name]],[[@Person.Childs().name]]", "JsonObject", "[[@", "3", "[[@Person.Childs(*).name]],[[@Person.Childs().name]]", "[[@Person.Childs(*).name]]", "[[@Person.Childs(*).name]]", "Default", "26", null)]
        public virtual void InsertForJsonFilterTypeAndDefaultProvider(string testName, string varlist, string filterType, string input, string index, string dropDownList, string option, string result, string provider, string caretposition, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert for Json FilterType and Default Provider", exampleTags);
#line 164
this.ScenarioSetup(scenarioInfo);
#line 165
 testRunner.Given(string.Format("I have the following intellisense options \'{0}\'", varlist), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 166
  testRunner.And(string.Format("the filter type is \'{0}\'", filterType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 167
 testRunner.And(string.Format("the current text in the textbox is \'{0}\'", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 168
 testRunner.And(string.Format("the cursor is at index \'{0}\'", index), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 169
 testRunner.And(string.Format("the provider used is \'{0}\'", provider), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 170
 testRunner.And(string.Format("the suggestion list as \'{0}\'", dropDownList), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 171
 testRunner.When(string.Format("I select the following string option \'{0}\'", option), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 172
 testRunner.Then(string.Format("the result text should be \"{0}\" with caret position will be \'{1}\'", result, caretposition), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert for RecordsetFields FilterType and Default Provider")]
        [NUnit.Framework.TestCaseAttribute("1", "[[a]],[[rec()]],[[rec().a]],[[set()]],[[set().z]],[[rec(*)]],[[rec(*).a]],[[set(*" +
            ")]],[[set(*).z]]", "RecordsetFields", "a", "1", "[[rec().a]],[[rec(*).a]]", "[[rec(*).a]]", "[[rec(*).a]]", "Default", "12", null)]
        [NUnit.Framework.TestCaseAttribute("2", "[[a]],[[rec()]],[[rec().a]],[[set()]],[[set().z]],[[rec(*)]],[[rec(*).a]],[[set(*" +
            ")]],[[set(*).z]]", "RecordsetFields", "b", "1", "", "", "b", "Default", "1", null)]
        [NUnit.Framework.TestCaseAttribute("3", "[[a]],[[rec()]],[[rec().a]],[[set()]],[[set().z]],[[rec(*)]],[[rec(*).a]],[[set(*" +
            ")]],[[set(*).z]]", "RecordsetFields", "[[()]]", "3", "", "", "[[()]]", "Default", "3", null)]
        [NUnit.Framework.TestCaseAttribute("4", "[[a]],[[rec()]],[[rec().a]],[[set()]],[[set().z]],[[rec(*)]],[[rec(*).a]],[[set(*" +
            ")]],[[set(*).z]]", "RecordsetFields", "[[rec().a]]", "11", "", "", "[[rec().a]]", "Default", "11", null)]
        [NUnit.Framework.TestCaseAttribute("5", "[[rec()]],[[rec().a]],[[a]],[[rec().z]],[[rec(*)]],[[rec(*).a]],[[rec(*).z]]", "RecordsetFields", "[[rec().a]]", "5", "[[rec().a]],[[rec(*).a]],[[rec().z]],[[rec(*).z]]", "[[rec().z]]", "[[rec().z]]", "Default", "11", null)]
        [NUnit.Framework.TestCaseAttribute("6", "[[rec()]],[[rec().a]],[[a]],[[rec().z]],[[rec(*)]],[[rec(*).a]],[[rec(*).z]]", "RecordsetFields", "[[rec", "5", "[[rec().a]],[[rec(*).a]],[[rec().z]],[[rec(*).z]]", "[[rec().z]]", "[[rec().z]]", "Default", "11", null)]
        [NUnit.Framework.TestCaseAttribute("7", "[[a]],[[rec()]],[[rec().a]],[[set()]],[[set().z]],[[rec(*)]],[[rec(*).a]],[[set(*" +
            ")]],[[set(*).z]]", "RecordsetFields", "rec e", "5", "[[rec().a]],[[rec(*).a]],[[set().z]],[[set(*).z]]", "[[rec().a]]", "rec [[rec().a]]", "Default", "15", null)]
        [NUnit.Framework.TestCaseAttribute("8", "[[a]],[[rec()]],[[rec().a]],[[set()]],[[set().z]],[[rec(*)]],[[rec(*).a]],[[set(*" +
            ")]],[[set(*).z]]", "RecordsetFields", "a a", "1", "[[rec().a]],[[rec(*).a]]", "[[rec(*).a]]", "[[rec(*).a]] a", "Default", "12", null)]
        [NUnit.Framework.TestCaseAttribute("9", "[[a]],[[rec()]],[[rec().a]],[[set()]],[[set().z]],[[rec(*)]],[[rec(*).a]],[[set(*" +
            ")]],[[set(*).z]]", "RecordsetFields", "b b", "1", "", "", "b b", "Default", "1", null)]
        [NUnit.Framework.TestCaseAttribute("10", "[[rec()]],[[rec().a]],[[a]],[[rec().z]],[[rec(*)]],[[rec(*).a]],[[rec(*).z]]", "RecordsetFields", "[[rec().a]],[[rec().a]]", "5", "[[rec().a]],[[rec(*).a]],[[rec().z]],[[rec(*).z]]", "[[rec().z]]", "[[rec().z]],[[rec().a]]", "Default", "11", null)]
        [NUnit.Framework.TestCaseAttribute("11", "[[rec()]],[[rec().a]],[[a]],[[rec().z]],[[rec(*)]],[[rec(*).a]],[[rec(*).z]]", "RecordsetFields", "[[rec [[rec().a]]", "5", "[[rec().a]],[[rec(*).a]],[[rec().z]],[[rec(*).z]]", "[[rec().z]]", "[[rec().z]] [[rec().a]]", "Default", "11", null)]
        public virtual void InsertForRecordsetFieldsFilterTypeAndDefaultProvider(string testName, string varlist, string filterType, string input, string index, string dropDownList, string option, string result, string provider, string caretposition, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert for RecordsetFields FilterType and Default Provider", exampleTags);
#line 212
this.ScenarioSetup(scenarioInfo);
#line 213
 testRunner.Given(string.Format("I have the following intellisense options \'{0}\'", varlist), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 214
  testRunner.And(string.Format("the filter type is \'{0}\'", filterType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 215
 testRunner.And(string.Format("the current text in the textbox is \'{0}\'", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 216
 testRunner.And(string.Format("the cursor is at index \'{0}\'", index), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 217
 testRunner.And(string.Format("the provider used is \'{0}\'", provider), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 218
 testRunner.And(string.Format("the suggestion list as \'{0}\'", dropDownList), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 219
 testRunner.When(string.Format("I select the following string option \'{0}\'", option), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 220
 testRunner.Then(string.Format("the result text should be \"{0}\" with caret position will be \'{1}\'", result, caretposition), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validation messages when Invalid Variables")]
        [NUnit.Framework.TestCaseAttribute("1", "[[my(-1).var]]", "Recordset index [ -1 ] is not greater than zero", null)]
        [NUnit.Framework.TestCaseAttribute("2", "[[rec\"()\".a]]", "Variable name [[rec\"()\".a]] contains invalid character(s). Only use alphanumeric " +
            "_ and -", null)]
        [NUnit.Framework.TestCaseAttribute("3", "[[rec.a]]", "Variable name [[rec.a]] contains invalid character(s). Only use alphanumeric _ an" +
            "d -", null)]
        [NUnit.Framework.TestCaseAttribute("4", "[[1]]", "Recordset field [[1]] begins with a number", null)]
        [NUnit.Framework.TestCaseAttribute("5", "[[@]]", "Variable name [[@]] contains invalid character(s). Only use alphanumeric _ and -", null)]
        [NUnit.Framework.TestCaseAttribute("6", "[[var#]]", "Variable name [[var#]] contains invalid character(s). Only use alphanumeric _ and" +
            " -", null)]
        [NUnit.Framework.TestCaseAttribute("7", "[[var]]00]]", "Invalid region detected: A close ]] without a related open [[", null)]
        [NUnit.Framework.TestCaseAttribute("8", "[[]]", "Variable name [[]] contains invalid character(s). Only use alphanumeric _ and -", null)]
        [NUnit.Framework.TestCaseAttribute("9", "[[r(q).a]][[r()..]][[r\"]][[r()]][[]][[1]]", "Variable name [[r(q).a]][[r()..]][[r\"]][[r()]][[]][[1]] contains invalid characte" +
            "r(s). Only use alphanumeric _ and -", null)]
        [NUnit.Framework.TestCaseAttribute("10", "[[var]]00[[", "Invalid region detected: An open [[ without a related close ]]", null)]
        public virtual void ValidationMessagesWhenInvalidVariables(string no, string variable, string error, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validation messages when Invalid Variables", exampleTags);
#line 236
this.ScenarioSetup(scenarioInfo);
#line 237
 testRunner.Given(string.Format("the current text in the textbox is \'{0}\'", variable), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 238
 testRunner.And("the provider used is \'Default\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 239
 testRunner.Then(string.Format("the result has the error \'{0}\'", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert for All FilterType and Default Provider Case Insensitive")]
        [NUnit.Framework.TestCaseAttribute("1", "[[Var]],[[VAR2]],[[Rec()]],[[rEc().var]],[[rec().VAR2]]", "All", "text var", "8", "[[Var]],[[VAR2]],[[rEc().var]],[[rec().VAR2]]", "[[Var]]", "text [[Var]]", "Default", "12", null)]
        [NUnit.Framework.TestCaseAttribute("2", "[[var]],[[Var2]],[[rec()]],[[rec().var2]],[[rec().var]]", "All", "text[[var", "9", "[[var]],[[Var2]],[[rec().var]],[[rec().var2]]", "[[Var2]]", "text[[Var2]]", "Default", "12", null)]
        [NUnit.Framework.TestCaseAttribute("3", "[[var]],[[var2]],[[REC()]],[[rec().VAR2]],[[rec().var]]", "All", "text[[REC().var]]", "15", "[[rec().var]],[[rec().VAR2]]", "[[rec().VAR2]]", "text[[rec().VAR2]]", "Default", "18", null)]
        [NUnit.Framework.TestCaseAttribute("4", "[[var]],[[var2]],[[REC()]],[[rec().var2]],[[rec().var]]", "All", "[[", "2", "[[var]],[[var2]],[[rec().var]],[[rec().var2]]", "[[var2]]", "[[var2]]", "Default", "8", null)]
        [NUnit.Framework.TestCaseAttribute("5", "[[var]],[[var2]],[[REC()]],[[rec().var2]],[[rec().var]]", "All", "text[[REC().[[var", "17", "[[var]],[[var2]]", "[[var2]]", "text[[REC().[[var2]]", "Default", "20", null)]
        [NUnit.Framework.TestCaseAttribute("6", "[[var]],[[var2]],[[REC()]],[[rec().var2]],[[rec().var]]", "All", "text[[rec().[[var]]", "17", "[[var]],[[var2]]", "[[var2]]", "text[[rec().[[var2]]", "Default", "20", null)]
        [NUnit.Framework.TestCaseAttribute("7", "[[var]],[[var2]],[[REC()]],[[rec().var2]],[[rec().var]]", "All", "text[[rec().[[var]]]]", "17", "[[var]],[[var2]]", "[[var2]]", "text[[rec().[[var2]]]]", "Default", "20", null)]
        [NUnit.Framework.TestCaseAttribute("8", "[[var]],[[var2]],[[REC()]],[[rec().var2]],[[rec(*).var2]],[[rec().var]],[[rec(*)." +
            "var]]", "All", "[[var]]v", "8", "[[var]],[[var2]],[[rec().var]],[[rec(*).var]],[[rec().var2]],[[rec(*).var2]]", "[[rec(*).var]]", "[[var]][[rec(*).var]]", "Default", "21", null)]
        [NUnit.Framework.TestCaseAttribute("9", "[[var]],[[var2]],[[REC()]],[[rec().var2]],[[rec().var]]", "All", "[[var]][[", "9", "[[var]],[[var2]],[[rec().var]],[[rec().var2]]", "[[rec().var]]", "[[var]][[rec().var]]", "Default", "20", null)]
        [NUnit.Framework.TestCaseAttribute("10", "[[var]],[[VAR2]],[[REC()]],[[rec().var2]],[[rec(*).var2]],[[rec().var]],[[REC(*)." +
            "var]]", "All", "[[var]][[VAR", "12", "[[var]],[[VAR2]],[[rec(*).var2]],[[rec().var2]],[[REC(*).var]],[[rec().var]]", "[[rec(*).var2]]", "[[var]][[rec(*).var2]]", "Default", "22", null)]
        [NUnit.Framework.TestCaseAttribute("11", "[[var]],[[var2]],[[REC()]],[[rec().var2]],[[rec(*).var2]],[[rec().var]],[[rec(*)." +
            "var]]", "All", "[[var]][[var]]", "12", "[[var]],[[var2]],[[rec().var]],[[rec(*).var]],[[rec().var2]],[[rec(*).var2]]", "[[rec(*).var2]]", "[[var]][[rec(*).var2]]", "Default", "22", null)]
        [NUnit.Framework.TestCaseAttribute("12", "[[var]],[[var2]],[[REC()]],[[rec().var2]],[[rec().var]]", "All", "[[var]]", "7", "", "", "[[var]]", "Default", "7", null)]
        [NUnit.Framework.TestCaseAttribute("13", "[[var]],[[var2]],[[REC()]],[[rec().var2]],[[rec().var]]", "All", "[[var]] text", "13", "", "", "[[var]] text", "Default", "13", null)]
        [NUnit.Framework.TestCaseAttribute("14", "[[var]],[[var2]],[[REC()]],[[rec().var2]],[[rec().var]]", "All", "text[[var2]]text", "10", "[[var2]],[[rec().var2]]", "[[rec().var2]]", "text[[rec().var2]]text", "Default", "18", null)]
        [NUnit.Framework.TestCaseAttribute("15", "[[var]],[[var2]],[[REC()]],[[rec().var2]],[[rec().var]]", "All", "r", "1", "[[var]],[[var2]],[[rec().var]],[[rec().var2]]", "[[rec().var2]]", "[[rec().var2]]", "Default", "14", null)]
        [NUnit.Framework.TestCaseAttribute("16", "[[var]],[[var2]],[[REC()]],[[rec().var2]],[[rec().var]]", "All", "[[rec([[va]]).var]]", "10", "[[var]],[[var2]],[[rec().var]],[[rec().var2]]", "[[var]]", "[[rec([[var]]).var]]", "Default", "13", null)]
        [NUnit.Framework.TestCaseAttribute("17", "[[var]],[[var2]],[[REC()]],[[rec().var2]],[[rec().var]]", "All", "[[[[a]]]]", "5", "[[var]],[[var2]],[[rec().var]],[[rec().var2]]", "[[var]]", "[[var]]]]", "Default", "7", null)]
        [NUnit.Framework.TestCaseAttribute("18", "[[var]],[[var2]],[[REC()]],[[rec().var2]],[[REc().var]]", "All", "[[", "2", "[[var]],[[var2]],[[REc().var]],[[rec().var2]]", "[[var]]", "[[var]]", "Default", "7", null)]
        public virtual void InsertForAllFilterTypeAndDefaultProviderCaseInsensitive(string testName, string varlist, string filterType, string input, string index, string dropDownList, string option, string result, string provider, string caretposition, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert for All FilterType and Default Provider Case Insensitive", exampleTags);
#line 253
this.ScenarioSetup(scenarioInfo);
#line 254
 testRunner.Given(string.Format("I have the following intellisense options \'{0}\'", varlist), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 255
 testRunner.And(string.Format("the filter type is \'{0}\'", filterType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 256
 testRunner.And(string.Format("the current text in the textbox is \'{0}\'", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 257
 testRunner.And(string.Format("the cursor is at index \'{0}\'", index), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 258
 testRunner.And(string.Format("the provider used is \'{0}\'", provider), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 259
 testRunner.And(string.Format("the suggestion list as \'{0}\'", dropDownList), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 260
 testRunner.When(string.Format("I select the following string option \'{0}\'", option), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 261
 testRunner.Then(string.Format("the result text should be \"{0}\" with caret position will be \'{1}\'", result, caretposition), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
