// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.Security.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Settings Permissions")]
    [NUnit.Framework.CategoryAttribute("Security")]
    public partial class SettingsPermissionsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Settings Permissions.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Settings Permissions", "\tIn order to set permissions for my server\r\n\tAs a Warewolf user\r\n\tI want to setup" +
                    " a Server Permissions", ProgrammingLanguage.CSharp, new string[] {
                        "Security"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
 #line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Server Permissions")]
        [NUnit.Framework.CategoryAttribute("ServerPermissionsSecurity")]
        [NUnit.Framework.TestCaseAttribute("1", "Deploy To", "Deploy To", null)]
        [NUnit.Framework.TestCaseAttribute("2", "Deploy From", "Deploy From", null)]
        [NUnit.Framework.TestCaseAttribute("3", "View", "View", null)]
        [NUnit.Framework.TestCaseAttribute("4", "Execute", "Execute", null)]
        [NUnit.Framework.TestCaseAttribute("5", "Contribute, View, Execute", "Contribute, View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("6", "Deploy To, Deploy From", "Deploy To, Deploy From", null)]
        [NUnit.Framework.TestCaseAttribute("7", "View, Execute", "View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("8", "View, Execute, Contribute, Deploy To, Deploy From", "View, Execute, Contribute, Deploy To, Deploy From", null)]
        [NUnit.Framework.TestCaseAttribute("9", "Deploy To, View", "Deploy To, View", null)]
        [NUnit.Framework.TestCaseAttribute("10", "Deploy To, Execute", "Deploy To, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("11", "Deploy To, Contribute, View, Execute", "Deploy To, Contribute, View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("12", "Deploy From, View", "Deploy From, View", null)]
        [NUnit.Framework.TestCaseAttribute("13", "Deploy From, Execute", "Deploy From, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("14", "Deploy From, Contribute, View, Execute", "Deploy From, Contribute, View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("15", "Deploy To, Deploy From, View", "Deploy To, Deploy From, View", null)]
        [NUnit.Framework.TestCaseAttribute("16", "Deploy To, Deploy From, Execute", "Deploy To, Deploy From, Execute", null)]
        public virtual void ServerPermissions(string no, string givenRights, string rights, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ServerPermissionsSecurity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Server Permissions", @__tags);
#line 10
this.ScenarioSetup(scenarioInfo);
#line 7
 this.FeatureBackground();
#line 11
        testRunner.Given(string.Format("I have Public with \"{0}\"", givenRights), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
  testRunner.And("I have waited 10 seconds for the rights to propogate to all the resources", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
        testRunner.Then(string.Format("resources should have \"{0}\"", rights), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Setting Selected Resource Permissions for Users")]
        [NUnit.Framework.CategoryAttribute("ResourcePermissionsSecurity")]
        [NUnit.Framework.TestCaseAttribute("1", "View", "Users", "All", "None", "Examples\\Control Flow - Decision", "View", null)]
        [NUnit.Framework.TestCaseAttribute("2", "Execute", "Users", "All", "None", "Examples\\Control Flow - Decision", "Execute", null)]
        [NUnit.Framework.TestCaseAttribute("3", "Contribute, View, Execute", "Users", "All", "None", "Examples\\Control Flow - Decision", "Contribute, View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("4", "View, Execute", "Users", "All", "None", "Examples\\Control Flow - Decision", "View, Execute", null)]
        public virtual void SettingSelectedResourcePermissionsForUsers(string no, string resourceRights, string userGroup, string resources, string rights, string resource, string permissions, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ResourcePermissionsSecurity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Setting Selected Resource Permissions for Users", @__tags);
#line 34
this.ScenarioSetup(scenarioInfo);
#line 7
 this.FeatureBackground();
#line 35
        testRunner.Given("I have a server \"localhost\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 36
        testRunner.And(string.Format("Resource \"{0}\" has rights \"{1}\" for \"{2}\"", resource, resourceRights, userGroup), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
        testRunner.When(string.Format("connected as user part of \"{0}\"", userGroup), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
        testRunner.Then(string.Format("\"{0}\" should have \"{1}\"", resource, permissions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 39
  testRunner.And(string.Format("resources should not have \"{0}\"", rights), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Setting Selected Resource Permissions for Users Overlapping Groups")]
        [NUnit.Framework.CategoryAttribute("OverlappingUserGroupsPermissionsSecurity")]
        [NUnit.Framework.TestCaseAttribute("1", "View", "View", "Users", "All", "View", "Examples\\Control Flow - Decision", "View", null)]
        [NUnit.Framework.TestCaseAttribute("2", "Execute", "View", "Users", "All", "Execute", "Examples\\Control Flow - Decision", "View", null)]
        [NUnit.Framework.TestCaseAttribute("3", "Contribute, View, Execute", "View", "Users", "All", "Contribute, View, Execute", "Examples\\Control Flow - Decision", "View", null)]
        [NUnit.Framework.TestCaseAttribute("4", "View, Execute", "View", "Users", "All", "View, Execute", "Examples\\Control Flow - Decision", "View", null)]
        [NUnit.Framework.TestCaseAttribute("5", "View, Execute, Contribute, Deploy To, Deploy From, Administrator", "View", "Users", "All", "View, Execute, Contribute, Deploy To, Deploy From, Administrator", "Examples\\Control Flow - Decision", "View", null)]
        [NUnit.Framework.TestCaseAttribute("6", "View", "Execute", "Users", "All", "View", "Examples\\Control Flow - Decision", "Execute", null)]
        [NUnit.Framework.TestCaseAttribute("7", "Execute", "Execute", "Users", "All", "Execute", "Examples\\Control Flow - Decision", "Execute", null)]
        [NUnit.Framework.TestCaseAttribute("8", "Contribute, View, Execute", "Execute", "Users", "All", "Contribute, View, Execute", "Examples\\Control Flow - Decision", "Execute", null)]
        [NUnit.Framework.TestCaseAttribute("9", "View, Execute", "Execute", "Users", "All", "View, Execute", "Examples\\Control Flow - Decision", "Execute", null)]
        [NUnit.Framework.TestCaseAttribute("10", "View, Execute, Contribute, Deploy To, Deploy From, Administrator", "Execute", "Users", "All", "View, Execute, Contribute, Deploy To, Deploy From, Administrator", "Examples\\Control Flow - Decision", "Execute", null)]
        [NUnit.Framework.TestCaseAttribute("11", "View", "Contribute, View, Execute", "Users", "All", "View", "Examples\\Control Flow - Decision", "Contribute, View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("12", "Execute", "Contribute, View, Execute", "Users", "All", "Execute", "Examples\\Control Flow - Decision", "Contribute, View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("13", "Contribute, View, Execute", "Contribute, View, Execute", "Users", "All", "Contribute, View, Execute", "Examples\\Control Flow - Decision", "Contribute, View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("14", "View, Execute", "Contribute, View, Execute", "Users", "All", "View, Execute", "Examples\\Control Flow - Decision", "Contribute, View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("15", "View, Execute, Contribute, Deploy To, Deploy From", "Contribute, View, Execute", "Users", "All", "View, Execute, Contribute, Deploy To, Deploy From", "Examples\\Control Flow - Decision", "Contribute, View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("16", "View", "View, Execute", "Users", "All", "View", "Examples\\Control Flow - Decision", "View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("17", "Execute", "View, Execute", "Users", "All", "Execute", "Examples\\Control Flow - Decision", "View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("18", "Contribute, View, Execute", "View, Execute", "Users", "All", "Contribute, View, Execute", "Examples\\Control Flow - Decision", "View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("19", "View, Execute", "View, Execute", "Users", "All", "View, Execute", "Examples\\Control Flow - Decision", "View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("20", "View, Execute, Contribute, Deploy To, Deploy From", "View, Execute", "Users", "All", "View, Execute, Contribute, Deploy To, Deploy From", "Examples\\Control Flow - Decision", "View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("21", "View", "None", "Users", "All", "View", "Examples\\Control Flow - Decision", "None", null)]
        [NUnit.Framework.TestCaseAttribute("22", "Execute", "None", "Users", "All", "Execute", "Examples\\Control Flow - Decision", "None", null)]
        [NUnit.Framework.TestCaseAttribute("23", "Contribute, View, Execute", "None", "Users", "All", "Contribute, View, Execute", "Examples\\Control Flow - Decision", "None", null)]
        [NUnit.Framework.TestCaseAttribute("24", "View, Execute", "None", "Users", "All", "View, Execute", "Examples\\Control Flow - Decision", "None", null)]
        [NUnit.Framework.TestCaseAttribute("25", "View, Execute, Contribute, Deploy To, Deploy From, Administrator", "None", "Users", "All", "View, Execute, Contribute, Deploy To, Deploy From, Administrator", "Examples\\Control Flow - Decision", "None", null)]
        [NUnit.Framework.TestCaseAttribute("26", "None", "Contribute, View, Execute", "Users", "Users", "None", "Examples\\Control Flow - Decision", "Contribute, View, Execute", null)]
        public virtual void SettingSelectedResourcePermissionsForUsersOverlappingGroups(string no, string givenRights, string resourceRights, string userGroup, string resources, string rights, string resource, string permissions, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "OverlappingUserGroupsPermissionsSecurity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Setting Selected Resource Permissions for Users Overlapping Groups", @__tags);
#line 48
this.ScenarioSetup(scenarioInfo);
#line 7
 this.FeatureBackground();
#line 49
  testRunner.Given(string.Format("I have Public with \"{0}\"", givenRights), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 50
        testRunner.And(string.Format("Resource \"{0}\" has rights \"{1}\" for \"{2}\"", resource, resourceRights, userGroup), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
        testRunner.When(string.Format("connected as user part of \"{0}\"", userGroup), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
        testRunner.Then(string.Format("\"{0}\" should have \"{1}\"", resource, permissions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 53
  testRunner.And(string.Format("resources should have \"{0}\"", rights), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Setting Selected Resource Permissions for users conflicting with View permissions" +
            "")]
        [NUnit.Framework.CategoryAttribute("ConflictingViewPermissionsSecurity")]
        [NUnit.Framework.TestCaseAttribute("1", "Users", "Deploy To", "View", "Users", "All", "Deploy To", "Examples\\Control Flow - Decision", "View", null)]
        [NUnit.Framework.TestCaseAttribute("2", "Users", "Deploy From", "View", "Users", "All", "Deploy From", "Examples\\Control Flow - Decision", "View", null)]
        [NUnit.Framework.TestCaseAttribute("3", "Users", "View", "View", "Users", "All", "View", "Examples\\Control Flow - Decision", "View", null)]
        [NUnit.Framework.TestCaseAttribute("4", "Users", "Execute", "View", "Users", "All", "Execute", "Examples\\Control Flow - Decision", "View", null)]
        [NUnit.Framework.TestCaseAttribute("5", "Users", "Contribute, View, Execute", "View", "Users", "All", "Contribute, View, Execute", "Examples\\Control Flow - Decision", "View", null)]
        [NUnit.Framework.TestCaseAttribute("6", "Users", "Deploy To, Deploy From", "View", "Users", "All", "Deploy To, Deploy From", "Examples\\Control Flow - Decision", "View", null)]
        [NUnit.Framework.TestCaseAttribute("7", "Users", "View, Execute", "View", "Users", "All", "View, Execute", "Examples\\Control Flow - Decision", "View", null)]
        [NUnit.Framework.TestCaseAttribute("8", "Users", "View, Execute, Contribute, Deploy To, Deploy From, Administrator", "View", "Users", "All", "View, Execute, Contribute, Deploy To, Deploy From, Administrator", "Examples\\Control Flow - Decision", "View", null)]
        [NUnit.Framework.TestCaseAttribute("9", "Users", "Deploy To, View", "View", "Users", "All", "Deploy To, View", "Examples\\Control Flow - Decision", "View", null)]
        [NUnit.Framework.TestCaseAttribute("10", "Users", "Deploy To, Execute", "View", "Users", "All", "Deploy To, Execute", "Examples\\Control Flow - Decision", "View", null)]
        [NUnit.Framework.TestCaseAttribute("11", "Users", "Deploy To, Contribute, View, Execute", "View", "Users", "All", "Deploy To, Contribute, View, Execute", "Examples\\Control Flow - Decision", "View", null)]
        [NUnit.Framework.TestCaseAttribute("12", "Users", "Deploy From, View", "View", "Users", "All", "Deploy From, View", "Examples\\Control Flow - Decision", "View", null)]
        [NUnit.Framework.TestCaseAttribute("13", "Users", "Deploy From, Execute", "View", "Users", "All", "Deploy From, Execute", "Examples\\Control Flow - Decision", "View", null)]
        [NUnit.Framework.TestCaseAttribute("14", "Users", "Deploy From, Contribute, View, Execute", "View", "Users", "All", "Deploy From, Contribute, View, Execute", "Examples\\Control Flow - Decision", "View", null)]
        [NUnit.Framework.TestCaseAttribute("15", "Users", "Deploy To, Deploy From, View", "View", "Users", "All", "Deploy To, Deploy From , View", "Examples\\Control Flow - Decision", "View", null)]
        [NUnit.Framework.TestCaseAttribute("16", "Users", "Deploy To, Deploy From, Execute", "View", "Users", "All", "Deploy To, Deploy From , Execute", "Examples\\Control Flow - Decision", "View", null)]
        [NUnit.Framework.TestCaseAttribute("17", "Users", "Deploy To, Deploy From, Contribute, View, Execute", "View", "Users", "All", "Deploy To, Deploy From , Contribute, View, Execute", "Examples\\Control Flow - Decision", "View", null)]
        public virtual void SettingSelectedResourcePermissionsForUsersConflictingWithViewPermissions(string no, string group, string givenRights, string resourceRights, string userGroup, string resources, string rights, string resource, string permissions, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ConflictingViewPermissionsSecurity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Setting Selected Resource Permissions for users conflicting with View permissions" +
                    "", @__tags);
#line 84
this.ScenarioSetup(scenarioInfo);
#line 7
 this.FeatureBackground();
#line 85
        testRunner.Given("I have a server \"localhost\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 86
        testRunner.And(string.Format("it has \"{0}\" with \"{1}\"", group, givenRights), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
        testRunner.And(string.Format("Resource \"{0}\" has rights \"{1}\" for \"{2}\"", resource, resourceRights, userGroup), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
        testRunner.When(string.Format("connected as user part of \"{0}\"", userGroup), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 89
        testRunner.Then(string.Format("\"{0}\" should have \"{1}\"", resource, permissions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 90
  testRunner.And(string.Format("resources should have \"{0}\"", rights), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Setting Selected Resource Permissions for users and conflicting with Execute perm" +
            "issions")]
        [NUnit.Framework.CategoryAttribute("ConflictingExecutePermissionsSecurity")]
        [NUnit.Framework.TestCaseAttribute("1", "Users", "Deploy To", "Examples\\Control Flow - Decision", "Execute", "Users", "All", "Deploy To", "Examples\\Control Flow - Decision", "Execute", null)]
        [NUnit.Framework.TestCaseAttribute("2", "Users", "Deploy From", "Examples\\Control Flow - Decision", "Execute", "Users", "All", "Deploy From", "Examples\\Control Flow - Decision", "Execute", null)]
        [NUnit.Framework.TestCaseAttribute("3", "Users", "View", "Examples\\Control Flow - Decision", "Execute", "Users", "All", "View", "Examples\\Control Flow - Decision", "Execute", null)]
        [NUnit.Framework.TestCaseAttribute("4", "Users", "Execute", "Examples\\Control Flow - Decision", "Execute", "Users", "All", "Execute", "Examples\\Control Flow - Decision", "Execute", null)]
        [NUnit.Framework.TestCaseAttribute("5", "Users", "Contribute, View, Execute", "Examples\\Control Flow - Decision", "Execute", "Users", "All", "Contribute, View, Execute", "Examples\\Control Flow - Decision", "Execute", null)]
        [NUnit.Framework.TestCaseAttribute("6", "Users", "Deploy To, Deploy From", "Examples\\Control Flow - Decision", "Execute", "Users", "All", "Deploy To, Deploy From", "Examples\\Control Flow - Decision", "Execute", null)]
        [NUnit.Framework.TestCaseAttribute("7", "Users", "View, Execute", "Examples\\Control Flow - Decision", "Execute", "Users", "All", "View, Execute", "Examples\\Control Flow - Decision", "Execute", null)]
        [NUnit.Framework.TestCaseAttribute("8", "Users", "View, Execute, Contribute, Deploy To, Deploy From, Administrator", "Examples\\Control Flow - Decision", "Execute", "Users", "All", "View, Execute, Contribute, Deploy To, Deploy From, Administrator", "Examples\\Control Flow - Decision", "Execute", null)]
        [NUnit.Framework.TestCaseAttribute("9", "Users", "Deploy To, View", "Examples\\Control Flow - Decision", "Execute", "Users", "All", "Deploy To, View", "Examples\\Control Flow - Decision", "Execute", null)]
        [NUnit.Framework.TestCaseAttribute("10", "Users", "Deploy To, Execute", "Examples\\Control Flow - Decision", "Execute", "Users", "All", "Deploy To, Execute", "Examples\\Control Flow - Decision", "Execute", null)]
        [NUnit.Framework.TestCaseAttribute("11", "Users", "Deploy To, Contribute, View, Execute", "Examples\\Control Flow - Decision", "Execute", "Users", "All", "Deploy To, Contribute, View, Execute", "Examples\\Control Flow - Decision", "Execute", null)]
        [NUnit.Framework.TestCaseAttribute("12", "Users", "Deploy From, View", "Examples\\Control Flow - Decision", "Execute", "Users", "All", "Deploy From, View", "Examples\\Control Flow - Decision", "Execute", null)]
        [NUnit.Framework.TestCaseAttribute("13", "Users", "Deploy From, Execute", "Examples\\Control Flow - Decision", "Execute", "Users", "All", "Deploy From, Execute", "Examples\\Control Flow - Decision", "Execute", null)]
        [NUnit.Framework.TestCaseAttribute("14", "Users", "Deploy From, Contribute, View, Execute", "Examples\\Control Flow - Decision", "Execute", "Users", "All", "Deploy From, Contribute, View, Execute", "Examples\\Control Flow - Decision", "Execute", null)]
        [NUnit.Framework.TestCaseAttribute("15", "Users", "Deploy To, Deploy From, View", "Examples\\Control Flow - Decision", "Execute", "Users", "All", "Deploy To, Deploy From, View", "Examples\\Control Flow - Decision", "Execute", null)]
        [NUnit.Framework.TestCaseAttribute("16", "Users", "Deploy To, Deploy From, Execute", "Examples\\Control Flow - Decision", "Execute", "Users", "All", "Deploy To, Deploy From, Execute", "Examples\\Control Flow - Decision", "Execute", null)]
        [NUnit.Framework.TestCaseAttribute("17", "Users", "Deploy To, Deploy From, Contribute, View, Execute", "Examples\\Control Flow - Decision", "Execute", "Users", "All", "Deploy To, Deploy From, Contribute, View, Execute", "Examples\\Control Flow - Decision", "Execute", null)]
        public virtual void SettingSelectedResourcePermissionsForUsersAndConflictingWithExecutePermissions(string no, string group, string givenRights, string resourceName, string resourceRights, string userGroup, string resources, string rights, string resource, string permissions, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ConflictingExecutePermissionsSecurity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Setting Selected Resource Permissions for users and conflicting with Execute perm" +
                    "issions", @__tags);
#line 112
this.ScenarioSetup(scenarioInfo);
#line 7
 this.FeatureBackground();
#line 113
  testRunner.Given(string.Format("I have Users with \"{0}\"", givenRights), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 114
        testRunner.And(string.Format("Resource \"{0}\" has rights \"{1}\" for \"{2}\"", resourceName, resourceRights, userGroup), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 115
        testRunner.When(string.Format("connected as user part of \"{0}\"", userGroup), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 116
        testRunner.Then(string.Format("\"{0}\" should have \"{1}\"", resource, permissions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 117
  testRunner.And(string.Format("resources should have \"{0}\"", rights), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Setting Selected Resource Permissions for users and conflicting with Contribute, " +
            "View and Execute permissions")]
        [NUnit.Framework.CategoryAttribute("ConflictingContributeViewExecutePermissionsSecurity")]
        [NUnit.Framework.TestCaseAttribute("1", "Deploy To", "Contribute, View, Execute", "Users", "All", "Deploy To", "Examples\\Control Flow - Decision", "Contribute, View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("2", "Deploy From", "Contribute, View, Execute", "Users", "All", "Deploy From", "Examples\\Control Flow - Decision", "Contribute, View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("3", "View", "Contribute, View, Execute", "Users", "All", "View", "Examples\\Control Flow - Decision", "Contribute, View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("4", "Execute", "Contribute, View, Execute", "Users", "All", "Execute", "Examples\\Control Flow - Decision", "Contribute, View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("5", "Contribute, View, Execute", "Contribute, View, Execute", "Users", "All", "Contribute, View, Execute", "Examples\\Control Flow - Decision", "Contribute, View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("6", "Deploy To, Deploy From", "Contribute, View, Execute", "Users", "All", "Deploy To, Deploy From", "Examples\\Control Flow - Decision", "Contribute, View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("7", "View, Execute", "Contribute, View, Execute", "Users", "All", "View, Execute", "Examples\\Control Flow - Decision", "Contribute, View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("8", "View, Execute, Contribute, Deploy To, Deploy From", "Contribute, View, Execute", "Users", "All", "View, Execute, Contribute, Deploy To, Deploy From", "Examples\\Control Flow - Decision", "Contribute, View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("9", "Deploy To, View", "Contribute, View, Execute", "Users", "All", "Deploy To, View", "Examples\\Control Flow - Decision", "Contribute, View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("10", "Deploy To, Execute", "Contribute, View, Execute", "Users", "All", "Deploy To, Execute", "Examples\\Control Flow - Decision", "Contribute, View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("11", "Deploy To, Contribute, View, Execute", "Contribute, View, Execute", "Users", "All", "Deploy To, Contribute, View, Execute", "Examples\\Control Flow - Decision", "Contribute, View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("12", "Deploy From, View", "Contribute, View, Execute", "Users", "All", "Deploy From, View", "Examples\\Control Flow - Decision", "Contribute, View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("13", "Deploy From, Execute", "Contribute, View, Execute", "Users", "All", "Deploy From, Execute", "Examples\\Control Flow - Decision", "Contribute, View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("14", "Deploy From, Contribute, View, Execute", "Contribute, View, Execute", "Users", "All", "Deploy From, Contribute, View, Execute", "Examples\\Control Flow - Decision", "Contribute, View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("15", "Deploy To, Deploy From, View", "Contribute, View, Execute", "Users", "All", "Deploy To, Deploy From, View", "Examples\\Control Flow - Decision", "Contribute, View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("16", "Deploy To, Deploy From, Execute", "Contribute, View, Execute", "Users", "All", "Deploy To, Deploy From, Execute", "Examples\\Control Flow - Decision", "Contribute, View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("17", "Deploy To, Deploy From, Contribute, View, Execute, Administrator", "Contribute, View, Execute", "Users", "All", "Deploy To, Deploy From, Contribute, View, Execute, Administrator", "Examples\\Control Flow - Decision", "Contribute, View, Execute", null)]
        public virtual void SettingSelectedResourcePermissionsForUsersAndConflictingWithContributeViewAndExecutePermissions(string no, string givenRights, string resourceRights, string userGroup, string resources, string rights, string resource, string permissions, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ConflictingContributeViewExecutePermissionsSecurity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Setting Selected Resource Permissions for users and conflicting with Contribute, " +
                    "View and Execute permissions", @__tags);
#line 139
this.ScenarioSetup(scenarioInfo);
#line 7
 this.FeatureBackground();
#line 140
       testRunner.Given(string.Format("I have Users with \"{0}\"", givenRights), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 141
        testRunner.And(string.Format("Resource \"{0}\" has rights \"{1}\" for \"{2}\"", resource, resourceRights, userGroup), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
        testRunner.When(string.Format("connected as user part of \"{0}\"", userGroup), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 143
        testRunner.Then(string.Format("\"{0}\" should have \"{1}\"", resource, permissions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 144
  testRunner.And(string.Format("resources should have \"{0}\"", rights), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Setting Selected Resource Permissions for users and conflicting with View and Exe" +
            "cute permissions")]
        [NUnit.Framework.CategoryAttribute("ConflictingViewExecutePermissionsSecurity")]
        [NUnit.Framework.TestCaseAttribute("1", "Deploy To", "View, Execute", "Users", "All", "Deploy To", "Examples\\Control Flow - Decision", "View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("2", "Deploy From", "View, Execute", "Users", "All", "Deploy From", "Examples\\Control Flow - Decision", "View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("3", "View", "View, Execute", "Users", "All", "View", "Examples\\Control Flow - Decision", "View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("4", "Contribute, View, Execute", "View, Execute", "Users", "All", "Contribute, View, Execute", "Examples\\Control Flow - Decision", "View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("5", "Deploy To, Deploy From", "View, Execute", "Users", "All", "Deploy To, Deploy From", "Examples\\Control Flow - Decision", "View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("6", "View, Execute", "View, Execute", "Users", "All", "View, Execute", "Examples\\Control Flow - Decision", "View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("7", "View, Execute, Contribute, Deploy To, Deploy From", "View, Execute", "Users", "All", "View, Execute, Contribute, Deploy To, Deploy From", "Examples\\Control Flow - Decision", "View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("8", "Deploy To, View", "View, Execute", "Users", "All", "Deploy To, View", "Examples\\Control Flow - Decision", "View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("9", "Deploy To, Execute", "View, Execute", "Users", "All", "Deploy To, Execute", "Examples\\Control Flow - Decision", "View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("10", "Deploy To, Contribute, View, Execute", "View, Execute", "Users", "All", "Deploy To, Contribute, View, Execute", "Examples\\Control Flow - Decision", "View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("11", "Deploy From, View", "View, Execute", "Users", "All", "Deploy From, View", "Examples\\Control Flow - Decision", "View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("12", "Deploy From, Execute", "View, Execute", "Users", "All", "Deploy From, Execute", "Examples\\Control Flow - Decision", "View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("13", "Deploy From, Contribute, View, Execute", "View, Execute", "Users", "All", "Deploy From, Contribute, View, Execute", "Examples\\Control Flow - Decision", "View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("14", "Deploy To, Deploy From, View", "View, Execute", "Users", "All", "Deploy To, Deploy From, View", "Examples\\Control Flow - Decision", "View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("15", "Deploy To, Deploy From, Execute", "View, Execute", "Users", "All", "Deploy To, Deploy From, Execute", "Examples\\Control Flow - Decision", "View, Execute", null)]
        [NUnit.Framework.TestCaseAttribute("16", "Deploy To, Deploy From, Contribute, View, Execute, Administrator", "View, Execute", "Users", "All", "Deploy To, Deploy From, Contribute, View, Execute, Administrator", "Examples\\Control Flow - Decision", "View, Execute", null)]
        public virtual void SettingSelectedResourcePermissionsForUsersAndConflictingWithViewAndExecutePermissions(string no, string givenRights, string resourceRights, string userGroup, string resources, string rights, string resource, string permissions, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ConflictingViewExecutePermissionsSecurity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Setting Selected Resource Permissions for users and conflicting with View and Exe" +
                    "cute permissions", @__tags);
#line 166
this.ScenarioSetup(scenarioInfo);
#line 7
 this.FeatureBackground();
#line 167
        testRunner.Given(string.Format("I have Users with \"{0}\"", givenRights), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 168
        testRunner.And(string.Format("Resource \"{0}\" has rights \"{1}\" for \"{2}\"", resource, resourceRights, userGroup), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 169
        testRunner.When(string.Format("connected as user part of \"{0}\"", userGroup), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 170
        testRunner.Then(string.Format("\"{0}\" should have \"{1}\"", resource, permissions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 171
  testRunner.And(string.Format("resources should have \"{0}\"", rights), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Setting Selected Resource Permissions for users and no conflicting permissions")]
        [NUnit.Framework.CategoryAttribute("NoConflictingPermissionsSecurity")]
        [NUnit.Framework.TestCaseAttribute("1", "Deploy To", "None", "Users", "All", "Deploy To", "Examples\\Control Flow - Decision", "None", null)]
        [NUnit.Framework.TestCaseAttribute("2", "Deploy From", "None", "Users", "All", "Deploy From", "Examples\\Control Flow - Decision", "None", null)]
        [NUnit.Framework.TestCaseAttribute("3", "View", "None", "Users", "All", "View", "Examples\\Control Flow - Decision", "None", null)]
        [NUnit.Framework.TestCaseAttribute("4", "Execute", "None", "Users", "All", "Execute", "Examples\\Control Flow - Decision", "None", null)]
        [NUnit.Framework.TestCaseAttribute("5", "Contribute, View, Execute", "None", "Users", "All", "Contribute, View, Execute", "Examples\\Control Flow - Decision", "None", null)]
        [NUnit.Framework.TestCaseAttribute("6", "Deploy To, Deploy From", "None", "Users", "All", "Deploy To, Deploy From", "Examples\\Control Flow - Decision", "None", null)]
        [NUnit.Framework.TestCaseAttribute("7", "View, Execute", "None", "Users", "All", "View, Execute", "Examples\\Control Flow - Decision", "None", null)]
        [NUnit.Framework.TestCaseAttribute("8", "View, Execute, Contribute, Deploy To, Deploy From, Administrator", "None", "Users", "All", "View, Execute, Contribute, Deploy To, Deploy From, Administrator", "Examples\\Control Flow - Decision", "None", null)]
        [NUnit.Framework.TestCaseAttribute("9", "Deploy To, View", "None", "Users", "All", "Deploy To, View", "Examples\\Control Flow - Decision", "None", null)]
        [NUnit.Framework.TestCaseAttribute("10", "Deploy To, Execute", "None", "Users", "All", "Deploy To, Execute", "Examples\\Control Flow - Decision", "None", null)]
        [NUnit.Framework.TestCaseAttribute("11", "Deploy To, Contribute, View, Execute", "None", "Users", "All", "Deploy To, Contribute, View, Execute", "Examples\\Control Flow - Decision", "None", null)]
        [NUnit.Framework.TestCaseAttribute("12", "Deploy From, View", "None", "Users", "All", "Deploy From, View", "Examples\\Control Flow - Decision", "None", null)]
        [NUnit.Framework.TestCaseAttribute("13", "Deploy From, Execute", "None", "Users", "All", "Deploy From, Execute", "Examples\\Control Flow - Decision", "None", null)]
        [NUnit.Framework.TestCaseAttribute("14", "Deploy From, Contribute, View, Execute", "None", "Users", "All", "Deploy From, Contribute, View, Execute", "Examples\\Control Flow - Decision", "None", null)]
        [NUnit.Framework.TestCaseAttribute("15", "Deploy To, Deploy From, View", "None", "Users", "All", "Deploy To, Deploy From, View", "Examples\\Control Flow - Decision", "None", null)]
        [NUnit.Framework.TestCaseAttribute("16", "Deploy To, Deploy From, Execute", "None", "Users", "All", "Deploy To, Deploy From, Execute", "Examples\\Control Flow - Decision", "None", null)]
        [NUnit.Framework.TestCaseAttribute("17", "Deploy To, Deploy From, Contribute, View, Execute, Administrator", "None", "Users", "All", "Deploy To, Deploy From, Contribute, View, Execute, Administrator", "Examples\\Control Flow - Decision", "None", null)]
        public virtual void SettingSelectedResourcePermissionsForUsersAndNoConflictingPermissions(string no, string givenRights, string resourceRights, string userGroup, string resources, string rights, string resource, string permissions, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "NoConflictingPermissionsSecurity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Setting Selected Resource Permissions for users and no conflicting permissions", @__tags);
#line 192
this.ScenarioSetup(scenarioInfo);
#line 7
 this.FeatureBackground();
#line 193
        testRunner.Given(string.Format("I have Users with \"{0}\"", givenRights), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 194
        testRunner.And(string.Format("Resource \"{0}\" has rights \"{1}\" for \"{2}\"", resource, resourceRights, userGroup), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 195
        testRunner.When(string.Format("connected as user part of \"{0}\"", userGroup), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 196
        testRunner.Then(string.Format("\"{0}\" should have \"{1}\"", resource, permissions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 197
  testRunner.And(string.Format("resources should have \"{0}\"", rights), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
